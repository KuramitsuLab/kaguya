正規表現構文のサマリー


構文
マッチ

 
文字
x
文字x
\\
バックスラッシュ文字
\0n
8進値0nを持つ文字(0 <= n <= 7)
\0nn
8進値0nnを持つ文字(0 <= n <= 7)
\0mnn
8進値0mnnを持つ文字(0 <= m <= 3, 0 <= n <= 7)
\xhh
16進値 0xhhを持つ文字 
\uhhhh
16進値 0xhhhhを持つ文字 
\x{h...h}
16進値0xh...hを持つ文字(Character.MIN_CODE_POINT  <= 0xh...h <=&nbsp Character.MAX_CODE_POINT)
\t
タブ文字(「\u0009」)
\n
改行文字(「\u000A」)
\r
キャリッジ・リターン文字(「\u000D」)
\f
用紙送り文字(「\u000C」)
\a
警告(ベル)文字(「\u0007」)
\e
エスケープ文字(「\u001B」)
\cx
xに対応する制御文字
 
文字クラス
[abc]
a、b、またはc (単純クラス)
[^abc]
a、b、c以外の文字(否定)
[a-zA-Z]
a - zまたはA - Z (範囲)
[a-d[m-p]]
a - dまたはm - p: [a-dm-p] (結合)
[a-z&&[def]]
d、e、またはf (交差)
[a-z&&[^bc]]
a - z (bとcを除く): [ad-z] (減算)
[a-z&&[^m-p]]
a - z (m - pを除く): [a-lq-z] (減算)
 
定義済みの文字クラス
.
任意の文字(行末記号とマッチする場合もある)
\d
数字: [0-9]
\D
数字以外: [^0-9]
\h
水平方向の空白文字: [ \t\xA0\u1680\u180e\u2000-\u200a\u202f\u205f\u3000]
\H
水平方向以外の空白文字: [^\h]
\s
空白文字: [\t\n\x0B\f\r]
\S
非空白文字: [^\s]
\v
垂直方向の空白文字: [\n\x0B\f\r\x85\u2028\u2029]

\V
垂直方向以外の空白文字: [^\v]
\w
単語構成文字: [a-zA-Z_0-9]
\W
非単語文字: [^\w]
 
POSIX文字クラス(US-ASCIIのみ)
\p{Lower}
小文字の英字: [a-z]
\p{Upper}
大文字の英字: [A-Z]
\p{ASCII}
すべてのASCII文字: [\x00-\x7F]
\p{Alpha}
英字: [\p{Lower}\p{Upper}]
\p{Digit}
10 進数字: [0-9]
\p{Alnum}
英数字: [\p{Alpha}\p{Digit}]
\p{Punct}
句読文字: One of !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

\p{Graph}
表示できる文字: [\p{Alnum}\p{Punct}]
\p{Print}
プリント可能文字: [\p{Graph}\x20]
\p{Blank}
空白またはタブ: [\t]
\p{Cntrl}
制御文字: [\x00-\x1F\x7F]
\p{XDigit}
16進数字: [0-9a-fA-F]
\p{Space}
空白文字: [\t\n\x0B\f\r]
 
java.lang.Characterクラス(単純なjava文字タイプ)
\p{javaLowerCase}
java.lang.Character.isLowerCase()と等価
\p{javaUpperCase}
java.lang.Character.isUpperCase()と等価
\p{javaWhitespace}
java.lang.Character.isWhitespace()と等価
\p{javaMirrored}
java.lang.Character.isMirrored()と等価
 
Unicode書体、ブロック、カテゴリ、バイナリ・プロパティのクラス
\p{IsLatin}
Latin 書体文字(書体)
\p{InGreek}
Greek ブロックの文字(ブロック)
\p{Lu}
大文字(カテゴリ)
\p{IsAlphabetic}
英字(バイナリ・プロパティ)
\p{Sc}
通貨記号
\P{InGreek}
ギリシャ語ブロック以外の文字(否定)
[\p{L}&&[^\p{Lu}]]
大文字以外の文字(減算)
 
境界正規表現エンジン
^
行の先頭
$
行の末尾
\b
単語境界
\B
非単語境界
\A
入力の先頭
\G
前回のマッチの末尾
\Z
最後の行末記号がある場合は、それを除く入力の末尾 
\z
入力の末尾
 
改行正規表現エンジン
\R
すべてのUnicode改行シーケンスは、\u000D\u000A|[\u000A\u000B\u000C\u000D\u0085\u2028\u2029] に等しい
 
最長一致数量子
X?
X、1または0回
X*
X、0回以上
X+
X、1回以上
X{n}
X、n回
X{n,}
X、n回以上
X{n,m}
X、n回以上、m回以下
 
最短一致数量子
X??
X、1または0回
X*?
X、0回以上
X+?
X、1回以上
X{n}?
X、n回
X{n,}?
X、n回以上
X{n,m}?
X、n回以上、m回以下
 
強欲な数量子
X?+
X、1または0回
X*+
X、0回以上
X++
X、1回以上
X{n}+
X、n回
X{n,}+
X、n回以上
X{n,m}+
X、n回以上、m回以下
 
論理演算子
XY
Xの直後にY
X|Y
XまたはY
(X)
X、前方参照を行う正規表現グループ
 
前方参照
\n
マッチしたn番目の前方参照を行う正規表現グループ
\k<name>
「名前」がマッチした名前付きの前方参照を行うグループ
 
引用
\
なし
============================================================
XML名前空間、javax.xml.stream.isRepairingNamespaces、および書込みメソッドの動作


メソッド 
isRepairingNamespaces == true
isRepairingNamespaces == false


 
namespaceURIバインドあり
namespaceURIバインドなし
namespaceURIバインドあり
namespaceURIバインドなし




writeAttribute(namespaceURI, localName, value)



                 prefix:localName="value" [1]



                 xmlns:{generated}="namespaceURI" {generated}:localName="value"
             



                 prefix:localName="value" [1]



XMLStreamException



writeAttribute(prefix, namespaceURI, localName, value)



                 同じ接頭辞にバインド:prefix:localName="value" [1] 異なる接頭辞にバインド:xmlns:{generated}="namespaceURI" {generated}:localName="value"
             


                 xmlns:prefix="namespaceURI" prefix:localName="value" [3]




                 同じ接頭辞にバインド: prefix:localName="value" [1][2] 異なる接頭辞にバインド: XMLStreamException[2]



                 xmlns:prefix="namespaceURI" prefix:localName="value" [2][5]



writeStartElement(namespaceURI, localName)  writeEmptyElement(namespaceURI, localName)



                 <prefix:localName> [1]



                 <{generated}:localName xmlns:{generated}="namespaceURI">
             



                 <prefix:localName> [1]



XMLStreamException



writeStartElement(prefix, localName, namespaceURI)  writeEmptyElement(prefix, localName, namespaceURI)



                 同じ接頭辞にバインド: <prefix:localName> [1] 異なる接頭辞にバインド:<{generated}:localName xmlns:{generated}="namespaceURI">
             


                 <prefix:localName xmlns:prefix="namespaceURI"> [4]




                 同じ接頭辞にバインド: <prefix:localName> [1] 異なる接頭辞にバインド: XMLStreamException



                 <prefix:localName> 
             





                 注:
                 
[1] namespaceURIがデフォルトの名前空間URIと等しい場合、接頭辞は書き込まれません
[2] prefix == ""||null && namespaceURI == ""の場合、接頭辞または名前空間の宣言は生成または書き込みされません
[3] prefix == ""||nullの場合、接頭辞はランダムに生成されます
[4] prefix == ""||nullの場合、デフォルトの名前空間として処理され、接頭辞は生成または書き込みされません
============================================================
「Default」(プラットフォームのデフォルトを使用します)


WEIGHT
Number
WEIGHT_REGULAR、WEIGHT_BOLD
WEIGHT_REGULAR


WIDTH
Number
WIDTH_CONDENSED、WIDTH_REGULAR、WIDTH_EXTENDED
WIDTH_REGULAR


POSTURE
Number
POSTURE_REGULAR、POSTURE_OBLIQUE
POSTURE_REGULAR


SIZE
Number
なし
12.0


TRANSFORM
TransformAttribute
TransformAttribute IDENTITYを参照
TransformAttribute.IDENTITY


SUPERSCRIPT
Integer
SUPERSCRIPT_SUPER、SUPERSCRIPT_SUB
0 (標準のグリフとメトリックスを使用します)


FONT
Font
なし
null (フォントの解決をオーバーライドしません)


CHAR_REPLACEMENT
GraphicAttribute
なし
null (フォントのグリフを使用してテキストを描画します)


FOREGROUND
Paint
なし
null (現在のグラフィックスのペイントを使用します)


BACKGROUND
Paint
なし
null (バックグラウンドを描画しません)


UNDERLINE
Integer
UNDERLINE_ON
-1 (下線を描画しません)


STRIKETHROUGH
Boolean
STRIKETHROUGH_ON
false (取消し線を描画しません)


RUN_DIRECTION
Boolean
RUN_DIRECTION_LTRRUN_DIRECTION_RTL
null (Bidi標準のデフォルトを使用します)


BIDI_EMBEDDING
Integer
なし
0 (基本の行方向を使用します)


JUSTIFICATION
Number
JUSTIFICATION_FULL
JUSTIFICATION_FULL


INPUT_METHOD_HIGHLIGHT
InputMethodHighlight、Annotation
(クラスを参照)
null (インプット・ハイライトを適用しません)


INPUT_METHOD_UNDERLINE
Integer
UNDERLINE_LOW_ONE_PIXEL、UNDERLINE_LOW_TWO_PIXEL
-1 (下線を描画しません)


SWAP_COLORS
Boolean
SWAP_COLORS_ON
false (色を交換しません)


NUMERIC_SHAPING
NumericShaper
なし
null (数字の形状決定を行いません)


KERNING
Integer
KERNING_ON
0 (カーニングを要求しません)


LIGATURES
Integer
LIGATURES_ON
0 (オプション合字を作成しません)


TRACKING
Number
TRACKING_LOOSE、TRACKING_TIGHT
0 (トラッキングを追加しません)
============================================================
receive_request_service_contexts
receive_request
send_reply
send_exception
send_other




RequestInfoから継承される:

request_id
はい
はい
はい
はい
はい
operation
はい
はい
はい
はい
はい
arguments
いいえ 
はい1
はい
いいえ2
いいえ2

exceptions
いいえ 
はい
はい
はい
はい
contexts
いいえ 
はい
はい
はい
はい
operation_context
いいえ 
はい
はい
いいえ 
いいえ 

result
いいえ 
いいえ 
はい
いいえ 
いいえ 

response_expected
はい
はい
はい
はい
はい
sync_scope
はい
はい
はい
はい
はい
request_id
はい はい はい はい はい
operation
はい はい はい はい はい
arguments
いいえ  はい1</sub
はい いいえ2
いいえ2

exceptions
いいえ  はい はい はい はい
contexts
いいえ  はい はい はい はい
operation_context
いいえ  はい はい いいえ  いいえ 
result
いいえ  いいえ  はい いいえ  いいえ 
response_expected
はい はい はい はい はい
sync_scope
はい はい はい はい はい
reply_status
いいえ  いいえ  はい はい はい
forward_reference
いいえ  いいえ  いいえ  いいえ  はい2

get_slot
はい はい はい はい はい
get_request_service_context
はい いいえ  はい はい はい
get_reply_service_context
いいえ  いいえ  はい はい はい

ServerRequestInfo固有:

sending_exception
いいえ  いいえ  いいえ  はい いいえ 
object_id
いいえ  はい はい はい3
はい3

adapter_id
いいえ  はい はい はい3
はい3

server_id
いいえ  はい はい はい はい
orb_id
いいえ  はい はい はい はい
adapter_name
いいえ  はい はい はい はい
target_most_derived_interface
いいえ  はい いいえ4
いいえ4
いいえ4

get_server_policy
はい はい はい はい はい
set_slot
はい はい はい はい はい
target_is_a
いいえ  はい いいえ4
いいえ4
いいえ4

add_reply_service_context
はい はい はい はい はい



ServerRequestInfoがreceive_requestに渡されるときは、各引数のリストにin、inout、outのどれかのエントリがあります
============================================================
receive_request_service_contexts
receive_request
send_reply
send_exception
send_other




RequestInfoから継承される:

request_id
はい
はい
はい
はい
はい
operation
はい
はい
はい
はい
はい
arguments
いいえ 
はい1
はい
いいえ2
いいえ2

exceptions
いいえ 
はい
はい
はい
はい
contexts
いいえ 
はい
はい
はい
はい
operation_context
いいえ 
はい
はい
いいえ 
いいえ 

result
いいえ 
いいえ 
はい
いいえ 
いいえ 

response_expected
はい
はい
はい
はい
はい
sync_scope
はい
はい
はい
はい
はい
request_id
はい はい はい はい はい
operation
はい はい はい はい はい
arguments
いいえ  はい1</sub
はい いいえ2
いいえ2

exceptions
いいえ  はい はい はい はい
contexts
いいえ  はい はい はい はい
operation_context
いいえ  はい はい いいえ  いいえ 
result
いいえ  いいえ  はい いいえ  いいえ 
response_expected
はい はい はい はい はい
sync_scope
はい はい はい はい はい
reply_status
いいえ  いいえ  はい はい はい
forward_reference
いいえ  いいえ  いいえ  いいえ  はい2

get_slot
はい はい はい はい はい
get_request_service_context
はい いいえ  はい はい はい
get_reply_service_context
いいえ  いいえ  はい はい はい

ServerRequestInfo固有:

sending_exception
いいえ  いいえ  いいえ  はい いいえ 
object_id
いいえ  はい はい はい3
はい3

adapter_id
いいえ  はい はい はい3
はい3

server_id
いいえ  はい はい はい はい
orb_id
いいえ  はい はい はい はい
adapter_name
いいえ  はい はい はい はい
target_most_derived_interface
いいえ  はい いいえ4
いいえ4
いいえ4

get_server_policy
はい はい はい はい はい
set_slot
はい はい はい はい はい
target_is_a
いいえ  はい いいえ4
いいえ4
いいえ4

add_reply_service_context
はい はい はい はい はい



ServerRequestInfoがreceive_requestに渡されるときは、各引数のリストにin、inout、outのどれかのエントリがあります
============================================================
キー
    値
  
"desktop"
    theme.getDesktopColor()

"activeCaption"
    theme.getWindowTitleBackground()

"activeCaptionText"
    theme.getWindowTitleForeground()

"activeCaptionBorder"
    theme.getPrimaryControlShadow()

"inactiveCaption"
    theme.getWindowTitleInactiveBackground()

"inactiveCaptionText"
    theme.getWindowTitleInactiveForeground()

"inactiveCaptionBorder"
    theme.getControlShadow()

"window"
    theme.getWindowBackground()

"windowBorder"
    theme.getControl()

"windowText"
    theme.getUserTextColor()

"menu"
    theme.getMenuBackground()

"menuText"
    theme.getMenuForeground()

"text"
    theme.getWindowBackground()

"textText"
    theme.getUserTextColor()

"textHighlight"
    theme.getTextHighlightColor()

"textHighlightText"
    theme.getHighlightedTextColor()

"textInactiveText"
    theme.getInactiveSystemTextColor()

"control"
    theme.getControl()

"controlText"
    theme.getControlTextColor()

"controlHighlight"
    theme.getControlHighlight()

"controlLtHighlight"
    theme.getControlHighlight()

"controlShadow"
    theme.getControlShadow()

"controlDkShadow"
    theme.getControlDarkShadow()

"scrollbar"
    theme.getControl()

"info"
    theme.getPrimaryControl()

"infoText"
    theme.getPrimaryControlInfo()

 値themeは、現在のMetalThemeに対応しています
============================================================
FormatType
       FormatStyle
       生成されるサブフォーマット
    
(なし)
(なし)
null

number
(なし)
NumberFormat.getInstance(getLocale())

integer
NumberFormat.getIntegerInstance(getLocale())

currency
NumberFormat.getCurrencyInstance(getLocale())

percent
NumberFormat.getPercentInstance(getLocale())

SubformatPattern
new DecimalFormat(subformatPattern, DecimalFormatSymbols.getInstance(getLocale()))

date
(なし)
DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())

short
DateFormat.getDateInstance(DateFormat.SHORT, getLocale())

medium
DateFormat.getDateInstance(DateFormat.DEFAULT, getLocale())

long
DateFormat.getDateInstance(DateFormat.LONG, getLocale())

full
DateFormat.getDateInstance(DateFormat.FULL, getLocale())

SubformatPattern
new SimpleDateFormat(subformatPattern, getLocale())

time
(なし)
DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())

short
DateFormat.getTimeInstance(DateFormat.SHORT, getLocale())

medium
DateFormat.getTimeInstance(DateFormat.DEFAULT, getLocale())

long
DateFormat.getTimeInstance(DateFormat.LONG, getLocale())

full
DateFormat.getTimeInstance(DateFormat.FULL, getLocale())

SubformatPattern
new SimpleDateFormat(subformatPattern, getLocale())

choice
SubformatPattern
new ChoiceFormat(subformatPattern)

使用例

 次にいくつかの使用例を示します
============================================================
import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f & ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 && precision < 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() < precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len < width) for (int i = 0; i < width - len; i++) if ((f & LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format("%s - %s", symbol, companyName); } } 
 Formatterと併用する場合、前述のクラスは次のさまざまな書式文字列を出力します
============================================================
事前定義されたフォーマッタ



フォーマッタ
説明
例




ofLocalizedDate(dateStyle) 
 ロケールの日付スタイルを持つフォーマッタ 
 '2011-12-03'


 ofLocalizedTime(timeStyle) 
 ロケールの時間スタイルを持つフォーマッタ 
 '10:15:30'


 ofLocalizedDateTime(dateTimeStyle) 
 ロケールの日付と時間のスタイルを持つフォーマッタ
 '3 Jun 2008 11:05:30'


 ofLocalizedDateTime(dateStyle,timeStyle)

 ロケールの日付スタイルおよび時間スタイルを持つフォーマッタ 
 '3 Jun 2008 11:05'


 BASIC_ISO_DATE
基本的なISO日付  '20111203'


 ISO_LOCAL_DATE
 ISOローカル日付 
'2011-12-03'


 ISO_OFFSET_DATE
 オフセット付きのISO日付 
'2011-12-03+01:00'


 ISO_DATE
 オフセット付きまたはオフセットなしのISO日付 
 '2011-12-03+01:00'; '2011-12-03'


 ISO_LOCAL_TIME
 オフセットなしの時間 
'10:15:30'


 ISO_OFFSET_TIME
 オフセット付きの時間 
'10:15:30+01:00'


 ISO_TIME
 オフセット付きまたはオフセットなしの時間 
'10:15:30+01:00'; '10:15:30'


 ISO_LOCAL_DATE_TIME
 ISOローカル日付および時間 
'2011-12-03T10:15:30'


 ISO_OFFSET_DATE_TIME
 オフセット付きの日付時間
 2011-12-03T10:15:30+01:00'


 ISO_ZONED_DATE_TIME
 ゾーン指定の日付時間 
'2011-12-03T10:15:30+01:00[Europe/Paris]'


 ISO_DATE_TIME
 ゾーンID付きの日付および時間 
'2011-12-03T10:15:30+01:00[Europe/Paris]'


 ISO_ORDINAL_DATE
 年および年の日付 
'2012-337'


 ISO_WEEK_DATE
 年および週 
2012-W48-6'

 ISO_INSTANT
 インスタントの日付および時間 
'2011-12-03T10:15:30Z' 


 RFC_1123_DATE_TIME
 RFC 1123 / RFC 822 
'Tue, 3 Jun 2008 11:05:30 GMT'



書式設定および解析用のパターン
 パターンは、文字と記号の単純なシーケンスに基づいています
============================================================
タグ作成されるビュー
 
HTML.Tag.CONTENTInlineView
 
HTML.Tag.IMPLIEDjavax.swing.text.html.ParagraphView
 
HTML.Tag.Pjavax.swing.text.html.ParagraphView
 
HTML.Tag.H1javax.swing.text.html.ParagraphView
 
HTML.Tag.H2javax.swing.text.html.ParagraphView
 
HTML.Tag.H3javax.swing.text.html.ParagraphView
 
HTML.Tag.H4javax.swing.text.html.ParagraphView
 
HTML.Tag.H5javax.swing.text.html.ParagraphView
 
HTML.Tag.H6javax.swing.text.html.ParagraphView
 
HTML.Tag.DTjavax.swing.text.html.ParagraphView
 
HTML.Tag.MENUListView
 
HTML.Tag.DIRListView
 
HTML.Tag.ULListView
 
HTML.Tag.OLListView
 
HTML.Tag.LIBlockView
 
HTML.Tag.DLBlockView
 
HTML.Tag.DDBlockView
 
HTML.Tag.BODYBlockView
 
HTML.Tag.HTMLBlockView
 
HTML.Tag.CENTERBlockView
 
HTML.Tag.DIVBlockView
 
HTML.Tag.BLOCKQUOTEBlockView
 
HTML.Tag.PREBlockView
 
HTML.Tag.BLOCKQUOTEBlockView
 
HTML.Tag.PREBlockView
 
HTML.Tag.IMGImageView
 
HTML.Tag.HRHRuleView
 
HTML.Tag.BRBRView
 
HTML.Tag.TABLEjavax.swing.text.html.TableView
 
HTML.Tag.INPUTFormView
 
HTML.Tag.SELECTFormView
 
HTML.Tag.TEXTAREAFormView
 
HTML.Tag.OBJECTObjectView
 
HTML.Tag.FRAMESETFrameSetView
 
HTML.Tag.FRAMEFrameView
============================================================
NonAsciiDigit:
       非ASCII文字c (Character.isDigit(c)がtrueを返す)

   Non0Digit:
       [1-Rmax] | NonASCIIDigit
Digit:
       [0-Rmax] | NonASCIIDigit
GroupedNumeral:
       ( Non0Digit Digit? Digit?
    ( LocalGroupSeparator Digit Digit Digit )+ )
Numeral:
       ( ( Digit+ ) | GroupedNumeral )
Integer:
( [-+]?( Numeral ) )
| LocalPositivePrefix Numeral LocalPositiveSuffix
| LocalNegativePrefix Numeral LocalNegativeSuffix
DecimalNumeral:
       Numeral
| Numeral LocalDecimalSeparator Digit*
| LocalDecimalSeparator Digit+
Exponent:
       ( [eE] [+-]? Digit+ )
Decimal:
( [-+]? DecimalNumeral Exponent? )
| LocalPositivePrefix DecimalNumeral LocalPositiveSuffix Exponent?
| LocalNegativePrefix DecimalNumeral LocalNegativeSuffix Exponent?
HexFloat:
       [-+]? 0[xX][0-9a-fA-F]*\.[0-9a-fA-F]+ ([pP][-+]?[0-9]+)?
NonNumber:
       NaN | LocalNan | Infinity | LocalInfinity
SignedNonNumber:
       ( [-+]? NonNumber )
| LocalPositivePrefix NonNumber LocalPositiveSuffix
| LocalNegativePrefix NonNumber LocalNegativeSuffix
Float:
       Decimal | HexFloat | SignedNonNumber

前述の正規表現では、空白文字は無視されます
============================================================
ルックアップ式
メンバー
バイトコード動作


lookup.findGetter(C.class,"f",FT.class)
FT f;(T) this.f;


lookup.findStaticGetter(C.class,"f",FT.class)
staticFT f;(T) C.f;


lookup.findSetter(C.class,"f",FT.class)
FT f;this.f = x;


lookup.findStaticSetter(C.class,"f",FT.class)
staticFT f;C.f = arg;


lookup.findVirtual(C.class,"m",MT)
T m(A*);(T) this.m(arg*);


lookup.findStatic(C.class,"m",MT)
staticT m(A*);(T) C.m(arg*);


lookup.findSpecial(C.class,"m",MT,this.class)
T m(A*);(T) super.m(arg*);


lookup.findConstructor(C.class,MT)
C(A*);new C(arg*);


lookup.unreflectGetter(aField)
(static)?FT f;(FT) aField.get(thisOrNull);


lookup.unreflectSetter(aField)
(static)?FT f;aField.set(thisOrNull, arg);


lookup.unreflect(aMethod)
(static)?T m(A*);(T) aMethod.invoke(thisOrNull, arg*);


lookup.unreflectConstructor(aConstructor)
C(A*);(C) aConstructor.newInstance(arg*);


lookup.unreflect(aMethod)
(static)?T m(A*);(T) aMethod.invoke(thisOrNull, arg*);



 ここで、型Cはメンバーが検索されるクラスまたはインタフェースで、ルックアップ・メソッド内でrefcという名前のパラメータとして記述されています
============================================================
send_request
send_poll
receive_reply
receive_exception
receive_other




RequestInfoから継承される:

request_id
はい
はい
はい
はい
はい
operation
はい
はい
はい
はい
はい
arguments
はい1
いいえ 
はい
いいえ 
いいえ 
exceptions
はい
いいえ 
はい
はい
はい
contexts
はい
いいえ 
はい
はい
はい
operation_context
はい
いいえ 
はい
はい
はい

result
いいえ 
いいえ 
はい
いいえ 
いいえ 

response_expected
はい
はい
はい
はい
はい
sync_scope
はい
いいえ 
はい
はい
はい

reply_status
いいえ 
いいえ 
はい
はい
はい
forward_reference
いいえ 
いいえ 
いいえ 
いいえ 
はい2

get_slot
はい
はい
はい
はい
はい
get_request_service_context
はい
いいえ 
はい
はい
はい
get_reply_service_context
いいえ 
いいえ 
はい
はい
はい


ClientRequestInfo固有:

target
はい
はい
はい
はい
はい
effective_target
はい
はい
はい
はい
はい

effective_profile
はい
はい
はい
はい
はい
received_exception
いいえ 
いいえ 
いいえ 
はい
いいえ 
received_exception_id
いいえ 
いいえ 
いいえ 
はい
いいえ 
get_effective_component
はい
いいえ 
はい
はい
はい
get_effective_components
はい
いいえ 
はい
はい
はい
get_request_policy
はい
いいえ 
はい
はい
はい
add_request_service_context
はい
いいえ 
いいえ 
いいえ 
いいえ 



ClientRequestInfoがsend_requestに渡されるときは、各引数のリストにin、inout、outのどれかのエントリがあります
============================================================
send_request
send_poll
receive_reply
receive_exception
receive_other




RequestInfoから継承される:

request_id
はい
はい
はい
はい
はい
operation
はい
はい
はい
はい
はい
arguments
はい1
いいえ 
はい
いいえ 
いいえ 
exceptions
はい
いいえ 
はい
はい
はい
contexts
はい
いいえ 
はい
はい
はい
operation_context
はい
いいえ 
はい
はい
はい

result
いいえ 
いいえ 
はい
いいえ 
いいえ 

response_expected
はい
はい
はい
はい
はい
sync_scope
はい
いいえ 
はい
はい
はい

reply_status
いいえ 
いいえ 
はい
はい
はい
forward_reference
いいえ 
いいえ 
いいえ 
いいえ 
はい2

get_slot
はい
はい
はい
はい
はい
get_request_service_context
はい
いいえ 
はい
はい
はい
get_reply_service_context
いいえ 
いいえ 
はい
はい
はい


ClientRequestInfo固有:

target
はい
はい
はい
はい
はい
effective_target
はい
はい
はい
はい
はい

effective_profile
はい
はい
はい
はい
はい
received_exception
いいえ 
いいえ 
いいえ 
はい
いいえ 
received_exception_id
いいえ 
いいえ 
いいえ 
はい
いいえ 
get_effective_component
はい
いいえ 
はい
はい
はい
get_effective_components
はい
いいえ 
はい
はい
はい
get_request_policy
はい
いいえ 
はい
はい
はい
add_request_service_context
はい
いいえ 
いいえ 
いいえ 
いいえ 



ClientRequestInfoがsend_requestに渡されるときは、各引数のリストにin、inout、outのどれかのエントリがあります
============================================================
絶対値
方向相対値
ベースライン相対値




GridBagConstraints.NORTH
GridBagConstraints.SOUTH
GridBagConstraints.WEST
GridBagConstraints.EAST
GridBagConstraints.NORTHWEST
GridBagConstraints.NORTHEAST
GridBagConstraints.SOUTHWEST
GridBagConstraints.SOUTHEAST
GridBagConstraints.CENTER (デフォルト)




GridBagConstraints.PAGE_START
GridBagConstraints.PAGE_END
GridBagConstraints.LINE_START
GridBagConstraints.LINE_END
GridBagConstraints.FIRST_LINE_START
GridBagConstraints.FIRST_LINE_END
GridBagConstraints.LAST_LINE_START
GridBagConstraints.LAST_LINE_END




GridBagConstraints.BASELINE
GridBagConstraints.BASELINE_LEADING
GridBagConstraints.BASELINE_TRAILING
GridBagConstraints.ABOVE_BASELINE
GridBagConstraints.ABOVE_BASELINE_LEADING
GridBagConstraints.ABOVE_BASELINE_TRAILING
GridBagConstraints.BELOW_BASELINE
GridBagConstraints.BELOW_BASELINE_LEADING
GridBagConstraints.BELOW_BASELINE_TRAILING




GridBagConstraints.weightx, GridBagConstraints.weighty
スペースの分配方法を決定するために使用されます
============================================================
クラス
マッチ

\p{Lower}
小文字:\p{IsLowercase}
\p{Upper}
大文字:\p{IsUppercase}
\p{ASCII}
すべてのASCII文字: [\x00-\x7F]
\p{Alpha}
英字:\p{IsAlphabetic}
\p{Digit}
10進数字:p{IsDigit}
\p{Alnum}
英数字:[\p{IsAlphabetic}\p{IsDigit}]
\p{Punct}
句読点文字:p{IsPunctuation}
\p{Graph}
表示できる文字: [^\p{IsWhite_Space}\p{gc=Cc}\p{gc=Cs}\p{gc=Cn}]
\p{Print}
プリント可能文字: [\p{Graph}\p{Blank}&&[^\p{Cntrl}]]
\p{Blank}
空白またはタブ: [\p{IsWhite_Space}&&[^\p{gc=Zl}\p{gc=Zp}\x0a\x0b\x0c\x0d\x85]]
\p{Cntrl}
制御文字: \p{gc=Cc}
\p{XDigit}
16進数字: [\p{gc=Nd}\p{IsHex_Digit}]
\p{Space}
空白文字:\p{IsWhite_Space}
\d
数字: \p{IsDigit}
\D
数字以外: [^\d]
\s
空白文字: \p{IsWhite_Space}
\S
非空白文字: [^\s]
\w
単語構成文字: [\p{Alpha}\p{gc=Mn}\p{gc=Me}\p{gc=Mc}\p{Digit}\p{gc=Pc}\p{IsJoin_Control}]
\W
非単語文字: [^\w]


methodnameメソッド(非推奨のメソッドを除く)であるjava.lang.Character booleanと同様に機能するカテゴリは、指定されたプロパティが名前javamethodnameを持つ、同一の\p{prop}構文全体で使用可能です
============================================================
文字
         日付または時刻のコンポーネント
         表示
         例
     
G
紀元
         テキスト
AD

y
年
         年
1996; 96

Y
暦週の基準年
         年
2009; 09

M
年における月(状況依存)
         月
July; Jul; 07

L
年における月(スタンドアロン形式)
         月
July; Jul; 07

w
年における週
         数値
27

W
月における週
         数値
2

D
年における日
         数値
189

d
月における日
         数値
10

F
月における曜日
         数値
2

E
曜日の名前
         テキスト
Tuesday; Tue

u
曜日の番号(1 =月曜、...、7 =日曜)
         数値
1

a
午前/午後
         テキスト
PM

H
一日における時(0 - 23)
         数値
0

k
一日における時(1 - 24)
         数値
24

K
午前/午後の時(0 - 11)
         数値
0

h
午前/午後の時(1 - 12)
         数値
12

m
分
         数値
30

s
秒
         数値
55

S
ミリ秒
         数値
978

z
タイムゾーン
         一般的なタイムゾーン
Pacific Standard Time; PST; GMT-08:00

Z
タイムゾーン
         RFC 822タイムゾーン
-0800

X
タイムゾーン
         ISO 8601タイムゾーン
-08; -0800; -08:00


 パターン文字は、その数で正確な表現が決まるため、通常繰り返されます
============================================================
構成パラメータ
        




プロパティ名
動作
戻り型
デフォルト値
必須

javax.xml.stream.isValidating実装に固有のDTD検証のオン/オフを切り替えますBooleanFalseいいえ
javax.xml.stream.isNamespaceAwareXML 1.0サポートの名前空間処理のオン/オフを切り替えますBooleanTrueTrue (必須)/False (省略可能)
javax.xml.stream.isCoalescing隣接する文字データの合体をプロセッサに要求しますBooleanFalseはい
javax.xml.stream.isReplacingEntityReferences内部エンティティ参照を置換テキストに置き換え、それらを文字として報告しますBooleanTrueはい
javax.xml.stream.isSupportingExternalEntities外部の解析対象エンティティを解決しますBoolean指定なしはい
javax.xml.stream.supportDTDDTDをサポートしないプロセッサを要求する場合は、このプロパティを使用しますBooleanTrueはい
javax.xml.stream.reporterXMLReporterの実装を設定/取得します javax.xml.stream.XMLReporterNullはい
javax.xml.stream.resolverXMLResolverインタフェースの実装を設定/取得しますjavax.xml.stream.XMLResolverNullはい
javax.xml.stream.allocatorXMLEventAllocatorインタフェースの実装を設定/取得しますjavax.xml.stream.util.XMLEventAllocatorNullはい
============================================================
キー
対応する値の説明
java.version
Java Runtime Environmentのバージョン
java.vendor
Java Runtime Environmentのベンダー
java.vendor.url
JavaベンダーのURL
java.home
Javaのインストール先ディレクトリ
java.vm.specification.version
Java仮想マシンの仕様バージョン
java.vm.specification.vendor
Java仮想マシンの仕様のベンダー
java.vm.specification.name
Java仮想マシンの仕様名
java.vm.version
Java仮想マシンの実装バージョン
java.vm.vendor
Java仮想マシンの実装のベンダー
java.vm.name
Java仮想マシンの実装名
java.specification.version
Java Runtime Environmentの仕様バージョン
java.specification.vendor
Java Runtime Environmentの仕様のベンダー
java.specification.name
Java Runtime Environmentの仕様名
java.class.version
Javaクラスの形式のバージョン番号
java.class.path
Javaクラス・パス
java.library.path
ライブラリのロード時に検索するパスのリスト
java.io.tmpdir
デフォルト一時ファイルのパス
java.compiler
使用するJITコンパイラの名前
java.ext.dirs
拡張ディレクトリDeprecated.のパスこのプロパティおよびこれを実装するメカニズムは将来のリリースで削除されます
============================================================
YES --- 列がNULLを許可する場合
        NO --- 列がNULLを許可しない場合
        空の文字列 --- 列がNULL値を許可するかどうか不明である場合
       
SCOPE_CATALOG String =>参照属性のスコープである表のカタログ(DATA_TYPEがREFでない場合はnull)
  SCOPE_SCHEMA String =>参照属性のスコープである表のスキーマ(DATA_TYPEがREFでない場合はnull)
  SCOPE_TABLE String =>参照属性のスコープである表名(DATA_TYPEがREFでない場合はnull)
  SOURCE_DATA_TYPE short =>個別の型またはユーザー生成Ref型のソースの型、java.sql.TypesのSQL型(DATA_TYPEがDISTINCTまたはユーザー生成REFでない場合はnull)
   IS_AUTOINCREMENT String =>この列が自動インクリメントされるかどうかを示す
       
 YES --- 列が自動インクリメントされる場合
        NO --- 列が自動インクリメントされない場合
        空の文字列 --- 列が自動インクリメントされるかどうかが判断できない場合
       
IS_GENERATEDCOLUMN String =>これが生成された列かどうかを示す
       
 YES --- これが生成された列である場合
        NO --- これが生成された列でない場合
        空の文字列 --- これが生成された列かどうかが判断できない場合
       

COLUMN_SIZE列はその列の列サイズを表します
============================================================
font-family
   font-style
   font-size (相対単位をサポート)
   font-weight
   font
   color
   background-color (透明の例外を含む)
   background-image
   background-repeat
   background-position
   background
   text-decoration (点滅やオーバーラインの例外を含む)
   vertical-align (スーパー・クラスだけ)
   text-align (中央揃え)
   margin-top
   margin-right
   margin-bottom
   margin-left
   margin
   padding-top
   padding-right
   padding-bottom
   padding-left
   padding
   border-top-style
   border-right-style
   border-bottom-style
   border-left-style
   border-style (インセット、アウトセットだけサポート、または何もサポートせず)
   border-top-color
   border-right-color
   border-bottom-color
   border-left-color
   border-color
   list-style-image
   list-style-type
   list-style-position
 
 次がモデル化されていますが、現在は描画されていません
============================================================
このコンテナのフォント("font")
このコンテナのバックグラウンド・カラー("background")
このコンテナのフォアグラウンド・カラー("foreground")
このコンテナのフォーカス可能性("focusable")
このコンテナのフォーカス・トラバーサル・キーの(有効かどうかの)状態("focusTraversalKeysEnabled")
このコンテナのFORWARD_TRAVERSAL_KEYSのセット("forwardFocusTraversalKeys")
このコンテナのBACKWARD_TRAVERSAL_KEYSのセット("backwardFocusTraversalKeys")
このコンテナのUP_CYCLE_TRAVERSAL_KEYSのセット("upCycleFocusTraversalKeys")
このコンテナのDOWN_CYCLE_TRAVERSAL_KEYSのセット("downCycleFocusTraversalKeys")
このコンテナのフォーカス・トラバーサル・ポリシー("focusTraversalPolicy")
        
このコンテナのフォーカス・サイクル・ルートの状態("focusCycleRoot")
このコンテナのフォーカス・トラバーサル・ポリシー・プロバイダの状態("focusTraversalPolicyProvider")
このコンテナのフォーカス・トラバーサル・ポリシー・プロバイダの状態("focusTraversalPolicyProvider")

 このコンテナがバウンド・プロパティを継承する場合、継承されるプロパティの変更に反応してイベントがトリガーされることはありません
============================================================
インタフェース
nodeName
nodeValue
attributes



Attr
Attr.nameと同じ
Attr.valueと同じ
null


CDATASection

"#cdata-section"
CharacterData.data (CDATAセクションの内容)と同じ
null


Comment

"#comment"
CharacterData.data (コメントの内容)と同じ
null


Document

"#document"
null
null



DocumentFragment
"#document-fragment"

null
null


DocumentType
DocumentType.nameと同じ
null
null



Element
Element.tagNameと同じ
null

NamedNodeMap


Entity
エンティティ名
null

null


EntityReference
参照されるエンティティの名前

null
null


Notation
表記法名

null
null


ProcessingInstruction
ProcessingInstruction.targetと同じ
ProcessingInstruction.dataと同じ
null


Text

"#text"
CharacterData.data (テキスト・ノードの内容)と同じ
null


「Document Object Model (DOM) Level 3 Core Specification」も参照してください
============================================================
このWindowのフォント("font")
このWindowのバックグラウンド・カラー("background")
このWindowのフォアグラウンド・カラー("foreground")
このWindowフォーカス可能性("focusable")
このWindowのフォーカス・トラバーサル・キーの使用可能状態("focusTraversalKeysEnabled")
このWindowのFORWARD_TRAVERSAL_KEYSのSet ("forwardFocusTraversalKeys")
このWindowのBACKWARD_TRAVERSAL_KEYSのSet ("backwardFocusTraversalKeys")
このWindowのUP_CYCLE_TRAVERSAL_KEYSのSet ("upCycleFocusTraversalKeys")
このWindowのDOWN_CYCLE_TRAVERSAL_KEYSのSet ("downCycleFocusTraversalKeys")
このWindowのフォーカス・トラバーサル・ポリシー("focusTraversalPolicy")
        
このWindowのフォーカス可能なWindow状態("focusableWindowState")
        
このWindowの常に最上の状態("alwaysOnTop")

 このWindowがバウンド・プロパティを継承している場合、イベントは継承されたプロパティ内の変更に応答してトリガーされないことに注意してください
============================================================
このWindowのフォント("font")
このWindowのバックグラウンド・カラー("background")
このWindowのフォアグラウンド・カラー("foreground")
このWindowフォーカス可能性("focusable")
このWindowのフォーカス・トラバーサル・キーの使用可能状態("focusTraversalKeysEnabled")
このWindowのFORWARD_TRAVERSAL_KEYSのSet ("forwardFocusTraversalKeys")
このWindowのBACKWARD_TRAVERSAL_KEYSのSet ("backwardFocusTraversalKeys")
このWindowのUP_CYCLE_TRAVERSAL_KEYSのSet ("upCycleFocusTraversalKeys")
このWindowのDOWN_CYCLE_TRAVERSAL_KEYSのSet ("downCycleFocusTraversalKeys")
このWindowのフォーカス・トラバーサル・ポリシー("focusTraversalPolicy")
        
このWindowのフォーカス可能なWindow状態("focusableWindowState")
        
このWindowの常に最上の状態("alwaysOnTop")

 このWindowがバウンド・プロパティを継承している場合、イベントは継承されたプロパティ内の変更に応答してトリガーされないことに注意してください
============================================================
KeyboardFocusManagerが現在このアプリケーションまたはアプレットのブラウザ・コンテキストのフォーカスを管理しているかどうか("managingFocus")
フォーカスの所有者("focusOwner")
パーマネント・フォーカスの所有者("permanentFocusOwner")
フォーカスされたWindow ("focusedWindow")
アクティブWindow ("activeWindow")
デフォルトのフォーカス・トラバーサル・ポリシー("defaultFocusTraversalPolicy")
デフォルトのFORWARD_TRAVERSAL_KEYSのSet ("forwardDefaultFocusTraversalKeys")
デフォルトのBACKWARD_TRAVERSAL_KEYSのSet ("backwardDefaultFocusTraversalKeys")
デフォルトのUP_CYCLE_TRAVERSAL_KEYSのSet ("upCycleDefaultFocusTraversalKeys")
デフォルトのDOWN_CYCLE_TRAVERSAL_KEYSのSet ("downCycleDefaultFocusTraversalKeys")
現在のフォーカス・サイクルのルート("currentFocusCycleRoot")

 listenerがnullの場合、例外はスローされず、何も処理は行われません
============================================================
KeyboardFocusManagerが現在このアプリケーションまたはアプレットのブラウザ・コンテキストのフォーカスを管理しているかどうか("managingFocus")
フォーカスの所有者("focusOwner")
パーマネント・フォーカスの所有者("permanentFocusOwner")
フォーカスされたWindow ("focusedWindow")
アクティブWindow ("activeWindow")
デフォルトのフォーカス・トラバーサル・ポリシー("defaultFocusTraversalPolicy")
デフォルトのFORWARD_TRAVERSAL_KEYSのSet ("forwardDefaultFocusTraversalKeys")
デフォルトのBACKWARD_TRAVERSAL_KEYSのSet ("backwardDefaultFocusTraversalKeys")
デフォルトのUP_CYCLE_TRAVERSAL_KEYSのSet ("upCycleDefaultFocusTraversalKeys")
デフォルトのDOWN_CYCLE_TRAVERSAL_KEYSのSet ("downCycleDefaultFocusTraversalKeys")
現在のフォーカス・サイクルのルート("currentFocusCycleRoot")

 listenerがnullの場合、例外はスローされず、何も処理は行われません
============================================================
サブフォーマット
       引数
       フォーマットされたテキスト
    
任意
使用不可
"{" + argumentIndex + "}"

任意
null
"null"

instanceof ChoiceFormat
任意
subformat.format(argument).indexOf('{') >= 0 ? (new MessageFormat(subformat.format(argument), getLocale())).format(argument) : subformat.format(argument)

!= null
任意
subformat.format(argument)

null
instanceof Number
NumberFormat.getInstance(getLocale()).format(argument)

null
instanceof Date
DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, getLocale()).format(argument)

null
instanceof String
argument

null
任意
argument.toString()


posがnullでなく、かつField.ARGUMENTを参照している場合、最初のフォーマットされた文字列の位置が返されます
============================================================
さまざまな丸めモードでの丸め演算のサマリー
特定の丸めモードで入力を1桁に丸めた結果

入力される数値 UP
DOWN
CEILING
FLOOR
HALF_UP
HALF_DOWN
HALF_EVEN
UNNECESSARY
5.5 6 5 6 5 6 5 6 ArithmeticExceptionをスロー
2.5 3 2 3 2 3 2 2 ArithmeticExceptionをスロー
1.6 2 1 2 1 2 2 2 ArithmeticExceptionをスロー
1.1 2 1 2 1 1 1 1 ArithmeticExceptionをスロー
1.0 1 1 1 1 1 1 1 1
-1.0 -1 -1 -1 -1 -1 -1 -1 -1
-1.1 -2 -1 -1 -2 -1 -1 -1 ArithmeticExceptionをスロー
-1.6 -2 -1 -1 -2 -2 -2 -2 ArithmeticExceptionをスロー
-2.5 -3 -2 -2 -3 -3 -2 -2 ArithmeticExceptionをスロー
-5.5 -6 -5 -5 -6 -6 -5 -6 ArithmeticExceptionをスロー

このenumは、BigDecimal (BigDecimal.ROUND_UP、BigDecimal.ROUND_DOWNなど)の丸めモード定数の整数ベースの列挙を置き換えるために使用されます
============================================================
EST - -05:00
HST - -10:00
MST - -07:00
ACT - Australia/Darwin
AET - Australia/Sydney
AGT - America/Argentina/Buenos_Aires
ART - Africa/Cairo
AST - America/Anchorage
BET - America/Sao_Paulo
BST - Asia/Dhaka
CAT - Africa/Harare
CNT - America/St_Johns
CST - America/Chicago
CTT - Asia/Shanghai
EAT - Africa/Addis_Ababa
ECT - Europe/Paris
IET - America/Indiana/Indianapolis
IST - Asia/Kolkata
JST - Asia/Tokyo
MIT - Pacific/Apia
NET - Asia/Yerevan
NST - Pacific/Auckland
PLT - Asia/Karachi
PNT - America/Phoenix
PRT - America/Puerto_Rico
PST - America/Los_Angeles
SST - Pacific/Guadalcanal
VST - Asia/Ho_Chi_Minh

 マップは変更できません
============================================================
LocalDateはIsoChronology.INSTANCEを返すLocalTimeはnullを返す(日付を表さない)LocalDateTimeはIsoChronology.INSTANCEを返すZonedDateTimeはIsoChronology.INSTANCEを返すOffsetTimeはnullを返す(日付を表さない)OffsetDateTimeはIsoChronology.INSTANCEを返すChronoLocalDateは関連付けられた暦を返すChronoLocalDateTimeは関連付けられた暦を返すChronoZonedDateTimeは関連付けられた暦を返すEraは関連付けられた暦を返すDayOfWeekはnullを返す(複数の暦で共有される)MonthはIsoChronology.INSTANCEを返すYearはIsoChronology.INSTANCEを返すYearMonthはIsoChronology.INSTANCEを返すMonthDayはnullのIsoChronology.INSTANCEを返すZoneOffsetはnullを返す(日付を表さない)Instantはnullを返す(日付を表さない)

Chronology.from(TemporalAccessor)メソッドは、メソッド参照(Chronology::from)を介してTemporalQueryとして使用できます
============================================================
このコンテナのフォント("font")
このコンテナのバックグラウンド・カラー("background")
このコンテナのフォアグラウンド・カラー("foreground")
このコンテナのフォーカス可能性("focusable")
このコンテナのフォーカス・トラバーサル・キーの(有効かどうかの)状態("focusTraversalKeysEnabled")
このコンテナのFORWARD_TRAVERSAL_KEYSのセット("forwardFocusTraversalKeys")
このコンテナのBACKWARD_TRAVERSAL_KEYSのセット("backwardFocusTraversalKeys")
このコンテナのUP_CYCLE_TRAVERSAL_KEYSのセット("upCycleFocusTraversalKeys")
このコンテナのDOWN_CYCLE_TRAVERSAL_KEYSのセット("downCycleFocusTraversalKeys")
このコンテナのフォーカス・トラバーサル・ポリシー("focusTraversalPolicy")
        
このコンテナのフォーカス・サイクル・ルートの状態("focusCycleRoot")

 このコンテナがバウンド・プロパティを継承する場合、継承されるプロパティの変更に反応してイベントがトリガーされることはありません
============================================================
YES_OPTION
NO_OPTION
CANCEL_OPTION
OK_OPTION
CLOSED_OPTION

例

「alert」のメッセージを表示するエラー・ダイアログの表示
  JOptionPane.showMessageDialog(null, "alert", "alert", JOptionPane.ERROR_MESSAGE); 
「information」のメッセージを表示する内部情報ダイアログの表示
 
オプションの「yes/no」および「choose one」のメッセージを含む情報パネルの表示
 
オプションの「yes/no/cancel」、「please choose one」のメッセージ、およびタイトル情報を含む内部情報ダイアログの表示
 
オプションの「OK」、「CANCEL」、タイトルの「Warning」、および「Click OK to continue」のメッセージを含む警告ダイアログの表示
 
ユーザーにStringの入力を求めるダイアログの表示
  String inputValue = JOptionPane.showInputDialog("Please input a value"); 
ユーザーにStringの選択を求めるダイアログの表示
 

使用法: JOptionPaneを直接生成して使用するための標準パターンの概略は次のとおりです
============================================================
このクラスからjava.util.GregorianCalendarへのフィールドごとの変換
       




java.util.GregorianCalendarフィールド
javax.xml.datatype.XMLGregorianCalendarフィールド


ERA
getEonAndYear().signum() < 0 ? GregorianCalendar.BC : GregorianCalendar.AD


YEAR
getEonAndYear().abs().intValue()*


MONTH
getMonth() - DatatypeConstants.JANUARY + Calendar.JANUARY


DAY_OF_MONTH
getDay()


HOUR_OF_DAY
getHour()


MINUTE
getMinute()


SECOND
getSecond()


MILLISECOND
getFractionalSecond()からミリ秒を取得* 


GregorianCalendar.setTimeZone(TimeZone)
カスタム・タイムゾーンIDにフォーマットされたgetTimezone()



*変換元のデータ型の精度は変換先のデータ型の精度より高いため、変換時に精度が低下する可能性があることを示す
============================================================
このコンポーネントのフォント("font")
このコンポーネントのバックグラウンド・カラー("background")
このコンポーネントのフォアグラウンド・カラー("foreground")
このコンポーネントのフォーカス可能性("focusable")
このコンポーネントのフォーカス・トラバーサル・キーの(有効かどうかの)状態("focusTraversalKeysEnabled")
このコンポーネントのFORWARD_TRAVERSAL_KEYSのセット("forwardFocusTraversalKeys")
このコンポーネントのBACKWARD_TRAVERSAL_KEYSのセット("backwardFocusTraversalKeys")
このコンポーネントのUP_CYCLE_TRAVERSAL_KEYSのセット("upCycleFocusTraversalKeys")
このコンポーネントの推奨サイズ("preferredSize")
このコンポーネントの最小サイズ("minimumSize")
このコンポーネントの最大サイズ("maximumSize")
このコンポーネントの名前("name")

 このComponentがバウンド・プロパティを継承している場合は、継承されたプロパティの変更に応答してイベントがトリガーされることはありません
============================================================
importedKeyNoAction - 主キーがインポートされたら、削除できない
       importedKeyCascade - 削除されたキーをインポートする行を、削除する
       importedKeySetNull - インポートされたキーの主キーが削除されたら、NULLに変更する
       importedKeyRestrict - importedKeyNoActionと同じ(ODBC 2.xとの互換性のため)
       importedKeySetDefault - インポートされたキーの主キーが削除されたら、デフォルト値に変更する
      
FK_NAME String =>外部キー名(nullの可能性がある)
  PK_NAME String =>主キー名(nullの可能性がある)
  DEFERRABILITY short =>外部キーの制限の評価はコミットまで延期できる
      
 importedKeyInitiallyDeferred - 定義についてはSQL92を参照
       importedKeyInitiallyImmediate - 定義についてはSQL92を参照
       importedKeyNotDeferrable - 定義についてはSQL92を参照
============================================================
importedKeyNoAction - 主キーがインポートされたら、削除できない
       importedKeyCascade - 削除されたキーをインポートする行を、削除する
       importedKeySetNull - インポートされたキーの主キーが削除されたら、NULLに変更する
       importedKeyRestrict - importedKeyNoActionと同じ(ODBC 2.xとの互換性のため)
       importedKeySetDefault - インポートされたキーの主キーが削除されたら、デフォルト値に変更する
      
FK_NAME String =>外部キー名(nullの可能性がある)
  PK_NAME String =>主キー名(nullの可能性がある)
  DEFERRABILITY short =>外部キーの制限の評価はコミットまで延期できる
      
 importedKeyInitiallyDeferred - 定義についてはSQL92を参照
       importedKeyInitiallyImmediate - 定義についてはSQL92を参照
       importedKeyNotDeferrable - 定義についてはSQL92を参照
============================================================
importedKeyNoAction - 親キーがインポートされたら、削除できない
       importedKeyCascade - 削除されたキーをインポートする行を、削除する
       importedKeySetNull - インポートされたキーの主キーが削除されたら、NULLに変更する
       importedKeyRestrict - importedKeyNoActionと同じ(ODBC 2.xとの互換性のため)
       importedKeySetDefault - インポートされたキーの親キーが削除されたら、デフォルト値に変更する
      
FK_NAME String =>外部キー名(nullの可能性がある)
  PK_NAME String =>親キー名(nullの可能性がある)
  DEFERRABILITY short =>外部キーの制限の評価はコミットまで延期できる
      
 importedKeyInitiallyDeferred - 定義についてはSQL92を参照
       importedKeyInitiallyImmediate - 定義についてはSQL92を参照
       importedKeyNotDeferrable - 定義についてはSQL92を参照
============================================================
GregorianCalendarからXMLGregorianCalendarへのフィールドごとの変換
       


java.util.GregorianCalendarフィールド
javax.xml.datatype.XMLGregorianCalendarフィールド




ERA == GregorianCalendar.BC ? -YEAR : YEAR
XMLGregorianCalendar.setYear(int year)


MONTH + 1
XMLGregorianCalendar.setMonth(int month)


DAY_OF_MONTH
XMLGregorianCalendar.setDay(int day)


HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND
XMLGregorianCalendar.setTime(int hour, int minute, int second, BigDecimal fractional)



(ZONE_OFFSET+DST_OFFSET)/(60*1000) (分単位)

XMLGregorianCalendar.setTimezone(int offset)*




*情報の変換ロス
============================================================
日時パターン
         結果
     
"yyyy.MM.dd G 'at' HH:mm:ss z"
2001.07.04 AD at 12:08:56 PDT

"EEE, MMM d, ''yy"
Wed, Jul 4, '01

"h:mm a"
12:08 PM

"hh 'o''clock' a, zzzz"
12 o'clock PM, Pacific Daylight Time

"K:mm a, z"
0:08 PM, PDT

"yyyyy.MMMMM.dd GGG hh:mm aaa"
02001.July.04 AD 12:08 PM

"EEE, d MMM yyyy HH:mm:ss Z"
Wed, 4 Jul 2001 12:08:56 -0700

"yyMMddHHmmssZ"
010704120856-0700

"yyyy-MM-dd'T'HH:mm:ss.SSSZ"
2001-07-04T12:08:56.235-0700

"yyyy-MM-dd'T'HH:mm:ss.SSSXXX"
2001-07-04T12:08:56.235-07:00

"YYYY-'W'ww-u"
2001-W27-3


同期

 日付フォーマットは同期化されません
============================================================
オーディオ・システムのプロパティ・キー

プロパティ・キー
インタフェース
影響を受けるメソッド


javax.sound.sampled.Clip
Clip
getLine(javax.sound.sampled.Line.Info), getClip()


javax.sound.sampled.Port
Port
getLine(javax.sound.sampled.Line.Info)


javax.sound.sampled.SourceDataLine
SourceDataLine
getLine(javax.sound.sampled.Line.Info), getSourceDataLine(javax.sound.sampled.AudioFormat)


javax.sound.sampled.TargetDataLine
TargetDataLine
getLine(javax.sound.sampled.Line.Info), getTargetDataLine(javax.sound.sampled.AudioFormat)



 プロパティ値は、プロバイダ・クラス名とミキサー名をハッシュ記号(「#」)で区切った形式で表されます
============================================================
受け付けるSource /Result



StreamSource
SAXSource
DOMSource
StAXSource




null
OK
OK
OK
OK


StreamResult
OK
IllegalArgumentException
IllegalArgumentException
IllegalArgumentException


SAXResult
IllegalArgumentException
OK
IllegalArgumentException
IllegalArgumentException


DOMResult
IllegalArgumentException
IllegalArgumentException
OK
IllegalArgumentException


StAXResult
IllegalArgumentException
IllegalArgumentException
IllegalArgumentException
OK



1つのSourceを別の種類のResultに検証するには、恒等変換を使用します(TransformerFactory.newTransformer()を参照)
============================================================
FloatValue:
Signopt NaN
Signopt Infinity
Signopt FloatingPointLiteral
Signopt HexFloatingPointLiteral
SignedInteger


HexFloatingPointLiteral:
  HexSignificand BinaryExponent FloatTypeSuffixopt


HexSignificand:
HexNumeral
HexNumeral .
0x HexDigitsopt. HexDigits
0X HexDigitsopt. HexDigits


BinaryExponent:
BinaryExponentIndicator SignedInteger


BinaryExponentIndicator:
p
P



 ここで、Sign、FloatingPointLiteral、HexNumeral、HexDigits、SignedInteger、およびFloatTypeSuffixは、『Java™言語仕様』の字句構造セクションで規定されているとおりですが、桁間のアンダースコアが受け入れられない点だけは規定と異なります
============================================================
FloatValue:
Signopt NaN
Signopt Infinity
Signopt FloatingPointLiteral
Signopt HexFloatingPointLiteral
SignedInteger


HexFloatingPointLiteral:
  HexSignificand BinaryExponent FloatTypeSuffixopt


HexSignificand:
HexNumeral
HexNumeral .
0x HexDigitsopt. HexDigits
0X HexDigitsopt. HexDigits


BinaryExponent:
BinaryExponentIndicator SignedInteger


BinaryExponentIndicator:
p
P



 ここで、Sign、FloatingPointLiteral、HexNumeral、HexDigits、SignedInteger、およびFloatTypeSuffixは、『Java™言語仕様』の字句構造セクションで規定されているとおりですが、桁間のアンダースコアが受け入れられない点だけは規定と異なります
============================================================
指定された接頭辞に対するgetNamespaceURI(prefix)の戻り値
       


接頭辞パラメータ
名前空間URI戻り値




DEFAULT_NS_PREFIX ("")
現在のスコープ内のデフォルトの名前空間URI、または現在のスコープ内にデフォルトの名前空間URIがない場合はXMLConstants.NULL_NS_URI("") 


バインドされた接頭辞
現在のスコープ内の接頭辞にバインドされた名前空間URI


バインドされていない接頭辞

XMLConstants.NULL_NS_URI("") 



XMLConstants.XML_NS_PREFIX ("xml")
XMLConstants.XML_NS_URI ("http://www.w3.org/XML/1998/namespace")


XMLConstants.XMLNS_ATTRIBUTE ("xmlns")
XMLConstants.XMLNS_ATTRIBUTE_NS_URI ("http://www.w3.org/2000/xmlns/")


null
IllegalArgumentExceptionがスローされる
============================================================
AES/CBC/NoPadding (128)
AES/CBC/PKCS5Padding (128)
AES/ECB/NoPadding (128)
AES/ECB/PKCS5Padding (128)
DES/CBC/NoPadding (56)
DES/CBC/PKCS5Padding (56)
DES/ECB/NoPadding (56)
DES/ECB/PKCS5Padding (56)
DESede/CBC/NoPadding (168)
DESede/CBC/PKCS5Padding (168)
DESede/ECB/NoPadding (168)
DESede/ECB/PKCS5Padding (168)
RSA/ECB/PKCS1Padding (1024、2048)
RSA/ECB/OAEPWithSHA-1AndMGF1Padding (1024、2048)
RSA/ECB/OAEPWithSHA-256AndMGF1Padding (1024、2048)

 これらの変換については、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのCipherのセクションで説明されています
============================================================
PROCEDURE_CAT String =>プロシージャ・カタログ(nullの可能性がある)
  PROCEDURE_SCHEM String =>プロシージャ・スキーマ(nullの可能性がある)
  PROCEDURE_NAME String =>プロシージャ名
  COLUMN_NAME String =>列/パラメータ名
  COLUMN_TYPE Short =>列/パラメータの種類:
      
 procedureColumnUnknown - 不明
       procedureColumnIn - INパラメータ
       procedureColumnInOut - INOUTパラメータ
       procedureColumnOut - OUTパラメータ
       procedureColumnReturn - プロシージャ戻り値
       procedureColumnResult -ResultSetの結果列
      
DATA_TYPE int => java.sql.TypesからのSQLの型
  TYPE_NAME String => SQLの型名
============================================================
NUM_PREC_RADIX int =>基数(通常は、10または2のどちらか)
  NULLABLE int => NULLが許されるかどうか
      
 attributeNoNulls - NULL値を許さない可能性がある
       attributeNullable - 必ずNULL値を許す
       attributeNullableUnknown - NULL値を許すかどうかは不明
      
REMARKS String =>列を記述するコメント(nullの可能性がある)
  ATTR_DEF String =>デフォルト値(nullの可能性がある)
  SQL_DATA_TYPE int =>未使用
  SQL_DATETIME_SUB int =>未使用
  CHAR_OCTET_LENGTH int => charの型については列の最大バイト数
  ORDINAL_POSITION int => UDT中の属性のインデックス(1から始まる)
  IS_NULLABLE String =>属性でNULL値を許可するかどうかの判断にISOルールが使用される
============================================================
状態ごとの有効なメソッド
       




イベント・タイプ
有効なメソッド


 すべての状態  
 getProperty()、hasNext()、require()、close()、getNamespaceURI()、isStartElement()、isEndElement()、isCharacters()、isWhiteSpace()、getNamespaceContext()、getEventType(),getLocation()、hasText()、hasName()
       


 START_ELEMENT  
 next()、getName()、getLocalName()、hasName()、getPrefix()、getAttributeXXX()、isAttributeSpecified()、getNamespaceXXX()、getElementText()、nextTag()
       

 ATTRIBUTE  
 next()、nextTag() getAttributeXXX()、isAttributeSpecified()
============================================================
BlockingDequeメソッドのサマリー

 最初の要素(先頭)



例外のスロー
特殊な値
ブロック
タイム・アウト


挿入
addFirst(e)
offerFirst(e)
putFirst(e)
offerFirst(e, time, unit)


削除
removeFirst()
pollFirst()
takeFirst()
pollFirst(time, unit)


検査
getFirst()
peekFirst()
適用外
適用外


 最後の要素(末尾)



例外のスロー
特殊な値
ブロック
タイム・アウト


挿入
addLast(e)
offerLast(e)
putLast(e)
offerLast(e, time, unit)


削除
removeLast()
pollLast()
takeLast()
pollLast(time, unit)


検査
getLast()
peekLast()
適用外
適用外


BlockingQueueと同様、BlockingDequeはスレッド・セーフであり、null要素を許可しません
============================================================
BlockingQueueメソッドとBlockingDequeメソッドの比較

 BlockingQueueメソッド
 同等のBlockingDequeメソッド


 挿入


add(e)
addLast(e)


offer(e)
offerLast(e)


put(e)
putLast(e)


offer(e, time, unit)
offerLast(e, time, unit)


 削除


remove()
removeFirst()


poll()
pollFirst()


take()
takeFirst()


poll(time, unit)
pollFirst(time, unit)


 検査


element()
getFirst()


peek()
peekFirst()


メモリー整合性効果: ほかの並行処理コレクションと同様、オブジェクトをBlockingDequeに配置する前のスレッド内のアクションは、別のスレッドでのその要素へのアクセスまたはBlockingDequeからの削除に続くアクションよりも前に発生します
============================================================
font-variant
   background-attachment (バックグラウンドは常にスクロール)
   word-spacing
   letter-spacing
   text-indent
   text-transform
   line-height
   border-top-width (ボーダーを使用する必要があることを示す場合に使用)
   border-right-width
   border-bottom-width
   border-left-width
   border-width
   border-top
   border-right
   border-bottom
   border-left
   border
   width
   height
   float
   clear
   display
   white-space
   list-style
 
注: 特に注記がないかぎり、当分の間相対単位をサポートせず、p {margin-top :10% }を上部マージン指定なしと見なします
============================================================
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA
INSTANT_SECONDS
OFFSET_SECONDS

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA
INSTANT_SECONDS
OFFSET_SECONDS

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
参照の種類説明的な名前スコープメンバー動作

1REF_getFieldclass
FT f;(T) this.f;


2REF_getStaticclassまたはinterface
staticFT f;(T) C.f;


3REF_putFieldclass
FT f;this.f = x;


4REF_putStaticclass
staticFT f;C.f = arg;


5REF_invokeVirtualclass
T m(A*);(T) this.m(arg*);


6REF_invokeStaticclassまたはinterface
staticT m(A*);(T) C.m(arg*);


7REF_invokeSpecialclassまたはinterface
T m(A*);(T) super.m(arg*);


8REF_newInvokeSpecialclass
C(A*);new C(arg*);


9REF_invokeInterfaceinterface
T m(A*);(T) this.m(arg*);
============================================================
指定された名前空間URIに対する getPrefixes(namespaceURI)戻り値


名前空間URIパラメータ
返される接頭辞の値




<デフォルトの名前空間URI>を含むバインドされた名前空間URI

         任意の実装依存順で現在のスコープ内の名前空間URIにバインドされたIterator



バインドされていない名前空間URI
空のIterator


XMLConstants.XML_NS_URI ("http://www.w3.org/XML/1998/namespace")
1つの要素がXMLConstants.XML_NS_PREFIX ("xml")に設定されたIterator


XMLConstants.XMLNS_ATTRIBUTE_NS_URI ("http://www.w3.org/2000/xmlns/")
1つの要素がXMLConstants.XMLNS_ATTRIBUTE ("xmlns")に設定されたIterator


null
IllegalArgumentExceptionがスローされる
============================================================
プロパティ:
     キー:
   "leafIcon""Tree.leafIcon"
   "closedIcon""Tree.closedIcon"
   "openIcon""Tree.openIcon"
   "textSelectionColor""Tree.selectionForeground"
   "textNonSelectionColor""Tree.textForeground"
   "backgroundSelectionColor""Tree.selectionBackground"
   "backgroundNonSelectionColor""Tree.textBackground"
   "borderSelectionColor""Tree.selectionBorderColor"
 

実装上の注意: このクラスは、パフォーマンス向上のみを目的として、invalidate、validate、revalidate、repaint、およびfirePropertyChangeをオーバーライドします
============================================================
SyncProviderオブジェクトの同期のグレードを示す定数
   
SyncProvider.GRADE_NONE
    SyncProvider.GRADE_MODIFIED_AT_COMMIT
    SyncProvider.GRADE_CHECK_ALL_AT_COMMIT
    SyncProvider.GRADE_LOCK_WHEN_MODIFIED
    SyncProvider.GRADE_LOCK_WHEN_LOADED
   
データ・ソースに設定するロックを示す定数
   
SyncProvider.DATASOURCE_NO_LOCK
     SyncProvider.DATASOURCE_ROW_LOCK
     SyncProvider.DATASOURCE_TABLE_LOCK
     SyncProvider.DATASOURCE_DB_LOCK
   
SyncProviderオブジェクトがSQL VIEWの更新を実行できるかどうかを示す定数これらの定数については、セクション4.0を参照
============================================================
このコンポーネントのフォント("font")
このコンポーネントのバックグラウンド・カラー("background")
このコンポーネントのフォアグラウンド・カラー("foreground")
このコンポーネントのフォーカス可能性("focusable")
このコンポーネントのフォーカス・トラバーサル・キーの(有効かどうかの)状態("focusTraversalKeysEnabled")
このコンポーネントのFORWARD_TRAVERSAL_KEYSのセット("forwardFocusTraversalKeys")
このコンポーネントのBACKWARD_TRAVERSAL_KEYSのセット("backwardFocusTraversalKeys")
このコンポーネントのUP_CYCLE_TRAVERSAL_KEYSのセット("upCycleFocusTraversalKeys")

 このComponentがバウンド・プロパティを継承している場合は、継承されたプロパティの変更に応答してイベントがトリガーされることはありません
============================================================
Formatter fmt = new Formatter(); StockName sn = new StockName("HUGE", "Huge Fruit, Inc.", "Fruit Titanesque, Inc."); fmt.format("%s", sn); // -> "Huge Fruit, Inc." fmt.format("%s", sn.toString()); // -> "HUGE - Huge Fruit, Inc." fmt.format("%#s", sn); // -> "HUGE" fmt.format("%-10.8s", sn); // -> "HUGE " fmt.format("%.12s", sn); // -> "Huge Fruit,*" fmt.format(Locale.FRANCE, "%25s", sn); // -> " Fruit Titanesque, Inc." 
 マルチスレッド・アクセスを実行する場合、Formattableは必ずしも安全ではありません
============================================================
「Ensure the Original XML Infoset contains no element information item with a [namespace name] of "http://www.w3.org/2004/08/xop/include" and a [local name] of Include (元のXML情報セットに、[namespace name]が「http://www.w3.org/2004/08/xop/include」で、[local name]がIncludeである要素情報項目が含まれないようにすること)」
このメソッドがtrueを返し、整列化プロセス中、最低1回のaddMtomAttachment(...)呼出しがコンテンツIDを返した場合、MIMEベース・パッケージ・プロセッサは、「Creating XOP Pacakges」のステップ5に記載されているとおり、application/xop+xmlメディア・タイプをルート部分にラベル付けする必要があります
============================================================
Locale("fr", "CH")MyResources_fr_CH.class, parent MyResources_fr.properties, parent MyResources.class
Locale("fr", "FR")MyResources_fr.properties, parent MyResources.class
Locale("de", "DE")MyResources_en.properties, parent MyResources.class
Locale("en", "US")MyResources_en.properties, parent MyResources.class
Locale("es", "ES")MyResources_es_ES.class, parent MyResources.class

ファイルMyResources_fr_CH.propertiesはMyResources_fr_CH.classによって隠されるため、使用されません
============================================================
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
オプション名
説明


 SO_SNDBUF 
 ソケット送信バッファのサイズ 


 SO_RCVBUF 
 ソケット受信バッファのサイズ 


 SO_REUSEADDR 
 アドレスを再利用します 


 SO_BROADCAST 
 ブロードキャスト・データグラムの転送を許可します 


 IP_TOS 
 IP (Internet Protocol)ヘッダーのサービス・タイプ(ToS)オクテット 


 IP_MULTICAST_IF 
 IP (Internet Protocol)マルチキャスト・データグラムのネットワーク・インタフェース 


 IP_MULTICAST_TTL 
 IP (Internet Protocol)マルチキャスト・データグラムの有効期間 


 IP_MULTICAST_LOOP 
 IP (Internet Protocol)マルチキャスト・データグラムのループ・バック 



 追加(実装固有)のオプションをサポートできる場合もあります
============================================================
lockName
java.lang.String


lockOwnerId
java.lang.Long


lockOwnerName
java.lang.String


stackTrace
javax.management.openmbean.CompositeData[]

       各要素は、次の属性を含むStackTraceElementを表すCompositeData



属性名
型


className
java.lang.String


methodName
java.lang.String


fileName
java.lang.String


lineNumber
java.lang.Integer


nativeMethod
java.lang.Boolean






lockedMonitors
要素型がMonitorInfoのマップされた型であるjavax.management.openmbean.CompositeData[]
============================================================
さまざまなAnnotatedElementメソッドによって検出される存在の種類の概要
存在の種類
メソッド直接存在する間接的に存在する存在する関連付けられている
TgetAnnotation(Class<T>)
X

Annotation[]getAnnotations()
X

T[]getAnnotationsByType(Class<T>)
X

TgetDeclaredAnnotation(Class<T>)
X

Annotation[]getDeclaredAnnotations()
X

T[]getDeclaredAnnotationsByType(Class<T>)
XX


get[Declared]AnnotationsByType( Class < T >)の呼び出しでは、要素Eに直接または間接的に存在する注釈の順序は、Eに間接的に存在する注釈が、コンテナ注釈の代わりに、コンテナ注釈の値要素に現れる順序でEに直接存在するかのように計算されます
============================================================
アクセス権が与えられていない場合SecurityExceptionがスローされる
 

setAppletStub
アプレット・コンテナ・サービスを実装するスタブを設定する
悪意あるコードがアプレットのスタブを設定すると、予期しない動作またはアプレットへのサービス拒否が発生するおそれがある


setWindowAlwaysOnTop
ウィンドウの最前面プロパティを設定する: Window.setAlwaysOnTop(boolean)
悪意のあるウィンドウが実物の完全なデスクトップのように見せて動作することがあるため、疑いを持たないユーザーがキャプチャされ、悪用されるおそれがある 


showWindowWithoutWarningBanner
ウィンドウがアプレットによって生成されたことを警告するバナーを表示しないでウィンドウを表示する
この警告がない場合、アプレットがウィンドウを表示しても、ユーザーはこのウィンドウがアプレットに属することに気付かない
============================================================
このウィンドウが配置されているグラフィックス・デバイスでPERPIXEL_TRANSLUCENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(Frame.setUndecorated(boolean)およびDialog.setUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された背景色のアルファ成分が1.0fより小さく、かつ上のいずれかの条件が満たされていない場合、このウィンドウの背景色は変更されず、特定の背景色のアルファ成分がこのウィンドウの動作モード影響を与えることはなく、UnsupportedOperationExceptionまたはIllegalComponentStateExceptionのどちらかがスローされます
============================================================
PROCEDURE_CAT String =>プロシージャ・カタログ(nullの可能性がある)
  PROCEDURE_SCHEM String =>プロシージャ・スキーマ(nullの可能性がある)
  PROCEDURE_NAME String =>プロシージャ名
   将来使用するための予約
   将来使用するための予約
   将来使用するための予約
  REMARKS String =>プロシージャの説明
  PROCEDURE_TYPE short =>プロシージャの種類:
      
 procedureResultUnknown - 戻り値が返されるかどうかを判断できない
       procedureNoResult - 戻り値を返さない
       procedureReturnsResult - 戻り値を返す
      
SPECIFIC_NAME String =>このプロシージャをそのスキーマ内で一意に識別する名前
============================================================
識別子
意味
デフォルト


KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS
通常の順方向キーボード・トラバーサル
TAB (KEY_PRESSED)、CTRL-TAB (KEY_PRESSED)


KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS
通常のリバース・キーボード・トラバーサル
SHIFT-TAB (KEY_PRESSED)、CTRL-SHIFT-TAB (KEY_PRESSED)


KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS
1つ上のフォーカス・トラバーサル・サイクルに移動
なし


KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS
1つ下のフォーカス・トラバーサル・サイクルに移動
なし



 トラバーサル・キーを無効化するためには、空のセットを使用します
============================================================
このウィンドウが配置されているグラフィックス・デバイスでPERPIXEL_TRANSLUCENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(setUndecorated(boolean)およびDialog.setUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された背景色のアルファ成分が1.0fより小さく、かつ上のいずれかの条件が満たされていない場合、このウィンドウの背景色は変更されず、特定の背景色のアルファ成分がこのウィンドウの動作モード影響を与えることはなく、UnsupportedOperationExceptionまたはIllegalComponentStateExceptionのどちらかがスローされます
============================================================
このウィンドウが配置されているグラフィックス・デバイスでPERPIXEL_TRANSLUCENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(Frame.setUndecorated(boolean)およびsetUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された背景色のアルファ成分が1.0fより小さく、かつ上のいずれかの条件が満たされていない場合、このウィンドウの背景色は変更されず、特定の背景色のアルファ成分がこのウィンドウの動作モード影響を与えることはなく、UnsupportedOperationExceptionまたはIllegalComponentStateExceptionのどちらかがスローされます
============================================================
PKTABLE_CAT String =>主キー表カタログ(nullの可能性がある)
  PKTABLE_SCHEM String =>主キー表スキーマ(nullの可能性がある)
  PKTABLE_NAME String =>主キー表名
  PKCOLUMN_NAME String =>主キー列名
  FKTABLE_CAT String =>エクスポート中(nullの可能性がある)の外部キー表カタログ(nullの可能性がある)
  FKTABLE_SCHEM String =>エクスポート中(nullの可能性がある)の外部キー表スキーマ(nullの可能性がある)
  FKTABLE_NAME String =>エクスポート中の外部キー表名
  FKCOLUMN_NAME String =>エクスポート中の外部キー列名
  KEY_SEQ short =>外部キー内の連番(値1は外部キーの最初の列、値2は外部キーの2番目の列を表す)
============================================================
PKTABLE_CAT String =>親キー表カタログ(nullの可能性がある)
  PKTABLE_SCHEM String =>親キー表スキーマ(nullの可能性がある)
  PKTABLE_NAME String =>親キー表名
  PKCOLUMN_NAME String =>親キー列名
  FKTABLE_CAT String =>エクスポート中(nullの可能性がある)の外部キー表カタログ(nullの可能性がある)
  FKTABLE_SCHEM String =>エクスポート中(nullの可能性がある)の外部キー表スキーマ(nullの可能性がある)
  FKTABLE_NAME String =>エクスポート中の外部キー表名
  FKCOLUMN_NAME String =>エクスポート中の外部キー列名
  KEY_SEQ short =>外部キー内の連番(値1は外部キーの最初の列、値2は外部キーの2番目の列を表す)
============================================================
SINGLE_DOCUMENT - すべての入力ドキュメントが、指定された装丁により1つの出力ドキュメントとして製本される
 

 SINGLE_DOCUMENT_NEW_SHEET - すべての入力ドキュメントが、指定された装丁により1つの出力ドキュメントとして製本され、各入力ドキュメントの初刷が常に新しいメディア・シートで開始される
 

 SEPARATE_DOCUMENTS_UNCOLLATED_COPIES - 各入力ドキュメントが、指定された装丁により別々に製本される
 

 SEPARATE_DOCUMENTS_COLLATED_COPIES - 各入力ドキュメントが、指定された装丁により別々に製本される
 


 異なるドキュメントが異なる特定の装丁である場合、MultipleDocumentHandlingの次の2つの値だけが意味を持ち、ほかの値が指定された場合、プリンタはジョブが送信されたときにエラーを報告します
============================================================
各RenderableImageソースに関連するCRIFにmapRenderContext()が呼び出される
  手順1で取得されたRenderContextsの元に戻るマッピングを使って、各RenderableImageにcreateRendering()を呼び出して、各ソースを描画する
  createRendering()呼出しによって作成されたRenderableImageOpおよびRenderedImagesのパラメータを格納する新規ParameterBlockで、ContextualRenderedImageFactory.create()が呼び出される
 
 RenderableImageOpを作成するために使用されたParameterBlockのソースVectorの要素がRenderedImageのインスタンスの場合は、CRIF.create()メソッドが元のParameterBlockを使ってすぐに呼び出されます
============================================================
識別子
意味
デフォルト


KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS
通常の順方向キーボード・トラバーサル
TABのKEY_PRESSED、CTRL-TABのKEY_PRESSED


KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS
通常のリバース・キーボード・トラバーサル
SHIFT-TABのKEY_PRESSED、CTRL-SHIFT-TABのKEY_PRESSED


KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS
1つ上のフォーカス・トラバーサル・サイクルに移動
なし


KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS
1つ下のフォーカス・トラバーサル・サイクルに移動
なし



 トラバーサル・キーを無効化するためには、空のSetを使用します
============================================================
YES --- 属性がNULLを許可する場合
        NO --- 属性がNULLを許可しない場合
        空の文字列 --- 属性がNULL値を許可するかどうか不明である場合
       
SCOPE_CATALOG String =>参照属性のスコープである表のカタログ(DATA_TYPEがREFでない場合はnull)
  SCOPE_SCHEMA String =>参照属性のスコープである表のスキーマ(DATA_TYPEがREFでない場合はnull)
  SCOPE_TABLE String =>参照属性のスコープである表名(DATA_TYPEがREFでない場合はnull)
 SOURCE_DATA_TYPE short =>個別の型またはユーザー生成Ref型のソースの型、java.sql.TypesのSQL型(DATA_TYPEがDISTINCTまたはユーザー生成REFでない場合はnull)
============================================================
ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
 ScrollPaneConstants.LOWER_LEADING_CORNER
 ScrollPaneConstants.LOWER_TRAILING_CORNER
 ScrollPaneConstants.UPPER_LEADING_CORNER
 ScrollPaneConstants.UPPER_TRAILING_CORNER
 

 「コーナー」はどのbeansプロパティ・シグニチャとも一致しませんが、プロパティ名をコーナー・キーに設定するとPropertyChangeイベントが生成されます
============================================================
-> : マッピングを表す 
 [x]+ : xの1回以上の出現 
 [ @XmlValueプロパティ]: @XmlValueで注釈されたJavaBeanプロパティ
 X : 関係しない
 




ターゲット
propOrder
クラス本体
複合型
単純型


クラス
{}
[プロパティ]+ ->要素
複合コンテンツxs:all
 


クラス
空以外
[プロパティ]+ ->要素
複合コンテンツxs:sequence
 


クラス
X
プロパティなし ->要素
複合コンテンツ空のsequence
 


クラス
X
1 [ @XmlValueプロパティ] && [プロパティ]+ ->属性
単純コンテンツ
 


クラス
X
1 [ @XmlValueプロパティ] &&プロパティなし ->属性
 
単純型
 




 列挙型のマッピング 

 列挙型を、列挙ファセットを持つXMLスキーマ単純型にマップします
============================================================
BigDecimalString:
Signopt Significand Exponentopt
Sign:
+
-
Significand:
IntegerPart . FractionPartopt
. FractionPart
IntegerPart
IntegerPart:
Digits
FractionPart:
Digits
Exponent:
ExponentIndicator SignedInteger
ExponentIndicator:
e
E
SignedInteger:
Signopt Digits
Digits:
Digit
Digits Digit
Digit:
Character.isDigit(char)がtrueを返す任意の文字(0、1、2など)
 

返されるBigDecimalのスケールは、小数部の桁数または0 (文字列に小数部がない場合)となり、指数を調整します
============================================================
関数を呼び出すために使用される名前である
  COLUMN_NAME String =>列/パラメータ名
  COLUMN_TYPE Short =>列/パラメータの種類:
      
 functionColumnUnknown - 不明
       functionColumnIn - INパラメータ
       functionColumnInOut - INOUTパラメータ
       functionColumnOut - OUTパラメータ
       functionColumnReturn - 関数の戻り値
       functionColumnResult - パラメータまたは列がResultSetの列であることを示す
      
DATA_TYPE int => java.sql.TypesからのSQLの型
  TYPE_NAME String => SQLの型名
============================================================
属性名
型


threadId
java.lang.Long


threadName
java.lang.String


threadState
java.lang.String


suspended
java.lang.Boolean


inNative
java.lang.Boolean


blockedCount
java.lang.Long


blockedTime
java.lang.Long


waitedCount
java.lang.Long


waitedTime
java.lang.Long


lockInfo
javax.management.openmbean.CompositeData - LockInfo.from(javax.management.openmbean.CompositeData)メソッドで指定された、LockInfoのマップされた型
============================================================
"text/sgml"
 "text/xml"
 "text/html"
 "text/rtf"
 "text/enriched"
 "text/richtext"
 "text/uri-list"
 "text/tab-separated-values"
 "text/t140"
 "text/rfc822-headers"
 "text/parityfec"
 "text/directory"
 "text/css"
 "text/calendar"
 "application/x-java-serialized-object"
 "text/plain"
 "text/<その他>"
 
たとえば、「text/sgml」は「text/html」より先に選択され、DataFlavor.stringFlavorはDataFlavor.plainTextFlavorより先に選択されます
============================================================
Eはint[])
ArrayType.getArrayType(opentype(E))
opendata(E)[]


List<E> Set<E> SortedSet<E> (下記を参照)
E[]に対するものと同じ
E[]に対するものと同じ


列挙E (Java内でenum E {...}として宣言される)
SimpleType.STRING
String


Map<K,V> SortedMap<K,V>
TabularType (下記を参照)
TabularData (下記を参照)


MXBeanインタフェース
SimpleType.OBJECTNAME (下記を参照)
ObjectName (下記を参照)


その他の型
可能な場合にはCompositeType (下記を参照)
CompositeData


以降のセクションでは、これらのルールについて詳しく説明します
============================================================
PKTABLE_CAT String =>インポート中の主キー表カタログ(nullの可能性がある)
  PKTABLE_SCHEM String =>インポート中の主キー表スキーマ(nullの可能性がある)
  PKTABLE_NAME String =>インポート中の主キー表名
  PKCOLUMN_NAME String =>インポート中の主キー列名
  FKTABLE_CAT String =>外部キー表カタログ(nullの可能性がある)
  FKTABLE_SCHEM String =>外部キー表スキーマ(nullの可能性がある)
  FKTABLE_NAME String =>外部キー表名
  FKCOLUMN_NAME String =>外部キー列名
  KEY_SEQ short =>外部キー内の連番(値1は外部キーの最初の列、値2は外部キーの2番目の列を表す)
============================================================
例
簡単な例: "< a < b < c < d"
 ノルウェー語: "< a, A < b, B < c, C < d, D < e, E < f, F < g, G < h, H < i, I < j, J < k, K < l, L < m, M < n, N < o, O < p, P < q, Q < r, R < s, S < t, T < u, U < v, V < w, W < x, X < y, Y < z, Z < \u00E6,\u00C6 < \u00F8,\u00D8 < \u00E5 = a\u030A,\u00C5 = A\u030A; aa, AA"

 
 ニーズに合わせた特殊なルールを持つRuleBasedCollatorオブジェクトを作成するには、Stringオブジェクトにルールを指定して、RuleBasedCollatorを構築します
============================================================
プロパティ
説明
デフォルト値


orientation
スクロール・バーが垂直か水平かを示す
Scrollbar.VERTICAL


value
スクロール・バーのバブルの位置を制御する値
0


visible amount
スクロール・バーの範囲の可視量、一般にスクロール・バーのバブルのサイズで表される
10


minimum
スクロール・バーの最小値
0


maximum
スクロール・バーの最大値
100


unit increment
Line UpキーまたはLine Downキーが押されるか、またはスクロール・バーの末尾の矢印がクリックされた場合の値の変化する量 
1


block increment
Page UpキーまたはPage Downキーが押されるか、スクロール・バーのトラックがバブルの片側でクリックされた場合の値の変化する量 
10
============================================================
典型的なタイプは、「TABLE」、「VIEW」、「SYSTEM TABLE」、「GLOBAL TEMPORARY」、「LOCAL TEMPORARY」、「ALIAS」、「SYNONYM」である
  REMARKS String =>表に関する説明
  TYPE_CAT String =>タイプのカタログ(nullの可能性がある)
  TYPE_SCHEM String =>タイプのスキーマ(nullの可能性がある)
  TYPE_NAME String =>タイプ名(nullの可能性がある)
  SELF_REFERENCING_COL_NAME String =>タイプ指定された表の指定された「識別子」列の名前(nullの可能性がある)
  REF_GENERATION String => SELF_REFERENCING_COL_NAMEの値の作成方法を指定する
============================================================
org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init1 
 org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init2 
 org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init3 

 ORB.initの実行中は、org.omg.PortableInterceptor.ORBInitializerClassで始まるこれらのORBプロパティが収集され、各プロパティの<Service>部分が取り出され、クラス名に<Service>文字列を使用してオブジェクトがインスタンス化され、そのオブジェクトに対してpre_initとpost_initの各メソッドが呼び出されます
============================================================
org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init1 
 org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init2 
 org.omg.PortableInterceptor.ORBInitializerClass.com.x.Init3 

 ORB.initの実行中は、org.omg.PortableInterceptor.ORBInitializerClassで始まるこれらのORBプロパティが収集され、各プロパティの<Service>部分が取り出され、クラス名に<Service>文字列を使用してオブジェクトがインスタンス化され、そのオブジェクトに対してpre_initとpost_initの各メソッドが呼び出されます
============================================================
Button1、Button2、Button3: weightx = 1.0
Button4: weightx = 1.0, gridwidth = GridBagConstraints.REMAINDER
Button5: gridwidth = GridBagConstraints.REMAINDER
Button6: gridwidth = GridBagConstraints.RELATIVE
Button7: gridwidth = GridBagConstraints.REMAINDER
Button8: gridheight = 2, weighty = 1.0
Button9、Button 10: gridwidth = GridBagConstraints.REMAINDER


 上記の例を実装したサンプル・コードを示します
============================================================
ルックアップ・クラスのprivateフィールド、メソッド、およびコンストラクタにアクセスする
 呼出し元依存メソッド(Class.forNameなど)を呼び出すメソッド・ハンドルを作成する
 invokespecial命令をエミュレートするメソッド・ハンドルを作成する
 ルックアップ・クラスからアクセスできるクラスに対するパッケージ・アクセス・チェックを回避する
 同じパッケージ・メンバー内の他のクラスに対するprivateアクセスを持つ、委譲されたルックアップ・オブジェクトを作成する
 

 これらのことが許可されるのは、privateアクセスを持つルックアップ・オブジェクトから元のクラスまで安全にたどることができ、そのバイトコード動作およびJava言語アクセス権をメソッド・ハンドルが確実に判断してエミュレートできるという事実の結果です
============================================================
出力ドキュメントの指定されたページ範囲を印刷
 

 SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- 各入力ドキュメントの指定されたページ範囲を印刷
 

 SEPARATE_DOCUMENTS_COLLATED_COPIES -- 各入力ドキュメントの指定されたページ範囲を印刷
 


 SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- 各入力ドキュメント自体に指定されたページ範囲を印刷
 

 SEPARATE_DOCUMENTS_COLLATED_COPIES -- 各入力ドキュメント自体に指定されたページ範囲を印刷
 


IPP互換性: PageRanges属性の正規配列形式は、IPPの「page-ranges」属性の印刷範囲の各範囲の下限と上限にそれぞれ対応します
============================================================
例
insertAfterStart
insertBeforeEnd
insertBeforeStart
insertAfterEnd
setInnerHTML
setOuterHTML




Paragraph 1
Paragraph 2






List Item

Paragraph 1
Paragraph 2





Paragraph 1
Paragraph 2

List Item






List Item


Paragraph 1
Paragraph 2





Paragraph 1
Paragraph 2


List Item






List Item






List Item




警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースとの互換性がなくなる予定です
============================================================
表現クラス
ドキュメントのサイズ


byte[]
バイト配列の長さ


java.io.InputStream
ストリームから読み込まれるバイト数


char[]
文字配列の長さx 2


java.lang.String
文字列の長さx 2


java.io.Reader
ストリームから読み込まれる文字数x 2


java.net.URL
指定されたURLアドレスのファイルから読み込まれるバイト数


java.awt.image.renderable.RenderableImage
実装依存*


java.awt.print.Printable
実装依存*


java.awt.print.Pageable
実装依存*



 *これらの場合、Print Service自体がプリンタに送信する印刷データを生成します
============================================================
管理インタフェース
オブジェクト名


 ClassLoadingMXBean 
 java.lang:type=ClassLoading


 MemoryMXBean 
 java.lang:type=Memory


 ThreadMXBean 
 java.lang:type=Threading


 RuntimeMXBean 
 java.lang:type=Runtime


 OperatingSystemMXBean 
 java.lang:type=OperatingSystem


 PlatformLoggingMXBean 
 java.util.logging:type=Logging




 Java仮想マシンは、次の管理インタフェースのインスタンスを持たないか、単一のインスタンスを持ちます
============================================================
基本となるシステムでPERPIXEL_TRANSPARENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(Frame.setUndecorated(boolean)およびDialog.setUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された形状がnullでなく、かつ上のいずれかの条件が満たされていない場合、このウィンドウの形状は変更されず、UnsupportedOperationExceptionまたはIllegalComponentStateExceptionのどちらかがスローされます
============================================================
Rdがインタフェース
implMethodが直接メソッド・ハンドル
samMethodTypeおよびinstantiatedMethodTypeが同じ引数カウントNを持つ、およびi=1..Nの場合にTiおよびUiが同じ型、またはTiおよびUiが両方とも参照型かつTiがUiのサブタイプ
RtおよびRuが同じ型、または両方が参照型かつRtがRuのサブタイプ
K + N = M
i=1..Kの場合、Di = Ai
i=1..Nの場合、TiはAjに適応可能、j=i+k
戻り型Rtがvoid、または戻り型RaがvoidでなくRtに適応可能

さらに、キャプチャ時は、implMethodがインスタンス・メソッドに対応し、キャプチャ引数(K > 0)が存在し、最初のキャプチャ引数(レシーバに対応する)は非nullである必要があります
============================================================
java.util.concurrent.ForkJoinPool.common.parallelism - 並列性レベル(負でない整数)
 java.util.concurrent.ForkJoinPool.common.threadFactory - ForkJoinPool.ForkJoinWorkerThreadFactoryのクラス名
 java.util.concurrent.ForkJoinPool.common.exceptionHandler - Thread.UncaughtExceptionHandlerのクラス名
 
SecurityManagerが存在し、ファクトリが指定されていない場合、デフォルト・プールではファクトリが提供する有効なPermissionsを持たないスレッドが使用されます
============================================================
要素のタイプ
構築されるコンポーネント


入力、タイプはbutton
JButton


入力、タイプはcheckbox
JCheckBox


入力、タイプはimage
JButton


入力、タイプはpassword
JPasswordField


入力、タイプはradio
JRadioButton


入力、タイプはreset
JButton


入力、タイプはsubmit
JButton


入力、タイプはtext
JTextField


選択、サイズは> 1、または複数の属性を定義
JScrollPane内のJList


選択、サイズは指定なし、または1
JComboBox


textarea
JScrollPane内のJTextArea


入力、タイプはfile
JTextField
============================================================
基本となるシステムでPERPIXEL_TRANSPARENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(setUndecorated(boolean)およびDialog.setUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された形状がnullでなく、かつ上のいずれかの条件が満たされていない場合、このウィンドウの形状は変更されず、UnsupportedOperationExceptionまたはIllegalComponentStateExceptionのどちらかがスローされます
============================================================
工程
KeyEvent
InputMethodEvent
1.   
インプット・メソッド 
(ここで生成される)
2.   
フォーカス・マネージャ 



3.   
登録済みのキー・リスナー
登録済みのインプット・メソッド・リスナー

4.   

JTextComponentで処理するインプット・メソッド

5.   現在のキーマップを使用して処理するキーマップ
6.   JComponentで処理するキーボード(アクセラレータ、コンポーネント・ナビゲーションなど)



 キー・イベントには待機しているが、インプット・メソッド・イベントは認識しないアプリケーションとの互換性を保つため、工程4で処理するインプット・メソッドは、インプット・メソッドを処理しないコンポーネントのための互換性を提供しています
============================================================
基本となるシステムでPERPIXEL_TRANSPARENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(Frame.setUndecorated(boolean)およびsetUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された形状がnullでなく、かつ上のいずれかの条件が満たされていない場合、このウィンドウの形状は変更されず、UnsupportedOperationExceptionまたはIllegalComponentStateExceptionのどちらかがスローされます
============================================================
importedNoAction - 主キーがインポートされたら、更新できない
       importedKeyCascade - 主キーの更新に合致するように、インポートされたキーを変更する
       importedKeySetNull - インポートされたキーの主キーが更新されたら、NULLに変更する
       importedKeySetDefault - インポートされたキーの主キーが更新されたら、デフォルト値に変更する
       importedKeyRestrict - importedKeyNoActionと同じ(ODBC 2.xとの互換性のため)
      
DELETE_RULE short =>主キーが削除されると、外部キーに起こる内容は次のとおりである
============================================================
importedNoAction - 主キーがインポートされたら、更新できない
       importedKeyCascade - 主キーの更新に合致するように、インポートされたキーを変更する
       importedKeySetNull - インポートされたキーの主キーが更新されたら、NULLに変更する
       importedKeySetDefault - インポートされたキーの主キーが更新されたら、デフォルト値に変更する
       importedKeyRestrict - importedKeyNoActionと同じ(ODBC 2.xとの互換性のため)
      
DELETE_RULE short =>主キーが削除されると、外部キーに起こる内容は次のとおりである
============================================================
importedNoAction - 親キーがインポートされたら、更新できない
       importedKeyCascade - 親キーの更新に合致するように、インポートされたキーを変更する
       importedKeySetNull - インポートされたキーの親キーが更新されたら、NULLに変更する
       importedKeySetDefault - インポートされたキーの親キーが更新されたら、デフォルト値に変更する
       importedKeyRestrict - importedKeyNoActionと同じ(ODBC 2.xとの互換性のため)
      
DELETE_RULE short =>親キーが削除されると、外部キーに起こる内容は次のとおりである
============================================================
識別子
意味
デフォルト


KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS
通常の順方向キーボード・トラバーサル
TAB (KEY_PRESSED)、CTRL-TAB (KEY_PRESSED)


KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS
通常のリバース・キーボード・トラバーサル
SHIFT-TAB (KEY_PRESSED)、CTRL-SHIFT-TAB (KEY_PRESSED)


KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS
1つ上のフォーカス・トラバーサル・サイクルに移動
なし



 トラバーサル・キーを無効化するためには、空のセットを使用します
============================================================
例

 
コンテキスト: jar:http://www.foo.com/bar/jar.jar!/、指定:baz/entry.txt
url:jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt
コンテキスト: jar:http://www.foo.com/bar/jar.jar!/baz、指定:entry.txt
url:jar:http://www.foo.com/bar/jar.jar!/baz/entry.txt
コンテキスト: jar:http://www.foo.com/bar/jar.jar!/baz、指定:/entry.txt
url:jar:http://www.foo.com/bar/jar.jar!/entry.txt
============================================================
Patternによってサポートされるバイナリ・プロパティは次のとおりです
 
 Alphabetic
    Ideographic
    Letter
    Lowercase
    Uppercase
    Titlecase
    Punctuation
    Control
    White_Space
    Digit
    Hex_Digit
    Join_Control
    Noncharacter_Code_Point
    Assigned
 

 次の定義済の文字クラスとPOSIX文字クラスは、UNICODE_CHARACTER_CLASSフラグが指定されている場合、Unicode正規表現の付録C: 互換性プロパティの勧告に適合しています
============================================================
値がtrueに設定された場合:

 
標準エラーが標準出力にマージされ、両者が常に同じ出力先に送信される(この場合、エラー・メッセージと対応する出力との相関関係が把握しやすくなる)
 標準エラーと標準出力の共通の出力先をリダイレクトするには、redirectOutputを使用する
 サブプロセスの作成時に、redirectErrorメソッドで設定されたリダイレクトは無視される
 Process.getErrorStream()から返されるストリームは常にヌル入力ストリームとなる
 

プロセス・ビルダーの属性を変更すると、属性を変更したオブジェクトのstart()メソッドでそれ以降起動されるプロセスに影響がありますが、それ以前に起動されたプロセスやJavaプロセス自体には影響ありません
============================================================
Calendar.ERA
Calendar.YEAR
Calendar.MONTH
Calendar.WEEK_OF_YEAR
Calendar.WEEK_OF_MONTH
Calendar.DAY_OF_MONTH
Calendar.DAY_OF_YEAR
Calendar.DAY_OF_WEEK
Calendar.DAY_OF_WEEK_IN_MONTH
Calendar.AM_PM
Calendar.HOUR
Calendar.HOUR_OF_DAY
Calendar.MINUTE
Calendar.SECOND
Calendar.MILLISECOND

 ただし、一部のUIではcalendarFieldを設定してから、編集を確定してカーソルの下にあるフィールドをスピンできます
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  COLUMN_NAME String =>列名
  GRANTOR String =>アクセス権の付与者(nullの可能性がある)
  GRANTEE String =>アクセス権の被付与者
  PRIVILEGE String =>アクセスの名前(SELECT、INSERT、UPDATE、REFRENCES、...)
  IS_GRANTABLE String =>被付与者が他のユーザーに付与することが許されている場合はYES、そうでない場合はNO、不明の場合はnull
============================================================
たとえば、
 
TがCV.get(C)を呼び出し、状態2Nを確認する
 Tが時間に依存する値V0をすばやく計算し、そのインストール準備を整える
 Tが運悪くページング・イベントまたはスケジューリング・イベントに遭遇し、長期間のスリープ状態に入る
 一方、T2もCV.get(C)を呼び出し、状態2Nを確認する
 T2が同じような時間に依存する値V1をすばやく計算し、それをCV.get(C)にインストールする
 次に、T2 (または3つ目のスレッド)がCV.remove(C)を呼び出し、T2の作業を元に戻す
  T2の以上のアクションが何度か繰り返される
  また、関連する計算値も時間とともに変化する: V1, V2, ...
 その間にTが復帰して、V0のインストールを試みる
============================================================
STAPLE_TOP_LEFT


EDGE_STITCH_LEFT


STAPLE_DUAL_LEFT


  
 



  
 

STAPLE_BOTTOM_LEFT


EDGE_STITCH_TOP


STAPLE_DUAL_TOP


  
 



  
 

STAPLE_TOP_RIGHT


EDGE_STITCH_RIGHT


STAPLE_DUAL_RIGHT


  
 



  
 

STAPLE_BOTTOM_RIGHT


EDGE_STITCH_BOTTOM


STAPLE_DUAL_BOTTOM


  
 



 STAPLE_XXX値は、ドキュメントが縦長ドキュメントの場合と見なしてドキュメントに対して指定されます
============================================================
AdjustmentEvent.TRACKがEvent.SCROLL_ABSOLUTEに置き換えられる
 AdjustmentEvent.UNIT_INCREMENTがEvent.SCROLL_LINE_UPに置き換えられる
 AdjustmentEvent.UNIT_DECREMENTがEvent.SCROLL_LINE_DOWNに置き換えられる
 AdjustmentEvent.BLOCK_INCREMENTがEvent.SCROLL_PAGE_UPに置き換えられる
 AdjustmentEvent.BLOCK_DECREMENTがEvent.SCROLL_PAGE_DOWNに置き換えられる
 

注: Scrollbarは値の選択用にのみ使用することをお薦めします
============================================================
名前 
 型 


 "lastModifiedTime" 
 FileTime 


 "lastAccessTime" 
 FileTime 


 "creationTime" 
 FileTime 


 "size" 
 Long 


 "isRegularFile" 
 Boolean 


 "isDirectory" 
 Boolean 


 "isSymbolicLink" 
 Boolean 


 "isOther" 
 Boolean 


 "fileKey" 
 Object 



 getAttributeメソッドは、readAttributes()メソッドを呼び出したかのように、これらの属性のいずれかを読み取るために使用できます
============================================================
ScrollPaneConstants.VIEWPORT
 ScrollPaneConstants.VERTICAL_SCROLLBAR
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR
 ScrollPaneConstants.ROW_HEADER
 ScrollPaneConstants.COLUMN_HEADER
 ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
============================================================
例1: 生成されたWSDLで可能なポリシー・アサーション@Addressing


例2: 生成されたWSDLで可能なポリシー・アサーション@Addressing(required=true)


例3: 生成されたWSDLで可能なポリシー・アサーション@Addressing(required=true, responses=Responses.ANONYMOUS)


 WS-Addressingの詳細については、Web Services Addressing - Core、Web Services Addressing 1.0 - SOAP Binding、およびWeb Services Addressing 1.0 - Metadataを参照してください
============================================================
現在のクライアント・コンポーネントを含むウィンドウの位置、サイズ、可視性、アイコンの表示状態が変更されたときか、このウィンドウが閉じられたとき

 現在のクライアント・コンポーネントが存在する場合は、 enableClientWindowNotification(inputMethod, true)から

 呼出し中に現在のクライアント・コンポーネントが使用できない場合、enableClientWindowNotification(inputMethod, true)の呼出し後に、最初にインプット・メソッドを起動するとき

 入力コンテキストのremoveNotifyメソッドの呼出し後に、新規クライアント・コンポーネントのインプット・メソッドを起動するとき
============================================================
タスク実行メソッドのサマリー


 分岐/結合以外のクライアントからの呼び出し
 分岐/結合計算内からの呼び出し


 非同期実行の調整
 execute(ForkJoinTask)
 ForkJoinTask.fork()


 結果の待機および取得
 invoke(ForkJoinTask)
 ForkJoinTask.invoke()


 実行の調整およびFutureの取得
 submit(ForkJoinTask)
 ForkJoinTask.fork() (ForkJoinTask は Future)


共通プールは、デフォルトではデフォルト・パラメータを使用して構築されますが、これらは3つのシステム・プロパティを設定することで制御できます
============================================================
大文字の'A' - 'Z' ('\u0041' - '\u005a')、

    小文字の'a' - 'z' ('\u0061' - '\u007a')、

    数字の'0' - '9' ('\u0030' - '\u0039')、

    ダッシュ文字'-' ('\u002d'、HYPHEN-MINUS)

    プラス文字'+' ('\u002b'、PLUS SIGN)

    ピリオド文字'.' ('\u002e'、FULL STOP)

    コロン文字':' ('\u003a'、COLON)

    下線文字'_' ('\u005f'、LOW LINE)

 

 文字セット名の最初の文字は、必ずアルファベットか数字になります
============================================================
(すべての日時データ型でタイムゾーンはオプション)





データ型
年
月
日
時間
分
秒


DatatypeConstants.DATETIME
X
X
X
X
X
X


DatatypeConstants.DATE
X
X
X





DatatypeConstants.TIME



X
X
X


DatatypeConstants.GYEARMONTH
X
X






DatatypeConstants.GMONTHDAY

X
X





DatatypeConstants.GYEAR
X







DatatypeConstants.GMONTH

X






DatatypeConstants.GDAY


X
============================================================
PDL等の分析、生成、変換を行う、1つ以上の純粋なソフトウェア・プロセスをジョブが使用中、または使用試行中
 

 PDL変換、媒体へのマーキング、またはステープリングなどの終了処理を行う、1つ以上のハードウェア・デバイスをジョブが使用中、または使用試行中
 

 プリンタの印刷準備は完了しているが、ジョブが出力デバイスに到着していないため、または出力デバイスか別のスプーラのキューに入っていて印刷待ち状態になっているため、出力デバイスで印刷がまだ実行されていない
 

 ジョブの状態がPROCESSINGのとき、ジョブ全体の状態に、プリンタのPrinterStateおよびPrinterStateReasons属性で表される詳細なステータスが含まれます
============================================================
名前とdescriptorType fieldNameが未定義、null、空文字列、またはString以外の場合
  クラス、ロール、getMethod、setMethod fieldNameにnullまたはString以外が定義されている場合
  persistPeriod、currencyTimeLimit、lastUpdatedTimeStamp、lastReturnedTimeStampにnull、Numeric String、またはNumeric Value>= -1以外が定義されている場合
  ログfieldNameにnull、Boolean以外、またはt、f、true、falseのいずれかの値を持つString以外が定義されている場合
============================================================
書式設定済みのテキスト
 


MIMEタイプ説明


"text/plain"
デフォルト文字セット(US-ASCII)のプレーン・テキスト


"text/plain; charset=xxx"
文字セットxxxのプレーン・テキスト


"text/html"
デフォルト文字セット(US-ASCII)のハイパーテキスト・マークアップ言語


"text/html; charset=xxx"
文字セットxxxのハイパーテキスト・マークアップ言語



 一般に、書式設定済みのテキスト印刷データは、文字指向の表現クラス(文字配列、String、Reader)、またはバイト指向の表現クラス(バイト配列、InputStream、URL)で提供されます
============================================================
ScrollPaneConstants.LOWER_LEFT_CORNER
 ScrollPaneConstants.LOWER_RIGHT_CORNER
 ScrollPaneConstants.UPPER_LEFT_CORNER
 ScrollPaneConstants.UPPER_RIGHT_CORNER
 ScrollPaneConstants.LOWER_LEADING_CORNER
 ScrollPaneConstants.LOWER_TRAILING_CORNER
 ScrollPaneConstants.UPPER_LEADING_CORNER
 ScrollPaneConstants.UPPER_TRAILING_CORNER
============================================================
Unicode範囲
NumericShaper定数
優先順位


アラビア語
NumericShaper.ARABIC NumericShaper.EASTERN_ARABIC
NumericShaper.EASTERN_ARABIC


NumericShaper.Range.ARABIC NumericShaper.Range.EASTERN_ARABIC
NumericShaper.Range.EASTERN_ARABIC


タイ・タム
NumericShaper.Range.TAI_THAM_HORA NumericShaper.Range.TAI_THAM_THAM
NumericShaper.Range.TAI_THAM_THAM
============================================================
MIDIシステムのプロパティ・キー

プロパティ・キー
インタフェース
影響を受けるメソッド


javax.sound.midi.Receiver
Receiver
getReceiver()


javax.sound.midi.Sequencer
Sequencer
getSequencer()


javax.sound.midi.Synthesizer
Synthesizer
getSynthesizer()


javax.sound.midi.Transmitter
Transmitter
getTransmitter()



 プロパティ値は、プロバイダ・クラス名とデバイス名をハッシュ記号(「#」)で区切った形式で表されます
============================================================
基本となるシステムでTRANSLUCENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(Frame.setUndecorated(boolean)およびDialog.setUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された不透明性の値が1.0fより小さく、かつ上のいずれかの条件が満たされていない場合、ウィンドウの不透明性は変更されず、IllegalComponentStateExceptionがスローされます
============================================================
RMIClassLoader.loadClass(URL,String)
RMIClassLoader.loadClass(String,String)
RMIClassLoader.loadClass(String,String,ClassLoader)
RMIClassLoader.loadProxyClass(String,String[],ClassLoader)
RMIClassLoader.getClassLoader(String)
RMIClassLoader.getClassAnnotation(Class)


 これらのメソッドのいずれかが呼び出されると、このクラスのインスタンス上の対応するメソッドに処理が委譲されます
============================================================
要素のタイプ       エンコーディング
  boolean型            Z
  byte               B
  char               C
  classまたはinterface
                             Lclassname;
  double             D
  float              F
  int                I
  long               J
  short              S
 
 クラス名またはインタフェース名のclassnameは、上記の例のようにクラスのバイナリ名で指定されます
============================================================
file:BobsApp/Test.java (ファイル名が相対的で、現在のディレクトリに依存している)
   

jar:lib/vendorA.jar!com/vendora/LibraryClass.class (!のあとの構成要素は正しいが、パスの前半が現在のディレクトリに依存している)
   

Test.java (このURIは現在のディレクトリに依存しており、スキーマを持たない)
   

jar:///C:/Documents%20and%20Settings/UncleBob/BobsApp/../lib/vendorA.jar!com/vendora/LibraryClass.class (パスが標準化されていない)
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  GRANTOR String =>アクセス権の付与者(nullの可能性がある)
  GRANTEE String =>アクセス権の被付与者
  PRIVILEGE String =>アクセスの名前(SELECT、INSERT、UPDATE、REFRENCES、...)
  IS_GRANTABLE String =>被付与者が他のユーザーに付与することが許されている場合はYES、そうでない場合はNO、不明の場合はnull
============================================================
基本となるシステムでTRANSLUCENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(setUndecorated(boolean)およびDialog.setUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された不透明性の値が1.0fより小さく、かつ上のいずれかの条件が満たされていない場合、ウィンドウの不透明性は変更されず、IllegalComponentStateExceptionがスローされます
============================================================
基本となるシステムでTRANSLUCENTの半透明性がサポートされている必要がある
 ウィンドウが非装飾に設定されている必要がある(Frame.setUndecorated(boolean)およびsetUndecorated(boolean)を参照してください)
 ウィンドウがフル・スクリーン・モードであってはいけない(GraphicsDevice.setFullScreenWindow(Window)を参照してください)
 

 要求された不透明性の値が1.0fより小さく、かつ上のいずれかの条件が満たされていない場合、ウィンドウの不透明性は変更されず、IllegalComponentStateExceptionがスローされます
============================================================
たとえば、

 


*.java
.javaで終わるファイル名を表すパスに一致します


*.*
ドットを含むファイル名に一致します


*.{java,class}
.javaまたは.classで終わるファイル名に一致します


foo.?
foo.と1文字の拡張子で始まるファイル名に一致します


/home/*/*
UNIXプラットフォームでの/home/gus/dataに一致します


/home/**
UNIXプラットフォームでの/home/gusや/home/gus/dataに一致します


C:\\*
WindowsプラットフォームでのC:\fooやC:\barに一致します(バックスラッシュがエスケープされている
============================================================
ほかの例外がスローされた場合、その例外は呼出し側にスローされる

 解決されたインタフェースがpublic以外の場合、それらがすべて同じクラス・ローダーに定義されているときは、そのローダーからそのインタフェースの動的プロキシ・クラスを取得しようとする

 上記以外の場合は、LinkageErrorがスローされる(指定されたインタフェースをすべて実装するクラスはいずれのローダーにも定義できないため)

 
指定されたすべてのインタフェースを、コードベース・ローダーを使用して解決できる場合

 
解決されたインタフェースがすべてpublicの場合は、そのインタフェースの動的プロキシ・クラスをコードベース・ローダーから取得しようとする
============================================================
システム・プロパティjava.rmi.server.RMIClassLoaderSpiが定義されていない場合、次に示すRMIClassLoaderのstaticメソッドは、

 
loadClass(URL,String)
loadClass(String,String)
loadClass(String,String,ClassLoader)
loadProxyClass(String,String[],ClassLoader)
getClassLoader(String)
getClassAnnotation(Class)


 サービス・プロバイダ・インスタンスとしてデフォルト・プロバイダの正規インスタンスを使用します
============================================================
Java型J
opentype(J)
opendata(J)



int、booleanなど (8つのプリミティブJava型)
SimpleType.INTEGER、 SimpleType.BOOLEANなど
Integer、Booleanなど (対応するboxed型)


Integer、ObjectNameなど (SimpleTypeの適用範囲内の型)
対応するSimpleType
J、同じ型


int[]など (プリミティブ要素型の 1次元配列)
ArrayType.getPrimitiveArrayType(int[].class)など
J、同じ型

E[] (非プリミティブ要素型Eの配列、int[][]を含む
============================================================
os.name
オペレーティング・システム名
os.arch
オペレーティング・システムのアーキテクチャ
os.version
オペレーティング・システムのバージョン
file.separator
ファイル区切り文字(UNIXでは"/")
path.separator
パス区切り文字(UNIXでは":")
line.separator
行区切り文字(UNIXでは"\n")
user.name
ユーザーのアカウント名
user.home
ユーザーのホーム・ディレクトリ
user.dir
ユーザーの現在の作業ディレクトリ


 システム・プロパティ値内の複数のパスは、プラットフォーム固有のパス区切り文字で区切られます
============================================================
addNotificationListener
getAttribute
getClassLoader
getClassLoaderFor
getClassLoaderRepository
getDomains
getMBeanInfo
getObjectInstance
instantiate
invoke
isInstanceOf
queryMBeans
queryNames
registerMBean
removeNotificationListener
setAttribute
unregisterMBean

カンマで区切られた形式のアクション・リストでは、各アクションの前後にスペースを挿入できます
============================================================
TYPE_CAT String => UDTのカタログ(nullの可能性がある)
  TYPE_SCHEM String => UDTのスキーマ(nullの可能性がある)
  TYPE_NAME String => UDTの型名
  SUPERTYPE_CAT String =>直接のスーパー・タイプのカタログ(nullの可能性がある)
  SUPERTYPE_SCHEM String =>直接のスーパー・タイプのスキーマ(nullの可能性がある)
  SUPERTYPE_NAME String =>直接のスーパー・タイプ名
  
注: ドライバが型の階層をサポートしていない場合は空の結果セットが返されます
============================================================
例:


OID (オブジェクト識別子)
拡張機能名
2.5.29.14
SubjectKeyIdentifier
2.5.29.15
KeyUsage
2.5.29.16
PrivateKeyUsage
2.5.29.17
SubjectAlternativeName
2.5.29.18
IssuerAlternativeName
2.5.29.19
BasicConstraints
2.5.29.30
NameConstraints
2.5.29.33
PolicyMappings
2.5.29.35
AuthorityKeyIdentifier
2.5.29.36
PolicyConstraints
============================================================
BeanContextChild bcc = o.getBeanContextProxy(); if (bcc instanceof BeanContext){//... } または BeanContextChild bcc = o.getBeanContextProxy(); BeanContext bc = null; try { bc =(BeanContext)bcc; } catch (ClassCastException cce){//cast failed, bcc is not an instanceof BeanContext } 


 戻り値は、実装側インスタンスの寿命の定数です
============================================================
選択方法は、最初に属性TextAttribute.FONTがある場合はフォントが使用され、そうでない場合は、定義済みの属性を使用してデフォルト・フォントが計算される
 テキストが複数のベースラインにある場合、ランまたはサブランは共通のベースラインを共有するサブランにさらに分割される
 選択されたフォントを使用して各ランにグリフ・ベクトルが生成される
 最終的な双方向の並べ替えがグリフ・ベクトルで実行される
 

TextLayoutオブジェクトのメソッドから返されるすべてのグラフィック情報は、TextLayoutオブジェクトのベースラインと左端の交点であるTextLayoutの原点を基準にしています
============================================================
単一引用符で囲まれた値は、文字列として解釈する必要がある(nullの可能性がある)
      
 文字列NULL (引用符で囲まない) - NULLがデフォルト値として指定された場合
       TRUNCATE (引用符で囲まない) - 切り詰めないと指定されたデフォルト値を表現できない場合
       NULL - デフォルト値が指定されなかった場合
      
SQL_DATA_TYPE int =>将来使用するための予約
  SQL_DATETIME_SUB int =>将来使用するための予約
  CHAR_OCTET_LENGTH int =>バイナリと文字ベースの列の最大長
============================================================
管理インタフェース
オブジェクト名


 GarbageCollectorMXBean 
 java.lang:type=GarbageCollector,name=collector's name


 MemoryManagerMXBean 
 java.lang:type=MemoryManager,name=manager's name


 MemoryPoolMXBean 
 java.lang:type=MemoryPool,name=pool's name


 BufferPoolMXBean 
 java.nio:type=BufferPool,name=pool name
============================================================
PortableInterceptor.SUCCESSFUL
PortableInterceptor.SYSTEM_EXCEPTION
PortableInterceptor.USER_EXCEPTION
PortableInterceptor.LOCATION_FORWARD
PortableInterceptor.TRANSPORT_RETRY

 クライアント側:
 
receive_reply遮断点内では、SUCCESSFULだけが返されます.
   receive_exception遮断点内では、SYSTEM_EXCEPTIONまたはUSER_EXCEPTIONのどちらかが返されます
============================================================
例:

丸めモードUNNECESSARYの例
入力される数値
UNNECESSARYによる丸めで1桁に丸められた入力
5.5 ArithmeticExceptionをスロー
2.5 ArithmeticExceptionをスロー
1.6 ArithmeticExceptionをスロー
1.1 ArithmeticExceptionをスロー
1.0 1
-1.0 -1
-1.1 ArithmeticExceptionをスロー
-1.6 ArithmeticExceptionをスロー
-2.5 ArithmeticExceptionをスロー
-5.5 ArithmeticExceptionをスロー
============================================================
SimpleScriptContext: 

そのENGINE_SCOPEとして指定されたBindingsを使用する
 
GLOBAL_SCOPEとしてgetGlobalScope抽象メソッドによって返されるBindingsを使用する
 
このScriptEngineのデフォルトのScriptContext内にあるReaderおよびWriterを使用する
 

このメソッドによって返されるSimpleScriptContextは、eval(Reader,Bindings)およびeval(String,Bindings)の抽象バージョンを使用して、evalメソッドを実装するのに使用されます
============================================================
係数  定義
 Asソース・ピクセルのアルファ成分
 Csあらかじめ乗算された形式でのソース・ピクセルの色成分
 Adデスティネーション・ピクセルのアルファ成分
 Cdあらかじめ乗算された形式でのデスティネーション・ピクセルの色成分
 Fsソース・ピクセルのうち、出力に関係する部分
 Fdデスティネーション・ピクセルのうち、出力に関係する部分
 Ar結果として得られるアルファ成分
 Crあらかじめ乗算された形式での結果の色成分
 


 以上の係数を使用して、PorterとDuffは合成係数FsおよびFdを選択して、12種類の目的の視覚効果を生成する12とおりの方法を定義しています
============================================================
TYPE_NAME String =>型名
  DATA_TYPE int => java.sql.TypesからのSQLデータ型
  PRECISION int =>最大の精度
  LITERAL_PREFIX String =>リテラルを引用するのに使用する接頭辞(nullの可能性がある)
  LITERAL_SUFFIX String =>リテラルを引用するのに使用する接尾辞(nullの可能性がある)
  CREATE_PARAMS String =>型の作成に使用するパラメータ(nullの可能性がある)
  NULLABLE short =>この型にNULLを使用できるか
============================================================
注釈要素Descriptorフィールド
プリミティブ値(5、falseなど)
ラップされた値(Integer.valueOf(5)、Boolean.FALSEなど)
クラス定数(Thread.classなど)
Class.getName()から取得したクラス名("java.lang.Thread"など)
列挙型定数(ElementType.FIELDなど)
Enum.name()から取得した定数名("FIELD"など)
クラス定数またはenum定数の配列
これらのルールを各要素に適用して得られる文字列配列
その他の型の値 (String、String[]、int[]など)
同じ値
============================================================
TYPEがtableIndexStatisticの場合はnull
TYPE short =>インデックス・タイプ:
      
 tableIndexStatistic - 表のインデックスの記述に連動して返される表の統計情報を識別する
       tableIndexClustered - クラスタ化されたインデックス
       tableIndexHashed - ハッシュ化されたインデックス
       tableIndexOther - インデックスのその他のスタイル
      
ORDINAL_POSITION short =>インデックス中の列シーケンス
============================================================
Shapes:type=Square,name=3
Colors:type=Red,name=2
Shapes:type=Triangle,side=isosceles,name=2
Colors:type=Red,name=1
Shapes:type=Square,name=1
Colors:type=Blue,name=1
Shapes:type=Square,name=2
JMImplementation:type=MBeanServerDelegate
Shapes:type=Triangle,side=scalene,name=1

これらは、次のような順序にできます
============================================================
文字セット説明
US-ASCII
7ビットASCII (ISO646-US/Unicode文字セットのBasic Latinブロック)
ISO-8859-1  
ISOラテン・アルファベットNo. 1 (ISO-LATIN-1)
UTF-8
8ビットUCS変換形式
UTF-16BE
16ビットUCS変換形式、ビッグエンディアン・バイト順
UTF-16LE
16ビットUCS変換形式、リトルエンディアン・バイト順
UTF-16
16ビットUCS変換形式、オプションのバイト順マークによって識別されるバイト順

 UTF-8文字セットは、RFC 2279によって規定されています
============================================================
フィールド

デフォルト値




ERA


AD




YEAR


1970




MONTH


JANUARY




DAY_OF_MONTH


1




DAY_OF_WEEK


the first day of week




WEEK_OF_MONTH


0




DAY_OF_WEEK_IN_MONTH


1




AM_PM


AM




HOUR, HOUR_OF_DAY, MINUTE, SECOND, MILLISECOND


0




前述のリストに含まれないフィールドについては、デフォルト値は適用されません
============================================================
XmlID, XmlIDREF, XmlList, XmlSchemaType, XmlValue, XmlAttachmentRef, XmlMimeType, XmlInlineBinaryData, XmlElementWrapper, XmlJavaTypeAdapter
 JavaBeanプロパティの型が配列コレクション型、インデックス付きプロパティ、またはパラメータ化リストであり、この注釈がXmlElementsとともに使用された場合、コレクション項目型が既知であるため、@XmlElement.type()がDEFAULT.classである必要があります
============================================================
JAVA_OBJECT、STRUCT、またはDISTINCT
  REMARKS String =>型に関する説明
  BASE_TYPE short => DISTINCT型またはjava.sql.Typesで定義される構造型のSELF_REFERENCING_COLUMNのユーザー生成参照型を実装する型のソースの型の型コード(DATA_TYPEがDISTINCTでないかREFERENCE_GENERATION = USER_DEFINEDのSTRUCTでない場合はnull)
  
注: ドライバがUDTをサポートしていない場合は空の結果セットが返されます
============================================================
文字列名
CompositeNames



"x/y" + "/" = x/y/


{"x", "y"} + {""} = {"x", "y", ""}




"" + "x" = "x"


{} + {"x"} = {"x"}




"/" + "x" = "/x"


{""} + {"x"} = {"", "x"}




"x" + "" + "" = "x"


{"x"} + {} + {} = {"x"}



マルチスレッド・アクセス
CompositeNameインスタンスは、並行マルチスレッド・アクセスに対しては同期化されません
============================================================
pがMBeanPermissionのインスタンスであり、かつ
 pがnullのclassNameを持つか、pのclassNameがこのオブジェクトのclassNameに一致しており、かつ
 pがnullのメンバーを持つか、pのメンバーがこのオブジェクトのメンバーに一致しており、かつ
 pがnullのオブジェクト名を持つか、pのオブジェクト名がこのオブジェクトのオブジェクト名に一致しており、かつ
 pのアクションがこのオブジェクトのアクションのサブセットである

このオブジェクトのclassNameが「*」の場合、pのclassNameは常にこれに一致します
============================================================
適用外のタグ 最新の代替
art-lojban jbo
i-ami ami
i-bnn bnn
i-hak hak
i-klingon tlh
i-lux lb
i-navajo nv
i-pwn pwn
i-tao tao
i-tay tay
i-tsu tsu
no-bok nb
no-nyn nn
sgn-BE-FR sfb
sgn-BE-NL vgt
sgn-CH-DE sgg
zh-guoyu cmn
zh-hakka hak
zh-min-nan nan
zh-xiang hsn


最新代替を持たない適用外タグは次のように変換されます
============================================================
バインドされていない名前空間URI
null


XMLConstants.XML_NS_URI ("http://www.w3.org/XML/1998/namespace")
XMLConstants.XML_NS_PREFIX ("xml")


XMLConstants.XMLNS_ATTRIBUTE_NS_URI ("http://www.w3.org/2000/xmlns/")
XMLConstants.XMLNS_ATTRIBUTE ("xmlns")


null
IllegalArgumentExceptionがスローされる
============================================================
Colors:type=Blue,name=1
Colors:type=Red,name=1
Colors:type=Red,name=2
JMImplementation:type=MBeanServerDelegate
Shapes:type=Square,name=1
Shapes:type=Square,name=2
Shapes:type=Square,name=3
Shapes:type=Triangle,side=scalene,name=1
Shapes:type=Triangle,side=isosceles,name=2
============================================================
LOCAL_TYPE_NAME String =>型名のローカライズされたバージョン(nullの可能性がある)
  MINIMUM_SCALE short =>サポートされる最小スケール
  MAXIMUM_SCALE short =>サポートされる最大スケール
  SQL_DATA_TYPE int =>未使用
  SQL_DATETIME_SUB int =>未使用
  NUM_PREC_RADIX int =>通常は、2または10
  
PRECISION列は、指定されたデータ型についてサーバーでサポートする列の最大サイズを表します
============================================================
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY
OFFSET_SECONDS

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
ユーザーは、ウィンドウがアプレットに属するかどうかに基づいて、セキュリティにかかわる決定を行う(たとえばダイアログ・ボックスでのユーザー名やパスワードの入力など)場合があるので、この警告バナーを無効にすると、適切でないウィンドウにユーザー名などの情報を入力してしまう可能性がある


toolkitModality
TOOLKIT_MODALダイアログの作成とTOOLKIT_EXCLUDEウィンドウ・プロパティの設定
アプレットからツールキット・モーダル・ダイアログが表示されるときに、ブラウザ内のほかのアプレットがすべてブロックされる
============================================================
可視fieldNameにnull、Numeric String以外、またはNumeric Value>= 1および<=4以外が定義されている場合
  重要度fieldNameにnull、Numeric String以外、またはNumeric Value>= 0および<=6以外が定義されている場合
 persistPolicy fieldNameにnullが定義されている場合、またはOnUpdate、OnTimer、NoMoreOftenThan、OnUnregister、Always、Never以外のStringが定義されている場合
============================================================
kがdstOffsetより小さい場合は、このシーケンス内のインデックスkの位置にある文字
 kがdstOffsetに等しいかそれより大きく、dstOffset+end-startより小さい場合は、引数s内のインデックスk+start-dstOffsetの位置にある文字
 kがdstOffset+end-startに等しいかそれより大きい場合は、このシーケンス内のインデックスk-(end-start)の位置にある文字
 
dstOffset引数は0に等しいかそれより大きく、このシーケンスの長さに等しいかこれより小さくなければなりません
============================================================
kがdstOffsetより小さい場合は、このシーケンス内のインデックスkの位置にある文字
 kがdstOffsetに等しいかそれより大きく、dstOffset+end-startより小さい場合は、引数s内のインデックスk+start-dstOffsetの位置にある文字
 kがdstOffset+end-startに等しいかそれより大きい場合は、このシーケンス内のインデックスk-(end-start)の位置にある文字
 
dstOffset引数は0に等しいかそれより大きく、このシーケンスの長さに等しいかこれより小さくなければなりません
============================================================
1つは記述"name=GENERIC,descriptorType=notification,log=T,severity=6,displayName=jmx.modelmbean.generic"を持つ通知
 もう1つは記述子"name=ATTRIBUTE_CHANGE,descriptorType=notification,log=T,severity=6,displayName=jmx.attribute.change"を持つ標準属性変更通知

 これらの2つの通知は、アプリケーションによって指定された通知に常に追加されます
============================================================
オプション名
説明


 SO_SNDBUF 
 ソケット送信バッファのサイズ 


 SO_RCVBUF 
 ソケット受信バッファのサイズ 


 SO_KEEPALIVE 
 接続をキープアライブにします 


 SO_REUSEADDR 
 アドレスを再利用します 


 SO_LINGER 
 閉じるときにデータが存在する場合は遅延します(ブロック・モードに構成されている場合のみ) 


 TCP_NODELAY 
 Nagleアルゴリズムを無効にします 



 追加(実装固有)のオプションをサポートできる場合もあります
============================================================
係数  定義
 Csr ソース・ピクセルのraw色成分の1つ
 Cdr デスティネーション・ピクセルのraw色成分の1つ
 Aac AlphaCompositeインスタンスの「特殊」アルファ成分
 Asr ソース・ピクセルのrawアルファ成分
 Adrデスティネーション・ピクセルのrawアルファ成分
 Adf デスティネーションに保存される最終アルファ成分
 Cdf デスティネーションに保存される最終raw色成分
 

入力の準備

AlphaCompositeクラスは、ソースのアルファに適用する追加のアルファ値を定義します
============================================================
必要なフォントをメソッドが確実に返すためには、strパラメータの書式を次のいずれかに設定します

 
fontname-style-pointsize
fontname-pointsize
fontname-style
fontname
fontname style pointsize
fontname pointsize
fontname style
fontname

 この場合のstyleは"PLAIN"、"BOLD"、"BOLDITALIC"、"ITALIC"のいずれかです(大文字または小文字のどちらでも指定可能)
============================================================
QSリンク時チェック呼出し時チェック

プリミティブプリミティブ
Qはプリミティブ・ワイドニング変換でSに変換可能
なし


プリミティブ参照
SはWrapper(Q)のスーパータイプ
Wrapper(Q)からSにキャスト


参照プリミティブ
パラメータ型の場合: Qはプリミティブ・ラッパー、Primitive(Q)はSにワイドニング可能戻り型の場合: Qがプリミティブ・ラッパーの場合はPrimitive(Q)がSにワイドニング可能かをチェック
Qがプリミティブ・ラッパーでない場合、Qを基底Wrapper(S)にキャスト
============================================================
SCOPE short =>結果の実際のスケール
      
 bestRowTemporary - 行は一時的に使用中
       bestRowTransaction - 現在のトランザクションの残りの部分に有効
       bestRowSession - 現在のセッションの残りの部分に有効
      
COLUMN_NAME String =>列名
  DATA_TYPE int => java.sql.TypesからのSQLデータ型
  TYPE_NAME String =>データ・ソース依存の型名
============================================================
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 次に示す古い修飾子も使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
書式設定済みのページ記述言語(PDL)ドキュメント



MIMEタイプ説明


"application/pdf"
Portable Document Formatドキュメント


"application/postscript"
PostScriptドキュメント


"application/vnd.hp-PCL"
Printer Control Languageドキュメント



 一般に、書式設定済みのPDL印刷データは、バイト指向の表現クラス(バイト配列、InputStream、URL)で提供されます
============================================================
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 次に示す古い修飾子も使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
Container.add(java.awt.Component)
Container.add(String, java.awt.Component)
Container.add(java.awt.Component, int)
Container.add(java.awt.Component, Object)
Container.add(java.awt.Component, Object, int)

 これらのいずれかを使用するとUnsupportedOperationExceptionがスローされます
============================================================
ログ・レベル、メッセージ文字列、およびそのメッセージ文字列への任意のパラメータを取得するlogメソッドのセット
 
     logメソッドに類似するが、明示的なソース・クラス名とメソッド名も取得するlogpメソッドのセット(logpは「log precise」の略)
 
     logpメソッドに類似するが、ログ・メッセージのローカライズに使用するための明示的なリソース・バンドル・オブジェクトもとるlogrbメソッドのセット(logrbは「log with resource bundle」の略)があります
============================================================
次のstaticメソッドの実装は、

 
loadClass(URL,String)
loadClass(String,String)
loadClass(String,String,ClassLoader)
loadProxyClass(String,String[],ClassLoader)
getClassLoader(String)
getClassAnnotation(Class)


 これらのサービス・プロバイダ・インタフェースRMIClassLoaderSpiのインスタンスによって提供されます
============================================================
つまり、パーセント文字(「%」)とそれに続く2桁の16進数(0-9、A-F、およびa-f)で構成される三重項
その他
US-ASCII文字セットに含まれておらず、制御文字(Character.isISOControlメソッドを使って判定)でなく、空白文字(Character.isSpaceCharメソッドを使って判定)でないUnicode文字  (US-ASCIIに限定されているRFC 2396を変更したもの)

すべての有効なURI文字のセットは未予約、予約済み、エスケープ、およびその他の文字で構成されます
============================================================
MIMEおよびJava型の間で必要とされるマッピング
       

MIMEタイプ
Java型


DataHandler.getContentType()
instanceof DataHandler.getContent()




image/gif
java.awt.Image


image/jpeg
java.awt.Image


text/xmlまたはapplication/xml
javax.xml.transform.Source



 追加のマッピングをサポートすることもできます
============================================================
Dequeメソッドのサマリー


 最初の要素(先頭)
 最後の要素(末尾)



例外のスロー
特殊な値
例外のスロー
特殊な値


挿入
addFirst(e)
offerFirst(e)
addLast(e)
offerLast(e)


削除
removeFirst()
pollFirst()
removeLast()
pollLast()


検査
getFirst()
peekFirst()
getLast()
peekLast()


このインタフェースは、Queueインタフェースを拡張します
============================================================
オーディオ形式のプロパティ

プロパティ・キー
値の型
説明


"「bitrate」"
Integer
平均ビット・レート(ビット/秒)


"「vbr」"
Boolean
ファイルが可変ビット・レート(VBR)でエンコードされている場合はtrue


"「quality」"
Integer
エンコーディング/変換の品質(1から100)


サービス・プロバイダ(プラグイン)のベンダーは、サード・パーティ・プラグイン内にすでに確立されているその他のプロパティの情報を探し、同じ規則に従うことをお勧めします
============================================================
関数を呼び出すために使用される名前である
  REMARKS String =>関数に関する説明
 FUNCTION_TYPE short =>関数の種類:
      
functionResultUnknown - 戻り値または表が返されるかどうかを判断できない
       functionNoTable- 表が返されない
       functionReturnsTable - 表が返される
      
SPECIFIC_NAME String =>この関数をそのスキーマ内で一意に識別する名前
============================================================
NANO_OF_SECOND
NANO_OF_DAY
MICRO_OF_SECOND
MICRO_OF_DAY
MILLI_OF_SECOND
MILLI_OF_DAY
SECOND_OF_MINUTE
SECOND_OF_DAY
MINUTE_OF_HOUR
MINUTE_OF_DAY
HOUR_OF_AMPM
CLOCK_HOUR_OF_AMPM
HOUR_OF_DAY
CLOCK_HOUR_OF_DAY
AMPM_OF_DAY

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
例
浮動小数点値16進数文字列
1.0 0x1.0p0
-1.0 -0x1.0p0
2.0 0x1.0p1
3.0 0x1.8p1
0.5 0x1.0p-1
0.25 0x1.0p-2
Double.MAX_VALUE
0x1.fffffffffffffp1023
Minimum Normal Value
0x1.0p-1022
Maximum Subnormal Value
0x0.fffffffffffffp-1022
Double.MIN_VALUE
0x0.0000000000001p-1022
============================================================
階層変更イベント(HierarchyListener)
     
 祖先の追加
      祖先の削除
      表示可能にされた階層
      表示不可にされた階層
      画面に表示される階層(可視および表示可能の両方)
      画面上で隠される階層(不可視または表示不可)
     
祖先形状変更イベント(HierarchyBoundsListener)
     
 サイズ変更された祖先
      移動された祖先
     


 階層イベントは通知のためだけに提供されています
============================================================
kがoffsetより小さい場合は、以前の文字シーケンス内のインデックスkの位置にある文字
 kがoffsetより小さくはないが、offset+str.length()より小さい場合は、引数str内のインデックスk-offsetの位置にある文字
 kがoffset+str.length()より小さくない場合は、以前の文字シーケンス内のインデックスk-str.length()の位置にある文字
 
offset引数は0に等しいかそれより大きく、このシーケンスの長さに等しいかこれより小さくなければなりません
============================================================
kがoffsetより小さい場合は、以前の文字シーケンス内のインデックスkの位置にある文字
 kがoffsetより小さくはないが、offset+str.length()より小さい場合は、引数str内のインデックスk-offsetの位置にある文字
 kがoffset+str.length()より小さくない場合は、以前の文字シーケンス内のインデックスk-str.length()の位置にある文字
 
offset引数は0に等しいかそれより大きく、このシーケンスの長さに等しいかこれより小さくなければなりません
============================================================
例
解析された属性値
初期のAttr.value
直列化された属性値



 文字参照











組込み文字エンティティ











リテラル改行文字











正規化された改行文字











リテラル改行文字を含むエンティティe



実装とロード・オプションに応じて異なる
実装とロード/保存オプションに応じて異なる


「Document Object Model (DOM) Level 3 Core Specification」も参照してください
============================================================
limits = {1,2,3,4,5,6,7} formats = {"Sun","Mon","Tue","Wed","Thur","Fri","Sat"}
 
limits ={0, 1, ChoiceFormat.nextDouble(1)} formats ={"no files", "one file", "many files"} (nextDoubleは、次に大きなdoubleを取得して、一方が開いた間隔を作るのに使用する)
 

 次に、フォーマットと解析を行う簡単な例を示します
============================================================
"text/sgml"
 "text/xml"
 "text/html"
 "text/enriched"
 "text/richtext"
 "text/uri-list"
 "text/directory"
 "text/css"
 "text/calendar"
 "application/x-java-serialized-object"
 "text/plain"
 
 文字セット・パラメータをサポートしていない、またはサポートしていないかのように扱われるMIMEタイプは次のとおりです
============================================================
MenuShortcut ms = new MenuShortcut(KeyEvent.VK_A, false);
 または
 
MenuShortcut ms = new MenuShortcut(KeyEvent.getExtendedKeyCodeForChar('A'), false);

java.awt.event.KeyEvent.getExtendedKeyCodeForChar呼出しを使用して、より広いキー・コードのセットに対してメニュー・ショートカットを構築することもできます
============================================================
dateNow()
 dateNow(clock)
 dateNow(zone)
 date(yearProleptic, month, day)
 date(era, yearOfEra, month, day)
 dateYearDay(yearProleptic, dayOfYear)
 dateYearDay(era, yearOfEra, dayOfYear)
 date(TemporalAccessor)

新しい暦の追加
 一連の使用可能な暦はアプリケーションによって拡張できます
============================================================
void <METHOD>(InvocationContext)
 
 Object <METHOD>(InvocationContext) throws Exception
 
注: PostConstructインタセプタ・メソッドはアプリケーション例外をスローしてはいけませんが、java.lang.Exceptionを含むチェック例外をスローするために宣言することはできます(ビジネスまたはタイムアウト・イベントでライフサイクル・イベントに加えてその同じインタセプタ・メソッドが介在する場合)
============================================================
カレンダ・タイプ
フィールド
値
説明


"gregory"
Calendar.ERA
0
GregorianCalendar.BC (BCE)


1
GregorianCalendar.AD (CE)


"buddhist"
Calendar.ERA
0
BC (BCE)


1
B.E. (仏暦紀元)


"japanese"
Calendar.ERA
0
西暦(明治以前)


1
明治


2
大正


3
昭和


4
平成


Calendar.YEAR
1
各紀元の最初の年
============================================================
as needed: スクロール・バーはスクロール・ペインが必要としたときにだけ作成および表示される
 always: スクロール・バーは作成され、常にスクロール・ペインによって表示される
 never: スクロール・バーは作成されることも、スクロール・ペインによって表示されることもない
 

 水平スクロール・バーおよび垂直スクロール・バーの状態は、Adjustableインタフェースを実装する2つのScrollPaneAdjustableオブジェクト(次元ごとに1つずつ)によって表されます
============================================================
暗黙的な双方向の分析と並べ替え
 カーソルの位置指定と移動(混合方向テキストのための分割カーソルを含む)
 ハイライト(混合方向テキストのための論理的ハイライトと視覚的ハイライトを含む)
 複数のベースライン(ローマン・ベースライン、ぶら下がりベースライン、およびセンター・ベースライン)
 ヒットのテスト
 位置揃え
 デフォルト・フォントの置換
 アセント、ディセント、および有効幅などのメトリック情報
 描画
 

TextLayoutオブジェクトは、drawメソッドを使用して描画できます
============================================================
DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral、HexDigits、およびOctalDigitsは、『Java(tm)言語仕様』のセクション3.10.1で規定されているとおりですが、桁間のアンダースコアが受け入れられない点は規定と異なります
============================================================
ビュー・バッファには、byteではなく、その値の型固有のサイズによってインデックスが付けられる  
 ビュー・バッファは、バッファと配列または同じ型のその他のバッファ間で連続した値のシーケンスをやりとりできる、相対一括get/putメソッドを提供する  
 ビュー・バッファは、補助byteバッファがダイレクト・バッファである場合にかぎりダイレクト・バッファになるという点で、潜在的に効率がよい  

 ビュー・バッファのbyte順序は、ビューの生成時にbyteバッファと同じものに固定されます
============================================================
DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral、HexDigits、およびOctalDigitsは、『Java(tm)言語仕様』のセクション3.10.1で規定されているとおりですが、桁間のアンダースコアが受け入れられない点は規定と異なります
============================================================
DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral、HexDigits、およびOctalDigitsは、『Java(tm)言語仕様』のセクション3.10.1で規定されているとおりですが、桁間のアンダースコアが受け入れられない点は規定と異なります
============================================================
DecodableString:
Signopt DecimalNumeral
Signopt 0x HexDigits
Signopt 0X HexDigits
Signopt # HexDigits
Signopt 0 OctalDigits
Sign:
-
+


DecimalNumeral、HexDigits、およびOctalDigitsは、『Java(tm)言語仕様』のセクション3.10.1で規定されているとおりですが、桁間のアンダースコアが受け入れられない点は規定と異なります
============================================================
void <METHOD>(InvocationContext)
 
 Object <METHOD>(InvocationContext) throws Exception
 
注: PreDestroyインタセプタ・メソッドはアプリケーション例外をスローしてはいけませんが、java.lang.Exceptionを含むチェック例外をスローするために宣言することはできます(ビジネスまたはタイムアウト・イベントでライフサイクル・イベントに加えてその同じインタセプタ・メソッドが介在する場合)
============================================================
SCOPE short =>未使用
  COLUMN_NAME String =>列名
  DATA_TYPE int => java.sql.TypesからのSQLデータ型
  TYPE_NAME String =>データ・ソース依存の型名
  COLUMN_SIZE int =>精度
  BUFFER_LENGTH int =>列値のバイト長
  DECIMAL_DIGITS short =>スケール - DECIMAL_DIGITSが適用できないデータ型の場合、Nullが返される
============================================================
if (counter[t] - counter[t-GP]) is positive then V[t] = counter[t] - counter[t-GP]
 if (counter[t] - counter[t-GP]) is negative then V[t] = counter[t] - counter[t-GP] + MODULUS
 

 このカウンタ・モニターの実装では、監視対象の属性が整数型(Byte、Integer、Short、Long)である必要があります
============================================================
単一引用符で囲まれた値は、文字列として解釈する必要がある(nullの可能性がある)
  SQL_DATA_TYPE int =>未使用
  SQL_DATETIME_SUB int =>未使用
  CHAR_OCTET_LENGTH int => charの型については列の最大バイト数
  ORDINAL_POSITION int =>表中の列のインデックス(1から始まる)
  IS_NULLABLE String =>列でNULL値を許可するかどうかの判断にISOルールが使用される
============================================================
"text/rtf"
 "text/tab-separated-values"
 "text/t140"
 "text/rfc822-headers"
 "text/parityfec"
 
 「text/<その他>」のMIMEタイプの場合は、MIMEタイプで文字セット・パラメータがサポートされているかどうかをはじめて判定する必要が発生すると、JREは、そのMIMEタイプを使用する任意に選択されたDataFlavorにそのパラメータが明示的にリストされているかどうかをチェックします
============================================================
Text - 値のテキスト表現
OffsetId/Offset - ゾーン・オフセット
ZoneId - タイムゾーンのID
ZoneText - タイムゾーンの名前
ChronologyId - 暦のID
ChronologyText - 暦の名前
Literal - テキスト・リテラル
Nested and Optional - フォーマットを入れ子にしたりオプションにしたりできます

 また、いずれの要素も、スペースまたは他の任意の文字を使用したパディングによって装飾できます
============================================================
適用外のタグ 変換後
cel-gaulish xtg-x-cel-gaulish
en-GB-oed en-GB-x-oed
i-default en-x-i-default
i-enochian und-x-i-enochian
i-mingo see-x-i-mingo
zh-min nan-x-zh-min


すべての適用外タグのリストについては、IANA Language Subtag Registryを参照してください(「Type: grandfathered」を検索)
============================================================
"ignore-unknown-character-denormalizations" 



true
[必須] (デフォルト)「XML 1.1」がサポートされているときに完全な正規化を検証中に、正規化プロパティを判定できない文字が検出された場合は、"unknown-character-denormalization"警告を発生させ(このパラメータが設定されていない場合は、代わりにエラーを発生させる)、これらの文字によって引き起こされる可能性のある不完全な正規化をすべて無視します
============================================================
正規表現
制限
結果

:
2
{ "boo", "and:foo" }
:
5
{ "boo", "and", "foo" }
:
-2
{ "boo", "and", "foo" }
o
5
{ "b", "", ":and:f", "", "" }
o
-2
{ "b", "", ":and:f", "", "" }
o
0
{ "b", "", ":and:f" }

 このフォームのメソッド呼び出しstr.split(regex, n)では、次の式と同じ結果が得られます
============================================================
;
サブパターン境界
          あり
          正と負のサブパターンを区切る
     
%
接頭辞または接尾辞
          あり
          100倍してパーセントを表す
     
\u2030
接頭辞または接尾辞
          あり
          1000倍してパーミル値を表す
     
¤ (\u00A4)
          接頭辞または接尾辞
          なし
          通貨記号で置換される通貨符号
============================================================
LSInput.characterStream


LSInput.byteStream

 LSInput.stringData


LSInput.systemId

 LSInput.publicId


 すべての入力がnullである場合、LSParserは、DOMError.typeが"no-input-specified"に設定され、DOMError.severityがDOMError.SEVERITY_FATAL_ERRORに設定されたDOMErrorを報告します
============================================================
JARファイル内でSolaris SPARC 5.7のライブラリのステータスを検索するとき:
 
libstat.so
 SunOS/sparc/5.7/lib/libstat.so
 
 JARファイル内でWindows NT 4.0のライブラリのステータスを検索するとき:
 
stat.dll
 WindowsNT/x86/4.0/lib/stat.dll
 
具体的には、nativelibnameをSystem.mapLibraryName(libname)の結果にします
============================================================
SpecificationVersion:
Digits RefinedVersionopt
RefinedVersion:
. Digits
. Digits RefinedVersion
Digits:
Digit
Digits
Digit:
Character.isDigit(char)がtrueを返す任意の文字(0、1、2など)
 

実装のタイトル、バージョン、およびベンダー文字列は実装を特定し、問題が発生したときに影響を受けるパッケージを正確に報告できるようにします
============================================================
ロケール

フォーマット



Locale("de", "DE")

java.class



Locale("de", "DE")
java.properties



Locale("de")
java.class


Locale("de")
java.properties


Locale("")

java.class


Locale("")
java.properties




1つ前の手順でリソース・バンドルが1つも見つからなかった場合は、手順6に進みます
============================================================
リバーブのタイプとパラメータ



タイプ
減衰時間(ms)
レイト強度(dB)
レイト遅延(ms)
アーリー強度(dB)
アーリー遅延(ms)


Cavern
2250
-2.0
41.3
-1.4
10.3


Dungeon
1600
-1.0
10.3
-0.7
2.6


Garage
900
-6.0
14.7
-4.0
3.9


Acoustic Lab
280
-3.0
8.0
-2.0
2.0


Closet
150
-10.0
2.5
-7.0
0.6
============================================================
文字列名
CompositeName



""

{} (空の名前==新しいCompositeName("")==新しいCompositeName())




"x"

{"x"}




"x/y"

{"x", "y"}


"x/"
{"x", ""}


"/x"
{"", "x"}


"/"
{""}


"//"
{"", ""}

"/x/"
{"", "x", ""}

"x//y"
{"x", "", "y"}


変換の例
 変換の例を示します
============================================================
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 以前使われていた修飾子を次に挙げます
============================================================
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 以前使われていた修飾子を次に挙げます
============================================================
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 以前使われていた修飾子を次に挙げます
============================================================
java.awt.event.InputEvent.SHIFT_DOWN_MASK
 java.awt.event.InputEvent.CTRL_DOWN_MASK
 java.awt.event.InputEvent.META_DOWN_MASK
 java.awt.event.InputEvent.ALT_DOWN_MASK
 java.awt.event.InputEvent.ALT_GRAPH_DOWN_MASK
 
 以前使われていた修飾子を次に挙げます
============================================================
算術演算の結果で優先されるスケール
演算優先される結果のスケール
加算max(addend.scale(), augend.scale())
減算max(minuend.scale(), subtrahend.scale())
乗算multiplier.scale() + multiplicand.scale()
除算dividend.scale() - divisor.scale()


 これらのスケールは、正確な算術結果を返すメソッドによってだけ使用されます
============================================================
書式設定済みのイメージ



MIMEタイプ説明


"image/gif"
Graphics Interchange Formatイメージ


"image/jpeg"
Joint Photographic Experts Groupイメージ


"image/png"
Portable Network Graphicsイメージ



 一般に、書式設定済みのイメージ印刷データは、バイト指向の表現クラス(バイト配列、InputStream、URL)で提供されます
============================================================
DropMode.USE_SELECTION
DropMode.ON
DropMode.INSERT
DropMode.INSERT_ROWS
DropMode.INSERT_COLS
DropMode.ON_OR_INSERT
DropMode.ON_OR_INSERT_ROWS
DropMode.ON_OR_INSERT_COLS


 このコンポーネントがドロップを受け付けるTransferHandlerを持っていなければ、ドロップ・モードの効果はありません
============================================================
DAY_OF_WEEK
ALIGNED_DAY_OF_WEEK_IN_MONTH
ALIGNED_DAY_OF_WEEK_IN_YEAR
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
ALIGNED_WEEK_OF_MONTH
ALIGNED_WEEK_OF_YEAR
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
getQualifiedNameは"prefix:LocalName" = "WOMBAT:GetLastTradePrice"を返す
  getURIは"http://www.wombat.org/trader"を返す
  getLocalNameは"GetLastTracePrice"を返す
  getPrefixは"WOMBAT"を返す
 

 XMLの名前空間を使用すると、アプリケーション固有の識別子から発生するSOAP識別子間の差異をなくすことができます
============================================================
ISO 8601:2000(E) Section 5.5.3.2 Alternative format
「W3C XML Schema 1.0 Part 2」の付録D「ISO 8601 Date and Time Formats」

XMLGregorianCalendar XML Schema 1.0とJava表現の日時データ型フィールドの対応づけ

デフォルトの開始インスタンスは、GregorianCalendarが元期の開始を使うことによって定義されます
============================================================
ISO 8601:2000(E) Section 5.5.3.2 Alternative format
「W3C XML Schema 1.0 Part 2」の付録D「ISO 8601 Date and Time Formats」

XMLGregorianCalendar XML Schema 1.0とJava表現の日時データ型フィールドの対応づけ

デフォルトの開始インスタンスは、GregorianCalendarが元期の開始を使うことによって定義されます
============================================================
ISO 8601:2000(E) Section 5.5.3.2 Alternative format
「W3C XML Schema 1.0 Part 2」の付録D「ISO 8601 Date and Time Formats」

XMLGregorianCalendar XML Schema 1.0とJava表現の日時データ型フィールドの対応づけ

デフォルトの開始インスタンスは、GregorianCalendarが元期の開始を使うことによって定義されます
============================================================
objがnullでない
objがOpenMBeanAttributeInfoインタフェースも実装している
名前が等しい
公開型が等しい
アクセス・プロパティ(isReadable、isWritable、およびisIs)が等しい
デフォルト値、最小値、最大値、および正当な値が等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanAttributeInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
objがnullでない
objがOpenMBeanAttributeInfoインタフェースも実装している
名前が等しい
公開型が等しい
アクセス・プロパティ(isReadable、isWritable、およびisIs)が等しい
デフォルト値、最小値、最大値、および正当な値が等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanAttributeInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
たとえば、次の2つのFilePermissionがあり、
 
 "/tmp/-", "read"
 "/tmp/scratch/foo", "write"

そして次のFilePermissionでimpliesメソッドを呼び出す場合

 
implies関数は、「/tmp/-」および「/tmp/scratch/foo」の両方のアクセス権を考慮しなければならず、そのため、実質的なアクセス権は「read,write」であり、impliesはtrueを返します
============================================================
解決されたインタフェースがpublic以外の場合、それらがすべて同じクラス・ローダーに定義されているときは、そのローダーからそのインタフェースの動的プロキシ・クラスを取得しようとする

 上記以外の場合は、LinkageErrorがスローされる(指定されたインタフェースをすべて実装するクラスはいずれのローダーにも定義できないため)

 
それ以外の場合、解決できなかった指定インタフェースについて、ClassNotFoundExceptionがスローされます
============================================================
戻り値:

このDurationがdurationパラメータより短い場合はDatatypeConstants.LESSER
このDurationがdurationパラメータに等しい場合はDatatypeConstants.EQUAL
このDurationがdurationパラメータより長い場合はDatatypeConstants.GREATER
最終的な部分順序リレーションが判定できない場合はDatatypeConstants.INDETERMINATE
============================================================
直列化に関する注意:

LogRecordクラスは直列化可能である

  パラメータ配列のオブジェクトは直列化できないので、直列化時にパラメータ配列のすべてのオブジェクトはObject.toStringを使用して対応するStringとして書き込まれる

  ResourceBundleは直列化された形式の一部として転送されないが、リソース・バンドル名は転送され、受け側のオブジェクトのreadObjectメソッドは適切なリソース・バンドルを検出しようとする
============================================================
MIMEタイプ・ファイルの形式
 # comments begin with a '#' # the format is <mime type> <space separated file extensions> # for example: text/plain txt text TXT # this would map file.txt, file.text, and file.TXT to # the mime type "text/plain"
============================================================
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 これらも使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 これらも使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 これらも使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
trueとしてcanRetransformに追加された再変換可能トランスフォーマ
    
falseとしてcanRetransformに追加された、またはInstrumentation.addTransformer(ClassFileTransformer)に追加された、再変換不可能トランスフォーマ
    


 トランスフォーマがaddTransformerで登録されると、トランスフォーマは、新しいクラス定義とクラス再定義のたびに呼び出されます
============================================================
例
浮動小数点値16進数文字列
1.0 0x1.0p0
-1.0 -0x1.0p0
2.0 0x1.0p1
3.0 0x1.8p1
0.5 0x1.0p-1
0.25 0x1.0p-2
Float.MAX_VALUE
0x1.fffffep127
Minimum Normal Value
0x1.0p-126
Maximum Subnormal Value
0x0.fffffep-126
Float.MIN_VALUE
0x0.000002p-126
============================================================
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 これらも使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 これらも使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
java.awt.event.InputEvent.SHIFT_MASK
 java.awt.event.InputEvent.CTRL_MASK
 java.awt.event.InputEvent.META_MASK
 java.awt.event.InputEvent.ALT_MASK
 java.awt.event.InputEvent.ALT_GRAPH_MASK
 
 これらも使用できますが、これらは_DOWN_修飾子にマッピングされます
============================================================
このため、accessEventQueueアクセス権も有効な場合、悪意のあるコードはシステム全体でAWTイベント・キューの内容を変更し、アプリケーションまたはアプレットを誤作動させ、システムを不安定にする可能性がある


readDisplayPixels
画面からのピクセルの読込み
java.awt.Compositeなどのインタフェース、またはjava.awt.Robotクラスにより、任意のコードが画面上のピクセルを調べることができるようになる
============================================================
Standard MBeanまたはMXBeanインタフェース
 この種のインタフェース内のメソッド
 Standard MBeanまたはMXBeanインタフェース内のメソッドのパラメータ(そのメソッドが属性のgetterでもsetterでもなく、オペレーションである場合)
 Standard MBeanまたはMXBeanを実装するクラス内のpublicコンストラクタ
 この種のコンストラクタ内のパラメータ
 
上記以外の注釈の使用法は、無視されます
============================================================
booleanの場合はfalse
 数値型の場合はゼロ
 octet、char、およびwcharの場合はゼロ
 stringとwstringの場合は空の文字列
 オブジェクト参照の場合はnull
 型コードの場合はTCKindの値がtk_nullである型コード
 any値の場合は、TCKindの値がtk_nullである型コードを持ち、値を持たないany
 
 複合型の場合は、対応するDynAnyを作成すると、次のようなデフォルト値が割り当てられます
============================================================
"charset-overrides-xml-encoding"


true
[オプション] (デフォルト) HTTP「IETF RFC 2616」などのより高レベルのプロトコルによって、処理されている入力ストリームの文字エンコーディングの表示が提供される場合は、それにより、XML宣言またはテキスト宣言で指定されたエンコーディングがすべてオーバーライドされます(「XML 1.0」のセクション4.3.3「エンティティの文字エンコーディング」も参照)
============================================================
ScriptEngine.ENGINE
ScriptEngine.ENGINE_VERSION
ScriptEngine.LANGUAGE
ScriptEngine.LANGUAGE_VERSION
ScriptEngine.NAME


 最初の4つのキーについては、これらのキーの値はそれぞれgetEngineName、getEngineVersion、getLanguageName、getLanguageVersionによって返される文字列です
============================================================
booleanの場合はfalse
 数値型の場合はゼロ
 octet、char、およびwcharの場合はゼロ
 stringとwstringの場合は空の文字列
 オブジェクト参照の場合はnull
 型コードの場合はTCKindの値がtk_nullである型コード
 any値の場合は、TCKindの値がtk_nullである型コードを持ち、値を持たないany
 
 複合型の場合は、対応するDynAnyを作成すると、次のようなデフォルト値が割り当てられます
============================================================
SEPARATE_DOCUMENTS_UNCOLLATED_COPIES - 各入力ドキュメントが、指定された固有の装丁により別々に製本される
 

 SEPARATE_DOCUMENTS_COLLATED_COPIES - 各入力ドキュメントが、指定された固有の装丁により別々に製本される
 


IPP互換性: Finishingsクラスは、列挙型のセットであるIPPの「finishings」属性に含まれる一部のIPP列挙型値をカプセル化します
============================================================
クラスfoo.bar.Messages_it_IT
ファイルfoo/bar/Messages_it_IT.properties
クラスfoo.bar.Messages_it
ファイルfoo/bar/Messages_it.properties
クラスfoo.bar.Messages
ファイルfoo/bar/Messages.properties

この時点で、getBundleはfoo/bar/Messages.propertiesを見つけます
============================================================
プロパティ

現在のプロパティを格納するフィールド
     プロパティを取得および設定するメソッド
     
イベント通知
RowSetオブジェクトのコマンドにパラメータを設定する設定メソッドの完全なセット
 ストリーム

ストリーム・インスタンスを格納するフィールド
  ストリームの型を示す定数
  


2.0 プロパティの設定
 どの行セットも必ず一連のプロパティを保持しますが、それらのプロパティは通常、ツールを使用して設定されます
============================================================
QueueメソッドとDequeメソッドの比較

 Queueメソッド
 等価なDequeメソッド


add(e)
addLast(e)


offer(e)
offerLast(e)


remove()
removeFirst()


poll()
pollFirst()


element()
getFirst()


peek()
peekFirst()


両端キューは、LIFO (後入れ先出し)スタックとして使用することもできます
============================================================
"/"ローカル・パス名の区切り文字 
     "%t"システムの一時ディレクトリ 
     "%h" user.homeシステム・プロパティの値 
     "%g"ログのローテーションを識別する生成番号 
     "%u"重複を解決する一意の番号 
     "%%"単一のパーセント符号%に変換 

 "%g"フィールドが指定されず、ファイル・カウントが1より大きい場合、生成されたファイル名の末尾のドットのあとに生成番号が追加されます
============================================================
特殊な値Redirect.PIPE
特殊な値Redirect.INHERIT
ファイルから読み取るリダイレクト(Redirect.from(File)を呼び出して作成される)
 ファイルに書き込むリダイレクト(Redirect.to(File)を呼び出して作成される)
 ファイルの末尾に追加するリダイレクト(Redirect.appendTo(File)を呼び出して作成される)
 
上のカテゴリにはそれぞれ一意のTypeが関連付けられています
============================================================
VALUE_TEXT_ANTIALIAS_ON
VALUE_TEXT_ANTIALIAS_OFF
VALUE_TEXT_ANTIALIAS_DEFAULT
VALUE_TEXT_ANTIALIAS_GASP
VALUE_TEXT_ANTIALIAS_LCD_HRGB
VALUE_TEXT_ANTIALIAS_LCD_HBGR
VALUE_TEXT_ANTIALIAS_LCD_VRGB
VALUE_TEXT_ANTIALIAS_LCD_VBGR
============================================================
WeekFieldsの例
日付曜日
最初の曜日: 月曜日最小日数: 4最初の曜日: 月曜日最小日数: 5
2008-12-31水曜日
2008年12月の週52008年12月の週5
2009-01-01木曜日
2009年1月の週12009年1月の週0
2009-01-04日曜日
2009年1月の週12009年1月の週0
2009-01-05月曜日
2009年1月の週22009年1月の週1

年の週
 1つのフィールド「年の週番号」が使用されます
============================================================
オーディオ・ファイル形式のプロパティ

プロパティ・キー
値の型
説明


"duration"
Long
マイクロ秒単位でのファイルの再生デュレーション


"author"
String
このファイルの作成者の名前


"title"
String
このファイルのタイトル


"copyright"
String
著作権メッセージ


"date"
Date
録音またはリリースの日付


"comment"
String
任意のテキスト
============================================================
// sets the Graphics2D object's Transform attribute g2d.scale(10, 10); // sets the Graphics2D object's Stroke attribute g2d.setStroke(new BasicStroke(1.5f)); 
Graphics2Dオブジェクトにほかのスケーリング変換が追加されていない場合、生成されるラインの幅は約15ピクセルになります
============================================================
グループのActivationGroupID
 グループの初期化データ(java.rmi.MarshalledObject内)

 グループが作成されると、ActivationGroupのデフォルトの実装では、このグループのActivationGroupDescを作成したときに要求されたプロパティによりシステムのプロパティがオーバーライドされ、SecurityManagerがデフォルトのシステム・セキュリティ・マネージャとして設定されます
============================================================
LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
LATIN CAPITAL LETTER L WITH SMALL LETTER J
LATIN CAPITAL LETTER N WITH SMALL LETTER J
LATIN CAPITAL LETTER D WITH SMALL LETTER Z

 Unicode文字には、ほかにも多数のタイトル・ケース文字が存在します
============================================================
LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON
LATIN CAPITAL LETTER L WITH SMALL LETTER J
LATIN CAPITAL LETTER N WITH SMALL LETTER J
LATIN CAPITAL LETTER D WITH SMALL LETTER Z

 Unicode文字には、ほかにも多数のタイトル・ケース文字が存在します
============================================================
setInnerHTML(Element, String)
setOuterHTML(Element, String)
insertBeforeStart(Element, String)
insertAfterStart(Element, String)
insertBeforeEnd(Element, String)
insertAfterEnd(Element, String)

次の例は、これらのメソッドの使用方法を示しています
============================================================
通知
MemoryPoolMXBean.isUsageThresholdSupported()メソッドおよびMemoryPoolMXBean.isCollectionUsageThresholdSupported()メソッドを呼び出して判定できる使用量しきい値またはコレクション使用量しきい値をメモリー・プールの1つがサポートする場合、このMemoryMXBeanは、2種類のメモリー通知を発行するNotificationEmitterです
============================================================
[L("nb"), C("NO"), V("POSIX")]
 [L("no"), C("NO"), V("POSIX")]
 [L("nb"), C("NO")]
 [L("no"), C("NO")]
 [L("nb")]
 [L("no")]
 Locale.ROOT

Locale("no", "NO", "POSIX")でも同じリストが生成されますが、「no」を持つロケールが「nb」を持つロケールより前に出現する点が異なります
============================================================
XML Schema 1.0とJava表現の日時データ型の対応づけ
       




XML Schema 1.0 データ型フィールド
関連のXMLGregorianCalendarアクセサ
値の範囲


year
 getYear()+getEon()または getEonAndYear()

 getYear()は、-(10^9-1)から(10^9)-1の値またはDatatypeConstants.FIELD_UNDEFINED
============================================================
アクセス権ターゲット名
アクセス権により許可される操作
このアクセス権を許可した場合のリスク


accessClipboard
AWTクリップボードとの間での情報の送信と取得
不正なコードにより機密情報が共有されるようになる可能性がある


accessEventQueue
AWTイベント・キューへのアクセス
悪意のあるコードがAWTイベント・キューを取得し、そのイベント・キューの既存のイベントを覗いたり、削除したりする可能性がある
============================================================
class A { public void m() {} }  interface B { void m(); }  ... m1 = ...; // A.m  m2 = ...; // B.m  assert ! elements.overrides(m1, m2, elements.getTypeElement("A")); 


 ただし、3番目の型Cのメンバーとして参照されると、AのメソッドはBのメソッドをオーバーライドします
============================================================
外部参照へのすべてのアクセスを拒否するには空の文字列
特定のプロトコルにのみアクセス権を付与するにはそのプロトコル(fileなど)
すべてのプロトコルにアクセス権を付与するにはキーワード「all」
 FEATURE_SECURE_PROCESSINGが有効になっている場合は、外部参照が含まれるXML/XSD/XSLを処理するアプリケーションの妨げになる可能性があるとしても、実装によって外部接続がデフォルトで制限されることをお勧めします
============================================================
外部参照へのすべてのアクセスを拒否するには空の文字列
特定のプロトコルにのみアクセス権を付与するにはそのプロトコル(fileなど)
すべてのプロトコルにアクセス権を付与するにはキーワード「all」
 FEATURE_SECURE_PROCESSINGが有効になっている場合は、外部参照が含まれるXML/XSD/XSLを処理するアプリケーションの妨げになる可能性があるとしても、実装によって外部接続がデフォルトで制限されることをお勧めします
============================================================
外部参照へのすべてのアクセスを拒否するには空の文字列
特定のプロトコルにのみアクセス権を付与するにはそのプロトコル(fileなど)
すべてのプロトコルにアクセス権を付与するにはキーワード「all」
 FEATURE_SECURE_PROCESSINGが有効になっている場合は、外部参照が含まれるXML/XSD/XSLを処理するアプリケーションの妨げになる可能性があるとしても、実装によって外部接続がデフォルトで制限されることをお勧めします
============================================================
NoSuchMethodException—要求されたメソッドが存在しない場合
 NoSuchFieldException—要求されたフィールドが存在しない場合
 IllegalAccessException—メンバーは存在しているが、アクセス・チェックが失敗した場合
 

 一般に、メソッドMがメソッド・ハンドルをルックアップできる条件は、ルックアップ・クラスがMへの呼出しをコンパイル、検証、解決できる条件ほど制限的ではありません
============================================================
while (true) { try { bindings = ctx.listBindings(name); while (bindings.hasMore()) { b = bindings.next(); ... } break; } catch (ReferralException e) { ctx = e.getReferralContext(); } } 

ReferralExceptionはabstractクラスです
============================================================
汎用文字である
   それが通貨記号である('$'など)
   それが連結句読点文字である('_'など)
   数字である
   数値汎用文字である(ローマ数字文字など)
   連結マークである
   非スペーシング・マークである
  isIdentifierIgnorable(codePoint)がコード・ポイントについてtrueを返す
 

 これらの条件は、バージョン6.2のUnicode標準の文字情報に対してテストされます
============================================================
PSEUDO_COLUMN short => Oracle ROWIDのような擬似列かどうか
      
 versionColumnUnknown - 擬似列であるか、またはそうでない可能性がある
       versionColumnNotPseudo - 擬似列ではない
       versionColumnPseudo - 擬似列である
      

COLUMN_SIZE列はその列に指定された列のサイズを表します
============================================================
宣言型による非整列化が返したJAXBElement
       

JAXBElementプロパティ
値


name
xml element name




value
instanceof declaredType


declaredType
非整列化メソッドのdeclaredTypeパラメータ


scope
null (実際のスコープが不明)





declaredTypeによる非整列化メソッドの例を次に示します
============================================================
floorMod(+4, -3) == -2;   および(+4 % -3) == +1 
floorMod(-4, +3) == +2;   および(-4 % +3) == -1 
floorMod(-4, -3) == -1;   および(-4 % -3) == -1  




 引数の符号が不明で、正のモジュラスが必要な場合は、それを(floorMod(x, y) + abs(y)) % abs(y)として計算できます
============================================================
TYPE_CAT String =>型のカタログ(nullの可能性がある)
  TYPE_SCHEM String =>型のスキーマ(nullの可能性がある)
  TYPE_NAME String =>型名
  ATTR_NAME String =>属性名
  DATA_TYPE int => java.sql.Typesからの属性の型のSQLの型
  ATTR_TYPE_NAME String =>データ・ソース依存の型名
============================================================
ただし、テキスト・メディア・タイプの文字セット・パラメータ値は、小文字に変換される
  パラメータ値を囲む引用符文字は、削除される
  パラメータ値内部の引用バックスラッシュ文字は、削除される
  パラメータは、パラメータ名をキーにして昇順に配置される
 

 DocFlavorクラスの直列化表現には、表現クラスそのもの(Classオブジェクト)ではなく、表現クラスの完全修飾クラス名 (Stringオブジェクト)も含まれます
============================================================
負のゼロ("-0")は、
 
isParseBigDecimal()がtrueである場合はBigDecimal(0)と解析され、
 isParseBigDecimal()がfalse、isParseIntegerOnly()がtrueである場合はLong(0)と解析され、
 isParseBigDecimal()とisParseIntegerOnly()がどちらもfalseである場合はDouble(-0.0)と解析されます
============================================================
Chromaticity属性
 

 モノクロ・ドキュメントに対する効果
 

 カラー・ドキュメントに対する効果
 



MONOCHROME


 モノクロでそのまま印刷される
 

 カラーがグレーの陰影に変換され、モノクロで印刷される
 



COLOR


 モノクロでそのまま印刷される
 

 カラーでそのまま印刷される
 




IPP互換性: Chromaticityは、現在IPP属性ではありません
============================================================
ゼロだと表示されない
     
.
Number
          あり
          数値桁区切り子または通貨桁区切り子
     
-
Number
          あり
          マイナス記号
     
,
Number
          あり
          グループ区切り子
     
E
Number
          あり
          科学表記法の仮数と指数を区切る
============================================================
グループ内の最初の起動可能なオブジェクト用にActivationDesc (明示的なActivationGroupIDなし)を作成した副作用として
 ActivationGroup.createGroupメソッドを使用
 ActivationGroupDescの登録のみが行われているグループ内の最初のオブジェクトを起動した副作用として

 アクティベータだけが、ActivationGroupを作成し直すことができます
============================================================
内容に含まれる値が配列である場合、オブジェクト参照型の配列に対してdeepEqualsメソッドを呼び出すか、またはプリミティブ型の配列に対してArrays.equals(e1,e2)の適切なオーバーロードを呼び出すのと同様に、値の比較が実行されます


 これらの条件が満たされている場合、このequalsメソッドは、CompositeDataインタフェースの異なった実装であるobjパラメータに対して正常に動作します
============================================================
内容に含まれる値が配列である場合、オブジェクト参照型の配列に対してdeepEqualsメソッドを呼び出すか、またはプリミティブ型の配列に対してArrays.equals(e1,e2)の適切なオーバーロードを呼び出すのと同様に、値の比較が実行されます


 これらの条件が満たされている場合、このequalsメソッドは、CompositeDataインタフェースの異なった実装であるobjパラメータに対して正常に動作します
============================================================
handleStartTag(html, ...)
handleStartTag(head, ...)
handleEndTag(head)
handleStartTag(body, ...)
handleStartTag(p, ...)
handleText(...)
handleEndTag(p)
handleEndTag(body)
handleEndTag(html)

イタリック体の項目は暗示されています
============================================================
指定されたフラグi d m s u xのオン/オフを切り替える
(?=X)
X、幅ゼロの肯定先読み
(?!X)
X、幅ゼロの否定先読み
(?<=X)
X、幅ゼロの肯定後読み
(?<!X)
X、幅ゼロの否定後読み
(?>X)
X、独立した前方参照を行わない正規表現グループ


バックスラッシュ、エスケープ、および引用
 バックスラッシュ文字(「\」)は、前述の表に定義されているエスケープ構文を導入する役割を果たします
============================================================
名前 
 型 


 readonly 
 Boolean 


 hidden 
 Boolean 


 system 
 Boolean 


 archive 
 Boolean 



 getAttributeメソッドは、readAttributes()メソッドを呼び出したかのように、これらの属性またはBasicFileAttributeViewによって定義される任意の属性を読み取るために使用できます
============================================================
オプション名
説明


 SO_SNDBUF 
 ソケット送信バッファのサイズ 


 SO_RCVBUF 
 ソケット受信バッファのサイズ 


 SO_KEEPALIVE 
 接続をキープアライブにします 


 SO_REUSEADDR 
 アドレスを再利用します 


 TCP_NODELAY 
 Nagleアルゴリズムを無効にします 



 追加(実装固有)のオプションをサポートできる場合もあります
============================================================
下にスクロールする場合、最後の可視要素が最初の完全な可視要素になるように、スクロールする距離を返す
 上にスクロールする場合、最初の可視要素が最後の完全な可視要素になるように、スクロールする距離を返す
 リストが空の場合は、visibleRect.heightを返す
 

 水平方向のスクロールで、レイアウト方向がVERTICAL_WRAPまたはHORIZONTAL_WRAPである場合、次のルールが適用されます
============================================================
'<' : より大きい、文字相違の場合(第1)
            ';' : より大きい、アクセント相違の場合(第2)
            ',' : より大きい、ケース(大文字と小文字)相違の場合(第3)
            '=' : 等しい
        
リセット文字: 主に短縮と拡張のために使用しますが、ルール・セットの終わりに修正を追加するためにも使用できるリセットが文字1つあります
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  COLUMN_NAME String =>列名
  DATA_TYPE int => java.sql.TypesからのSQLの型
  TYPE_NAME String =>データ・ソース依存の型名
============================================================
BlockingQueueのメソッドのサマリー


例外のスロー
特殊な値
ブロック
タイム・アウト


挿入
add(e)
offer(e)
put(e)
offer(e, time, unit)


削除
remove()
poll()
take()
poll(time, unit)


検査
element()
peek()
適用外
適用外


BlockingQueueはnull要素を受け入れません
============================================================
typePredNone - サポートしない
       typePredChar - WHERE .. LIKEでだけサポートされる
       typePredBasic - WHERE .. LIKE以外に対しサポートされる
       typeSearchable - すべてのWHERE .. でサポートされる
      
UNSIGNED_ATTRIBUTE boolean =>符号なしか
============================================================
名前空間URI: URIとして表され、接頭辞がバインドされる名前空間名
接頭辞: 構文上、これは名前空間宣言で、XMLConstants.XMLNS_ATTRIBUTE ("xmlns")に続く属性名の一部

例: <element xmlns:prefix="http://Namespace-name-URI">
すべてのget*(*)メソッドは名前空間URIおよび接頭辞の解決の現在のスコープで動作します
============================================================
uuuu-MM-dd'T'HH:mmXXXXX
uuuu-MM-dd'T'HH:mm:ssXXXXX
uuuu-MM-dd'T'HH:mm:ss.SSSXXXXX
uuuu-MM-dd'T'HH:mm:ss.SSSSSSXXXXX
uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSXXXXX

 使用される形式は、完全な時間値を出力するもっとも短いものになり、省略部分はゼロであると暗に示されます
============================================================
trueの場合

 trueの場合、要素がXmlAnyElementでマークされているプロパティに一致し、JAXBContextに知られている場合(たとえば、同じタグ名を持つXmlRootElementを伴うクラスが存在する場合や、同じタグ名を持つXmlElementDeclが存在する場合)、unmarshallerはこの要素をDOMに非整列化するかわりに、それをJAXBオブジェクトに非整列化しようとします
============================================================
functionNoNulls - NULL値を許さない
       functionNullable - NULL値を許す
       functionNullableUnknown - NULL値を許すかどうかは不明
      
REMARKS String =>列/パラメータを記述するコメント
  CHAR_OCTET_LENGTH int =>バイナリと文字ベースのパラメータまたは列の最大長
============================================================
特に、次のdocフレーバのサポートが推奨されている・   ("application/x-java-jvm-local-objectref", "java.awt.image.renderable.RenderableImage")


 Java Print Serviceインスタンスは、上記の必須docフレーバに加え、任意のdocフレーバをサポート可能です(必須のdocフレーバだけに限定することも可)
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


enableSubclassImplementation
ObjectOutputStreamまたはObjectInputStreamのサブクラスの実装で、各オブジェクトのデフォルトの直列化または直列化復元をオーバーライドする
コードはこれを利用し、悪意を持ってクラスの直列化や直列化復元を行う可能性があります
============================================================
特に、次のdocフレーバのサポートが推奨されている・   ("text/plain", "java.io.InputStream") ・   ("text/plain; charset=us-ascii", "java.io.InputStream") ・   ("text/plain; charset=utf-8", "java.io.InputStream")


 描画可能なイメージ・オブジェクト
============================================================
ロケールの言語コード
大文字
小文字
説明


tr (トルコ語)
\u0130
\u0069
上に点が付いた大文字のI ->小文字のi


tr (トルコ語)
\u0049
\u0131
大文字のI ->点のない小文字のi 


(すべて)
French Fries
french fries
String内の文字すべてを小文字に変換


(すべて)
  
  
String内の文字すべてを小文字に変換
============================================================
クライアント・コンポーネントがFOCUS_LOSTイベントを受け取る際に、InputContext.dispatchEventにより
 ユーザー・インタフェースまたはInputContext.selectInputMethodを使って、このインプット・メソッドから別のインプット・メソッドに切り替えるとき
 現在のクライアント・コンポーネントが削除される場合は、removeNotifyが呼び出される前
============================================================
factory.getObjectInstance(null, environment);

 たとえば、LDAP URLコンテキスト・ファクトリでgetObjectInstance()を上記のように呼び出すと、LDAP URLを解決できるコンテキストが返されます(ldap://ldap.wiz.com/o=wiz,c=us、ldap://ldap.umich.edu/o=umich,c=usなど)
============================================================
このため、悪意のあるコードでユーザーの行動を覗くことができるようになる


replaceKeyboardFocusManager
特定のスレッドにKeyboardFocusManagerを設定する
   SecurityManagerがインストールされている場合、呼出し側のスレッドには、現在のKeyboardFocusManagerを置き換えるために、このアクセス権が与えられていなければならない
============================================================
!= "never"
 = "always"
 = "onUpdate"
 = "onTimer"およびnow> 'lastPersistTime'+'persistPeriod'
 = "NoMoreOftenThan"およびnow> 'lastPersistTime'+'persistPeriod'

 persistPolicyフィールドが次の内容になっている場合、MBeanは格納されません
============================================================
正規表現    
制限    
結果    
:
2
{ "boo", "and:foo" }
:
5
{ "boo", "and", "foo" }
:
-2
{ "boo", "and", "foo" }
o
5
{ "b", "", ":and:f", "", "" }
o
-2
{ "b", "", ":and:f", "", "" }
o
0
{ "b", "", ":and:f" }
============================================================
例: - 年の1日目が月曜日の場合、1日目から週1が始まります - 年の2日目が月曜日の場合、2日目から週1が始まり、1日目は前年の最後の週に含まれます - 年の4日目が月曜日の場合、4日目から週1が始まり、1日目から3日目までは前年の最後の週に含まれます - 年の5日目が月曜日の場合、5日目から週2が始まり、1日目から4日目までは週1に含まれます

 このフィールドは任意の暦体系で使用できます
============================================================
ライターに追加されるイベントの必須フィールドとオプション・フィールド
       




イベント・タイプ
必須フィールド
オプション・フィールド
必須の動作


 START_ELEMENT  
 QName name 
 名前空間、属性 
 START_ELEMENTの書込みでは、イベントの名前、名前空間、および属性がXML 1.0の有効なSTART_ELEMENTの構文で書き込まれます
============================================================
new InitialLdapContext(env, connCtls)
refException.getReferralContext(env, connCtls)
ldapContext.reconnect(connCtls);

 ここで、refExceptionはLdapReferralExceptionのインスタンス、ldapContextはLdapContextのインスタンスです
============================================================
[L, S, C, V]
 [L, S, C]
 [L, S]
 [L, C, V]
 [L, C]
 [L]
 Locale.ROOT

入力Localeが、バリアント値が下線で区切られた複数のサブタグで構成される場合は、バリアント・サブタグを1つずつ省略することで候補Localeを生成してから、元のリスト内でフル・バリアント値を持つすべての Localeオカレンスのあとにそれらを挿入します
============================================================
02:30+01:00から1時間を減算すると01:30+02:00になります
 01:30+01:00から1時間を減算すると01:30+02:00になります
 01:30+02:00から1時間を減算すると00:30+01:00になります
 02:30+01:00から3時間を減算すると00:30+02:00になります
 

 このインスタンスは不変で、このメソッド呼び出しによって影響を受けません
============================================================
汎用文字である
   それが通貨記号である('$'など)
   それが連結句読点文字である('_'など)
   数字である
   数値汎用文字である(ローマ数字文字など)
   連結マークである
   非スペーシング・マークである
  文字のisIdentifierIgnorableがtrueを返す
 

 これらの条件は、バージョン6.2のUnicode標準の文字情報に対してテストされます
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  COLUMN_NAME String =>列名
  DATA_TYPE int => java.sql.TypesからのSQLの型
  COLUMN_SIZE int =>列サイズ
============================================================
format(Object obj, StringBuffer toAppendTo, FieldPosition pos)
 formatToCharacterIterator(Object obj)
 parseObject(String source, ParsePosition pos)

 これらの一般的なメソッドによって、オブジェクトのさまざまな解析とフォーマットが可能になります
============================================================
条件:
 
基底名: foo.bar.Messages
要求されたLocale: Locale.ITALY
デフォルトのLocale: Locale.FRENCH
使用可能なリソース・バンドル: foo/bar/Messages_fr.propertiesおよびfoo/bar/Messages.properties

まず、getBundleは、次の順番でリソース・バンドルのロードを試みます
============================================================
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
 ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
 
 注: アプリケーションでは、このメソッドのJScrollPaneバージョンを使用してください
============================================================
ロケールの言語コード
小文字
大文字
説明


tr (トルコ語)
\u0069
\u0130
小文字のi ->上に点が付いた大文字のI


tr (トルコ語)
\u0131
\u0049
点のない小文字のi ->大文字のI


(すべて)
\u00df
\u0053 \u0053
小文字のシャープs -> SSの2文字


(すべて)
Fahrvergnügen
FAHRVERGNÜGEN
============================================================
PSEUDO_COLUMN short => Oracle ROWIDのような擬似列か
      
 bestRowUnknown - 擬似列であるか、またはそうでない可能性がある
       bestRowNotPseudo - 擬似列ではない
       bestRowPseudo - 擬似列である
      

COLUMN_SIZE列はその列に指定された列のサイズを表します
============================================================
例: - 月の1日目が月曜日の場合、1日目から週1が始まり、週0はありません - 月の2日目が月曜日の場合、2日目から週1が始まり、1日目は週0に含まれます - 月の4日目が月曜日の場合、4日目から週1が始まり、1日目から3日目までは週0に含まれます - 月の5日目が月曜日の場合、5日目から週2が始まり、1日目から4日目までは週1に含まれます

 このフィールドは任意の暦体系で使用できます
============================================================
例: - 年の1日目が月曜日の場合、1日目から週1が始まり、週0はありません - 年の2日目が月曜日の場合、2日目から週1が始まり、1日目は週0に含まれます - 年の4日目が月曜日の場合、4日目から週1が始まり、1日目から3日目までは週0に含まれます - 年の5日目が月曜日の場合、5日目から週2が始まり、1日目から4日目までは週1に含まれます

 このフィールドは任意の暦体系で使用できます
============================================================
オブジェクトのグループ識別子
  オブジェクトの、完全指定されたクラス名
  オブジェクトのコードの位置(クラスの位置)、コード・ベースURLパス
  オブジェクトの再起動「モード」、および
  オブジェクト固有の初期化データが格納されている、「整列化された」オブジェクト 
記述子によって指定されたオブジェクトを作成し直したり、起動したりするには、起動システムに登録された記述子を使います
============================================================
applyPatternメソッドとtoPatternメソッド(フォーマット要素がフォーマット型を指定しており、そのためサブフォーマットがapplyPatternメソッドで作成される場合)
 formatメソッドとformatToCharacterIteratorメソッド(フォーマット要素がフォーマット型を指定しておらず、そのためサブフォーマットがこれらの書式設定メソッドで作成される場合)
============================================================
ENTRY_CREATE - エントリがディレクトリ内に作成または移動された
ENTRY_DELETE - エントリがディレクトリから削除または取り出された
ENTRY_MODIFY - ディレクトリ内のエントリが変更された

 これらのイベントのコンテキストは、このパスで検出されるディレクトリと、作成、削除、または変更されるディレクトリ・エントリを検出するパスとの間の相対パスになります
============================================================
名前 
 型 


 "permissions" 
 Set<PosixFilePermission> 


 "group" 
 GroupPrincipal 



 getAttributeメソッドは、readAttributes()メソッドを呼び出したかのように、これらの属性またはBasicFileAttributeViewによって定義される任意の属性を読み取るために使用できます
============================================================
!= "never"
 = = "onTimer" && now < 'lastPersistTime' + 'persistPeriod'
 = "onUnregister"
 = = "NoMoreOftenThan"およびnow < 'lastPersistTime' + 'persistPeriod'

Model MBeanのModelMBeanInfoはファイルに格納されます
============================================================
このメソッドをcl.defineClass(name, bBuffer, pd)の形式で呼び出すと、次の文とまったく同じ結果が得られます

  ... byte[] temp = new byte[bBuffer.remaining()]; bBuffer.get(temp); return cl.defineClass(name, temp, 0, temp.length, pd);
============================================================
エスケープ(バックスラッシュ\)、
 引用符文字(単一引用符(')および二重引用符("))
 コンポーネント区切り文字(スラッシュ(/))
 
 先行する引用符、メタキャラクタに先行するエスケープ、コンポーネントの末尾のエスケープ、または引用符のないコンポーネントのコンポーネント区切り文字には、そのコンポーネントが合成名文字列に変換されるときに、前にエスケープ文字を付ける必要があります
============================================================
columnNoNulls - NULL値を許さない可能性がある
       columnNullable - 必ずNULL値を許す
       columnNullableUnknown - NULL値を許すかどうかは不明
      
REMARKS String =>列を記述するコメント(nullの可能性がある)
  COLUMN_DEF String =>列のデフォルト値
============================================================
返される値は、PseudoColumnUsage.name()によって返される列挙名に対応する
  REMARKS String =>列を記述するコメント(nullの可能性がある)
  CHAR_OCTET_LENGTH int => charの型については列の最大バイト数
  IS_NULLABLE String =>列でNULL値を許可するかどうかの判断にISOルールが使用される
============================================================
右にスクロールする場合、最後の可視要素が最初の完全な可視要素になるように、スクロールする距離を返す
 左にスクロールする場合、最初の可視要素が最後の完全な可視要素になるように、スクロールする距離を返す
 リストが空の場合は、visibleRect.widthを返す
 

 水平方向のスクロールで、レイアウト方向がVERTICALである場合、visibleRect.widthを返します
============================================================
value
language




XMLConstants.W3C_XML_SCHEMA_NS_URI ("http://www.w3.org/2001/XMLSchema")
W3C XML Schema 1.0


XMLConstants.RELAXNG_NS_URI ("http://relaxng.org/ns/structure/1.0")
RELAX NG 1.0
============================================================
XMLへのXMLSignatureの署名および整列化

 ファクトリによって作成される各XMLSignatureは、XMLSignatureオブジェクトのsignメソッドを呼び出して、署名鍵および整列化パラメータを格納するメカニズム固有のXMLSignContextオブジェクトを渡すことによって、XML表現に対して整列化し署名することもできます(DOMSignContextを参照)
============================================================
たとえば、

 
暦週の基準年の例
日付曜日フィールド値
2008-12-28日曜日暦週の基準年2008の週52
2008-12-29月曜日暦週の基準年2009の週1
2008-12-31水曜日暦週の基準年2009の週1
2009-01-01木曜日暦週の基準年2009の週1
2009-01-04日曜日暦週の基準年2009の週1
2009-01-05月曜日暦週の基準年2009の週2
============================================================
static fromメソッド:

        



@ConstructorProperties注釈を含むpublicコンストラクタ:

        



各getter用のsetter:

        



getterのみを持つインタフェース:

        




データのコレクションを表現するだけのクラスは、通常、不変にしておくことをお薦めします
============================================================
ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
 ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
 ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
 
 注: アプリケーションでは、このメソッドのJScrollPaneバージョンを使用してください
============================================================
英字
A から Z、およびa から zまでのUS-ASCII英文字
数字
0 から 9までのUS-ASCII 10進数字
英数字
すべての英字および数字の文字
未予約    
すべての英数字文字、および文字列「_-!.~'()*」内の文字
句読
文字列「,;:$&+=」内の文字
予約済み
すべての句読文字、および文字列「?/[]@」内の文字
エスケープ
エスケープされたオクテット
============================================================
新しい結果コンテナの作成(supplier())
結果コンテナへの新しいデータ要素の組み込み(accumulator())
2つの結果コンテナを1つに結合(combiner())
(オプション)コンテナに対する最終的な変換の実行(finisher())

また、コレクタにはCollector.Characteristics.CONCURRENTなどの一連の特性も含まれています
============================================================
- Relationインタフェースを実装している
 - RelationService ObjectName用として現在の関係サービスのObjectNameを持っている
 - 現在の関係サービス内で一意かつ未使用の関係IDを持っている
 - 関係タイプ用として関係サービス内で作成された関係タイプを持っている
 - 関係タイプ内で提供されたロール情報に適合するロールを持っている
============================================================
- Relationインタフェースを実装している
 - RelationService ObjectName用として現在の関係サービスのObjectNameを持っている
 - 現在の関係サービス内で一意かつ未使用の関係IDを持っている
 - 関係タイプ用として関係サービス内で作成された関係タイプを持っている
 - 関係タイプ内で提供されたロール情報に適合するロールを持っている
============================================================
'\u0030' - '\u0039'、ISO-LATIN-1数字('0' - '9')
 '\u0660' - '\u0669'、アラビア数字
 '\u06F0' - '\u06F9'、拡張アラビア数字
 '\u0966' - '\u096F'、デヴァーナーガリ数字
 '\uFF10' - '\uFF19'、全角数字
 

 そのほかにも多数の文字範囲に、数字が含まれます
============================================================
'\u0030' - '\u0039'、ISO-LATIN-1数字('0' - '9')
 '\u0660' - '\u0669'、アラビア数字
 '\u06F0' - '\u06F9'、拡張アラビア数字
 '\u0966' - '\u096F'、デヴァーナーガリ数字
 '\uFF10' - '\uFF19'、全角数字
 

 そのほかにも多数の文字範囲に、数字が含まれます
============================================================
TABLE_CAT String =>型のカタログ(nullの可能性がある)
  TABLE_SCHEM String =>型のスキーマ(nullの可能性がある)
  TABLE_NAME String =>型名
  SUPERTABLE_NAME String =>直接のスーパー・タイプ名
  
注: ドライバが型の階層をサポートしていない場合は空の結果セットが返されます
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


setDatatypeConverter

DatatypeConverter上のすべてのメソッドが使用するthe setDatatypeConverter methodを使用して、VM全体のDatatypeConverterInterfaceをコードで設定できるようになります
============================================================
値 -- Anyオブジェクト
 引数モード・フラグ?次のいずれか
   
ARG_IN.value
ARG_OUT.value
ARG_INOUT.value
ゼロ -- NamedValueオブジェクトがパラメータや戻り値でなくContextオブジェクトのプロパティを表す場合
   


NamedValueクラスは、そのフィールドにアクセスする3つのメソッドを保持します
============================================================
procedureNoNulls - NULL値を許さない
       procedureNullable - NULL値を許す
       procedureNullableUnknown - NULL値を許すかどうかは不明
      
REMARKS String =>パラメータ/列を記述するコメント
  COLUMN_DEF String =>列のデフォルト値
============================================================
propertyName - java.beans.DesignMode.PROPERTYNAME
oldValue - designTimeの以前の値
    newValue - designTimeの現在の値
 
 このメソッドがそれ自身入れ子になっているBeanContextに関連している場合、BeanContextChildがこのメソッドを呼び出すことは不当です
============================================================
InputContext.setCompositionEnabledによって、
 以前に選択済みのインプット・メソッドのisCompositionEnabledメソッドが例外をスローしないで返される場合に、ユーザー・インタフェースまたはInputContext.selectInputMethodを使って、別のインプット・メソッドからこのインプット・メソッドに切り替えるとき
============================================================
1つは記述子名がGENERIC、displayNameがjmx.modelmbean.genericの通知
  もう1つは記述子名がATTRIBUTE_CHANGE、displayNameがjmx.attribute.changeの標準属性変更通知
 
 すべてのModelMBeanInfo実装は、アプリケーションによって指定された通知に、必ずこの2つの通知を追加します
============================================================
objがnullでない
objがOpenMBeanParameterInfoインタフェースも実装している
名前が等しい
公開型が等しい
デフォルト値、最小値、最大値、および正当な値が等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanParameterInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
objがnullでない
objがOpenMBeanParameterInfoインタフェースも実装している
名前が等しい
公開型が等しい
デフォルト値、最小値、最大値、および正当な値が等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanParameterInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
Messaging.SYNC_NONE
Messaging.SYNC_WITH_TRANSPORT
Messaging.SYNC_WITH_SERVER
Messaging.SYNC_WITH_TARGET

 サーバーでは、どの範囲(スコープ)の場合も、ターゲットとなるオペレーション呼び出しからの戻り値によって応答が作成されますが、その応答はクライアントに返されません
============================================================
暦週の基準年のWeekFieldsの例
日付曜日
最初の曜日: 月曜日最小日数: 4最初の曜日: 月曜日最小日数: 5
2008-12-31水曜日
2009年の週12008年の週53
2009-01-01木曜日
2009年の週12008年の週53
2009-01-04日曜日
2009年の週12008年の週53
2009-01-05月曜日
2009年の週22009年の週1
============================================================
00:30+02:00に1時間を加算すると01:30+02:00になる
 01:30+02:00に1時間を加算すると01:30+01:00になる
 01:30+01:00に1時間を加算すると02:30+01:00になる
 00:30+02:00に3時間を加算すると02:30+01:00になる
 

 このインスタンスは不変で、このメソッド呼び出しによって影響を受けません
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  COLUMN_NAME String =>列名
  KEY_SEQ short =>主キー内の連番(値1は主キーの最初の列、値2は主キーの2番目の列を表す)
============================================================
severityNumber
ModelMBeanNotificationInfo
0 - 6の値のうち0: 未知、1:回復不能、2:クリティカル、障害、3:メジャー、重大、4:マイナー、非重要、エラー、5:警告、6:通常、クリア済み、情報
targetObjectObjectModelMBeanOperationInfo
メソッドはこのオブジェクトに対して実行される
============================================================
zoneStrings[i][0] - タイムゾーンID
zoneStrings[i][1] - 標準時刻のゾーンの長い名前
zoneStrings[i][2] - 標準時刻のゾーンの短い名前
zoneStrings[i][3] - 夏時間のゾーンの長い名前
zoneStrings[i][4] - 夏時間のゾーンの短い名前

 ゾーンIDはローカライズされていません
============================================================
zoneStrings[i][0] - タイムゾーンID
zoneStrings[i][1] - 標準時刻のゾーンの長い名前
zoneStrings[i][2] - 標準時刻のゾーンの短い名前
zoneStrings[i][3] - 夏時間のゾーンの長い名前
zoneStrings[i][4] - 夏時間のゾーンの短い名前

 ゾーンIDはローカライズされていません
============================================================
指定された名前空間URIに対するgetPrefix(namespaceURI)戻り値
       


名前空間URIパラメータ
返される接頭辞の値




<デフォルトの名前空間URI>
XMLConstants.DEFAULT_NS_PREFIX ("")
       


バインドされた名前空間URI
現在のスコープ内の名前空間URIにバインドされた接頭辞
============================================================
復帰文字と改行文字のペア(CR-LF)は、「次の行の第1列に移動する」ことを意味する
 
 復帰(CR)文字は、それ自体で「次の行の第1列に移動する」ことを意味する
 
 改行(LF)文字は、それ自体で「次の行の第1列に移動する」ことを意味する
 


 クライアントは、上記の要件に含まれない、すべてのプレーン・テキスト印刷データの書式設定を実行する必要があります
============================================================
例

 
Jarエントリ
 jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class
Jarファイル
 jar:http://www.foo.com/bar/baz.jar!/
Jarディレクトリ
 jar:http://www.foo.com/bar/baz.jar!/COM/foo/

!/は、区切り文字です
============================================================
java.awt.event.KeyEvent.VK_ENTER
 java.awt.event.KeyEvent.VK_TAB
 java.awt.event.KeyEvent.VK_SPACE
 
 または、java.awt.event.KeyEvent.getExtendedKeyCodeForCharを呼び出すことで、キー・コードを取得することもできます
============================================================
java.awt.event.KeyEvent.VK_ENTER
 java.awt.event.KeyEvent.VK_TAB
 java.awt.event.KeyEvent.VK_SPACE
 
 または、java.awt.event.KeyEvent.getExtendedKeyCodeForCharを呼び出すことで、キー・コードを取得することもできます
============================================================
クラスfoo.bar.Messages_fr
ファイルfoo/bar/Messages_fr.properties
クラスfoo.bar.Messages
ファイルfoo/bar/Messages.properties

getBundleはfoo/bar/Messages_fr.propertiesを見つけ、ResourceBundleインスタンスを作成します
============================================================
file:///C:/Documents%20and%20Settings/UncleBob/BobsApp/Test.java


jar:///C:/Documents%20and%20Settings/UncleBob/lib/vendorA.jar!com/vendora/LibraryClass.class


 次のようにはなりません(括弧内は理由)
============================================================
SOAPPartオブジェクト
  SOAPEnvelopeオブジェクト
  SOAPBodyオブジェクト
  SOAPHeaderオブジェクト
 
 場合によっては、SOAPHeaderオブジェクトやSOAPBodyオブジェクトに、追加のエントリであらかじめ作成されたメッセージを生成する特殊なMessageFactoryオブジェクトが含まれていることがあります
============================================================
objがnullでない
objがOpenMBeanOperationInfoインタフェースも実装している
名前が等しい
シグニチャが等しい
返される公開型が等しい
影響が等しい


 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanOperationInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
java.util.logging.SimpleFormatter.format="%1$tc %2$s%n%4$s: %5$s%6$s%n"
この例は、1行目にはタイムスタンプ(1$)とソース(2$)、2行目にはログ・レベル(4$)とログ・メッセージ(5$)、使用可能な場合は、その後にスロー可能オブジェクトとそのバックトレース(6$)を含む、2行を出力します
============================================================
悪意のあるコードがシステムを制御し、ほかのプログラムを実行させ、ディスプレイを読み込み、ユーザーからのマウスおよびキーボードによるアクセスを拒否できるようになる場合がある


fullScreenExclusive
フル・スクリーン排他モードへの切替え
フル・スクリーン排他モードに切り替え、低レベルのグラフィック・カード・メモリーへの直接アクセスを可能にする
============================================================
uuuu-MM-dd'T'HH:mm
uuuu-MM-dd'T'HH:mm:ss
uuuu-MM-dd'T'HH:mm:ss.SSS
uuuu-MM-dd'T'HH:mm:ss.SSSSSS
uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS

 使用される形式は、完全な時間値を出力するもっとも短いものになり、省略部分はゼロであると暗に示されます
============================================================
objがnullでない
objがOpenMBeanOperationInfoインタフェースも実装している
名前が等しい
シグニチャが等しい
返される公開型が等しい
影響が等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanOperationInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
accessClassInPackage.{package name}
クラス・ローダーがセキュリティ・マネージャのcheckPackageAccessメソッドを呼び出したときに、クラス・ローダーのloadClassメソッドを介して、指定されたパッケージへアクセスを許可する
通常はアクセスできないパッケージ内のクラスに、コードからアクセスできるようになります
============================================================
AbstractDocument.ContentElementName
 AbstractDocument.ParagraphElementName
 AbstractDocument.SectionElementName
 StyleConstants.ComponentElementName
 StyleConstants.IconElementName
============================================================
プリミティブ配列でない場合: <dimension>-dimension array of <element_class_name>
プリミティブ配列の場合: <dimension>-dimension array of <primitive_type_of_the_element_class_name>


 例として、次のコードの抜粋を参照してください
============================================================
java.awt.event.KeyEvent.VK_ENTER
java.awt.event.KeyEvent.VK_TAB
java.awt.event.KeyEvent.VK_SPACE

 代わりに、java.awt.event.KeyEvent.getExtendedKeyCodeForCharを呼び出すことでキー・コードを取得することもできます
============================================================
java.util.logging.ConsoleHandler.level=INFO 
   java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter 


 カスタム・ハンドラ(例: com.foo.MyHandler)の場合、プロパティは次のようになります
============================================================
TYPE_CAT String =>型のカタログ(nullの可能性がある)
  TYPE_SCHEM String =>型のスキーマ(nullの可能性がある)
  TYPE_NAME String =>型名
  CLASS_NAME String => Javaクラス名
  DATA_TYPE int => java.sql.Typesで定義されている型値
============================================================
(すべての日時データ型でタイムゾーンはオプション)





データ型
年
月
日
時間
分
秒


DatatypeConstants.DURATION
X
X
X
X
X
X


DatatypeConstants.DURATION_DAYTIME


X
X
X
X


DatatypeConstants.DURATION_YEARMONTH
X
X
============================================================
CachedRowSet実装またはこの実装から派生した実装用の最適のプロバイダ
  XMLの読取りと書込みに使用されるXMLプロバイダ(WebRowSetオブジェクトなど)
 
 JDBC RowSet実装には、この要件を満たすSyncProvider実装RIOptimisticProviderおよびRIXmlProviderが含まれる点に注意してください
============================================================
MIDIファイル形式のプロパティ

プロパティ・キー
値の型
説明


"author"
String
このファイルの作成者の名前


"title"
String
このファイルのタイトル


"copyright"
String
著作権メッセージ


"date"
Date
録音またはリリースの日付


"comment"
String
任意のテキスト
============================================================
Unicodeサポート 
 このクラスは、『Unicode Technical Standard#18: Unicode Regular Expression』(ユニコード・テクニカル・スタンダードNo.18: ユニコード正規表現ガイドライン)のLevel 1および、リリース2.1『Canonical Equivalents』(正規等価)に適合しています
============================================================
要求されていて適切な場合に、サービス用のストリームを構築する
 メソッドに対する各呼出しで、同じオブジェクトが返されるようにする
 複数のスレッドからDocへのアクセス可能にする
 データとdocフレーバの一致確認をいくつか実行する
 
 ほかのジョブでdocオブジェクトを再利用するか、MultiDocを必要とするクライアントは、このクラスを使用しません
============================================================
1- コメント(COMMENT) 2- 文字セクション(CHARACTERS) 3- CDATAセクション(もう1つのCHARACTERS) 4- 次の文字セクション(もう1つのCHARACTERS) 5- END_ELEMENT
注:  空の要素(<tag/>など)は2つの別個のイベント、START_ELEMENTとEND_ELEMENTで報告されます
============================================================
1- コメント(COMMENT) 2- 文字セクション(CHARACTERS) 3- CDATAセクション(もう1つのCHARACTERS) 4- 次の文字セクション(もう1つのCHARACTERS) 5- END_ELEMENT
注:  空の要素(<tag/>など)は2つの別個のイベント、START_ELEMENTとEND_ELEMENTで報告されます
============================================================
圧縮方式
圧縮方式文字列 説明 イメージ型
BI_RGB 圧縮解除されたRLE <= 8ビット/サンプル
BI_RLE8 8ビット・ラン・レングス・エンコーディング <= 8ビット/サンプル
BI_RLE4 4ビット・ラン・レングス・エンコーディング <= 4ビット/サンプル
BI_BITFIELDS パケット・データ  16または32ビット/サンプル
============================================================
java.util.logging.MemoryHandler.level=INFO 
   java.util.logging.MemoryHandler.formatter=java.util.logging.SimpleFormatter 


 カスタム・ハンドラ(例: com.foo.MyHandler)の場合、プロパティは次のようになります
============================================================
setDefaultUncaughtExceptionHandler
キャッチされない例外により、突然スレッドが終了したときに使用されるデフォルトのハンドラを設定する
攻撃者は、スレッドの終了を妨害できる、悪意のあるキャッチされない例外ハンドラを登録できます


preferences
java.util.prefsへのアクセスに必要なアクセス権を表す
============================================================
java.util.logging.SimpleFormatter.format="%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n"
次の例は、前の例と同じように2行を出力しますが、異なる日付/時間のフォーマットを使用し、スロー可能オブジェクトとそのバックトレースは出力しません
============================================================
java.util.logging.SocketHandler.level=INFO 
   java.util.logging.SocketHandler.formatter=java.util.logging.SimpleFormatter 


 カスタム・ハンドラ(例: com.foo.MyHandler)の場合、プロパティは次のようになります
============================================================
java.util.logging.StreamHandler.level=INFO 
   java.util.logging.StreamHandler.formatter=java.util.logging.SimpleFormatter 


 カスタム・ハンドラ(例: com.foo.MyHandler)の場合、プロパティは次のようになります
============================================================
ノード型
コンテンツ



 ELEMENT_NODE、ATTRIBUTE_NODE、ENTITY_NODE、ENTITY_REFERENCE_NODE、DOCUMENT_FRAGMENT_NODE
COMMENT_NODEノードとPROCESSING_INSTRUCTION_NODEノードを除く、すべての子ノードのtextContent属性値の連結
============================================================
ノード型
コンテンツ



 ELEMENT_NODE、ATTRIBUTE_NODE、ENTITY_NODE、ENTITY_REFERENCE_NODE、DOCUMENT_FRAGMENT_NODE
COMMENT_NODEノードとPROCESSING_INSTRUCTION_NODEノードを除く、すべての子ノードのtextContent属性値の連結
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)(a == b)||(Double.isNaN(a)&& Double.isNaN(b))の場合、このメソッドでは2つのdouble要素aとbは等価とみなされます
============================================================
イベント型
ソース型
ディスパッチ方法


ActiveEvent
任意
event.dispatch()


その他
Component
source.dispatchEvent(AWTEvent)


その他
MenuComponent
source.dispatchEvent(AWTEvent)


その他
その他
処理されない(無視される)
============================================================
InputContext.endCompositionによって、
 別のクライアント・コンポーネントに切り替える場合に、InputContext.dispatchEventにより
 ユーザー・インタフェースまたはInputContext.selectInputMethodを使って、このインプット・メソッドから別のインプット・メソッドに切り替えるとき
============================================================
"ignore-unknown-character-denormalizations"



true
[必須] (デフォルト)「XML 1.1」がサポートされているときに完全な正規化を検証中に、プロセッサで正規化プロパティを判定できない文字が検出された場合、プロセッサはこれらの文字によって引き起こされる可能性のある不完全な正規化をすべて無視します
============================================================
public int getType()
  public int getFirstRow();
  public int getLastRow();
  public int getFirstColumn();
  public int getLastColumn();
 
 getType()で返されるモデル変更タイプは、次のどれかになります
============================================================
暦ID
カレンダ・タイプ
ロケール拡張子、Localeを参照
説明




Hijrah-umalqura
islamic-umalqura
ca-islamic-umalqura
イスラム暦 - サウジ・アラビアのウム・アルクラ暦



追加のバリアントはChronology.getAvailableChronologies()から使用できます
============================================================
ビューがScrollableを実装する場合は、getPreferredScrollableViewportSize、getScrollableTracksViewportWidth、およびgetScrollableTracksViewportHeightの組み合わせが使用される
   そうでない場合は、getPreferredSizeが使用される
============================================================
JTextField.LEFT
JTextField.CENTER
JTextField.RIGHT
JTextField.LEADING
JTextField.TRAILING

 配置が設定されるとinvalidateとrepaintが呼び出され、PropertyChangeイベント(horizontalAlignment)がトリガーされます
============================================================
SupportedOptionString:
Identifiers
Identifiers:
 Identifier
 Identifier . Identifiers
Identifier:
キーワードやリテラルといった、構文上の識別子
 

 ツールは、この情報を使って、ユーザーが指定したオプションをプロセッサが認識するかどうかを判定します
============================================================
java.util.logging.FileHandler.level=INFO 
   java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter 


 カスタム・ハンドラ(例: com.foo.MyHandler)の場合、プロパティは次のようになります
============================================================
0xF0: システム・エクスクルーシブ・メッセージ(MIDIワイヤー・プロトコルでの場合と同じ)
0xF7: 特別なシステム・エクスクルーシブ・メッセージ


 MIDIワイヤー・プロトコルを使用して受信されたシステム・エクスクルーシブ・データがJava Soundによって使用されると、データは1つ以上のSysexMessagesに配置されます
============================================================
カレンダ・フィールドの解決

 カレンダ・フィールドから日付および時間を計算する際、計算に必要な情報が不足している(年と月だけで日がないなど)、または情報に一貫性がない場合(たとえば「Tuesday, July 15, 1996 (Gregorian)」と指定されているが、実際にはJuly 15, 1996はMondayであるなど)があります
============================================================
SHORTはすべて数値で、12.13.52や3:30pmなど
 MEDIUMはそれより長い形式で、Jan 12, 1952など
 LONGはさらに長い形式で、January 12, 1952や3:30:32pmなど
 FULLはほぼ完全に指定する形式で、Tuesday, April 12, 1952 AD or 3:30:42pm PSTなど
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)(a == b)||(Float.isNaN(a)&& Float.isNaN(b))の場合、このメソッドでは2つのfloat要素aとbは等価とみなされます
============================================================
MIDIデータ・ファイルからのシーケンスの取得
再生の開始と停止
シーケンス上の任意の位置への移動
再生のテンポ(スピード)の変更
内部クロックまたは受信したMIDIメッセージへの再生の同期化
ほかのデバイスのタイミングの制御

 さらに、直接に、またはSequencerがアクセスできるオブジェクトを通じて間接的に、次の操作もサポートされます
============================================================
宣言型による非整列化を実装します

 
 このメソッドはUnmarshaller.unmarshal(Node, Class)と類似していますが、さらにXMLノードと生成されたJAXBオブジェクト間の関連付けを保持し、updateXML(Object, Object)またはupdateJAXB(Object)による後の更新処理を可能にします
============================================================
YES --- パラメータまたは列がNULLを許可する場合
        NO --- パラメータまたは列がNULLを許可しない場合
        空の文字列 --- パラメータまたは列がNULL値を許可するかどうか不明である場合
       
SPECIFIC_NAME String =>この関数をそのスキーマ内で一意に識別する名前
============================================================
isRootVisible()
setRootVisible()
scrollPathToVisible()
scrollRowToVisible()
getVisibleRowCount()
setVisibleRowCount()

JTreeの次のメソッドは「visible」を使用して「viewable」を表します(展開された親の下)
============================================================
最初の引数が有限でゼロより小さい場合
 
 2番目の引数が有限の偶数の整数の場合、結果は最初の引数の絶対値を2番目の引数で累乗した値に等しくなります

 2番目の引数が有限の奇数の整数の場合、結果は最初の引数の絶対値を2番目の引数で累乗した値の負の値に等しくなります

 2番目の引数が有限であり、かつ整数ではない場合、結果はNaNになります
============================================================
2008-12-03T10:30+01:00
2008-12-03T11:00+01:00
2008-12-03T12:00+02:00
2008-12-03T11:30+01:00
2008-12-03T12:00+01:00
2008-12-03T12:30+01:00

 2番目と3番目の値は、時系列上の同じインスタントを表しています
============================================================
objがnullでない
objがOpenMBeanInfoインタフェースも実装している
クラス名が等しい
属性、コンストラクタ、オペレーション、および通知に関する情報が等しい


 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
最初の引数が有限でゼロより小さい場合
 
 2番目の引数が有限の偶数の整数の場合、結果は最初の引数の絶対値を2番目の引数で累乗した値に等しくなります

 2番目の引数が有限の奇数の整数の場合、結果は最初の引数の絶対値を2番目の引数で累乗した値の負の値に等しくなります

 2番目の引数が有限であり、かつ整数ではない場合、結果はNaNになります
============================================================
"roc"
Calendar.ERA
0
R.O.C.前


1
R.O.C.


"islamic"
Calendar.ERA
0
AH前


1
ヒジュラ暦紀元(AH)


"gregory"のカレンダ・フィールド値の名前は、DateFormatSymbolsProviderによって指定された日付/時間記号と一致している必要があります
============================================================
objがnullでない
objがOpenMBeanInfoインタフェースも実装している
クラス名が等しい
属性、コンストラクタ、オペレーション、および通知に関する情報が等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
https://docs.oracle.com/javase/1.3/docs/guide/collections/designfaq.html#28


 相対URI

 
../../../demo/jfc/SwingSet2/src/SwingSet2.java    (2)
 

 をこの結果に対して解決すると、次のようになります
============================================================
isLetter(codePoint)が次を返す:  true
 getType(codePoint)が次を返す:  LETTER_NUMBER
 参照される文字が通貨記号である('$'など)
  参照文字が連結句読点文字である('_'など)
 

 これらの条件は、バージョン6.2のUnicode標準の文字情報に対してテストされます
============================================================
InitialContext ic = new InitialContext(); Object obj = ic.lookup(); 
 nameが空の場合は、このコンテキストの新しいインスタンスを返します(これは、このコンテキストと同じネーミング・コンテキストを表しますが、その環境を個別に変更したり、同時にアクセスしたりできます)
============================================================
プロキシのクラスは、リモート・オブジェクトのクラスのクラス・ローダーによって定義される

 プロキシは、リモート・オブジェクトのクラスが実装しているリモート・インタフェースのすべてを実装する

 プロキシの呼出しハンドラは、RemoteRefを使って構築されたRemoteObjectInvocationHandlerインスタンスになる
============================================================
eval(Reader)eval(String)
eval(String, Bindings)eval(Reader, Bindings) は、抽象メソッド eval(Reader,ScriptContext)またはSimpleScriptContextを使用してeval(String, ScriptContext) で実装されます
============================================================
WHEN_IN_FOCUSED_WINDOW
WHEN_FOCUSED
WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

conditionがWHEN_IN_FOCUSED_WINDOWであり、mapがComponentInputMapでない場合、IllegalArgumentExceptionがスローされます
============================================================
フォーカスの所有者("focusOwner")
パーマネント・フォーカスの所有者("permanentFocusOwner")
フォーカスされたWindow ("focusedWindow")
アクティブWindow ("activeWindow")

 listenerがnullの場合、例外はスローされず、何も処理は行われません
============================================================
フォーカスの所有者("focusOwner")
パーマネント・フォーカスの所有者("permanentFocusOwner")
フォーカスされたWindow ("focusedWindow")
アクティブWindow ("activeWindow")

 listenerがnullの場合、例外はスローされず、何も処理は行われません
============================================================
monitor
スレッド・スタック・トレース、ロードされたすべてのクラス名のリスト、Java仮想マシンへの入力引数など、Java仮想マシンに関する実行時情報を取得する機能
悪意のあるコードを使って実行時情報を監視し、脆弱性を発見できる



 通常、プログラマは直接ManagementPermissionオブジェクトを作成しません
============================================================
objがnullでない
objがOpenMBeanConstructorInfoインタフェースも実装している
名前が等しい
シグニチャが等しい


 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanConstructorInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
印刷ジョブが正確な解像度をサポートせず、Fidelityがtrueに設定されている場合、ジョブはエラーになる
 
 要求されている最小の解像度よりも高い解像度をサポートするプリンタをクライアント側で指定する場合は、この属性を検索要求から除外し、サポートされている解像度を直接照会し、クライアントの要求を満たすために最適な解像度を指定
============================================================
クラスには、そのロード元(可能な場合)となるコード・ベースURLが付加される
  MarshalledObjectにあるリモート・オブジェクトは、すべてそのスタブの直列化されたインスタンスで表現される
 
オブジェクトのコピーをgetメソッドで取得する場合、クラスがローカルに利用可能でなければ、適切な場所からクラスをロードします
============================================================
水平線
ルート・ノードの子を区分する水平線が描かれる


なし
ノード間に視覚的な指示を与える線を描かない



 通常、JTreeからTreeUIを取得してMetalTreeUIのインスタンスにキャストするのは実際的な方法ではないので、クライアント・プロパティJTree.lineStyleを使用してこのプロパティを有効にします
============================================================
objがnullでない
objがOpenMBeanConstructorInfoインタフェースも実装している
名前が等しい
シグニチャが等しい

 これらの条件が満たされていれば、このequalsメソッドは、OpenMBeanConstructorInfoインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
大文字の'A' - 'Z' ('\u0041' - '\u005a')、
    小文字の'a' - 'z' ('\u0061' - '\u007a')、
    数字の'0' - '9' ('\u0030' - '\u0039')、
 
 名前付きの前方参照を行う正規表現グループも、グループ番号で説明するように番号付けされます
============================================================
SUCCESS_NO_INFOの値 -- コマンドが正常に処理されたが、影響を受けた行数が不明なことを示します
 
 バッチ更新内のコマンドの1つが正常に実行できなかった場合、このメソッドはBatchUpdateExceptionをスローし、JDBCドライバはバッチ内の残りのコマンドの処理を継続することも、中止することもできます
============================================================
SUCCESS_NO_INFOの値 -- コマンドが正常に処理されたが、影響を受けた行数が不明なことを示します
 
 バッチ更新内のコマンドの1つが正常に実行できなかった場合、このメソッドはBatchUpdateExceptionをスローし、JDBCドライバはバッチ内の残りのコマンドの処理を継続することも、中止することもできます
============================================================
データ・ラインでサポートされるオーディオ形式
  その内部バッファの最小サイズと最大サイズ
 
Line.Infoは記述するラインのクラスを認識しているため、DataLine.Infoオブジェクトは、SourceDataLine、TargetDataLine、およびClipなどのDataLineサブインタフェースを記述できます
============================================================
Proxy.newProxyInstance(mxbeanInterface.getClassLoader(), new Class[] { mxbeanInterface }, handler)


 ここで、handlerはMXBeanインタフェースへのメソッド呼出しのディスパッチ先のInvocationHandlerです
============================================================
<MLET CODE = class | OBJECT = serfile ARCHIVE = "archiveList" [CODEBASE = codebaseURL] [NAME = mbeanname] [VERSION = version] > [arglist] </MLET>
 
 以下にそれぞれの意味を示します
============================================================
TimesRoman (Serifを使用)
 Helvetica (SansSerifを使用)
 Courier (Monospacedを使用)
 
 また、フォント名ZapfDingbatsは1.1では非推奨ですが、文字はUnicodeの0x2700以降で定義されており、Java 1.1から、それらの文字をサポートしています
============================================================
コンポーネント型
スキームString
スキーム固有部分    String
機関String
ユーザー情報String
ホストString
ポートint
パスString
クエリーString
フラグメントString


 指定されたインスタンスでは、どの特定のコンポーネントも未定義か定義済みであり、個別の型の値を持ちます
============================================================
たとえば、次のURI

 
https://docs.oracle.com/javase/1.3/docs/guide/index.html


 を次のベースURIに対して相対化すると、

 
http://java.sun.com/j2se/1.3


 相対URI docs/guide/index.htmlが生成されます
============================================================
プリミティブ型のラッパー・クラス(Integerなど)
      String
 TypeMirror
 VariableElement (enum定数を表す)
      AnnotationMirror
 List<? extends AnnotationValue> (値が配列の場合、宣言されている順序で要素を表す)
============================================================
カーソルのホット・スポットが、前のdragEnter()呼出しに関連したドロップ・サイトの操作可能な部分と交差しなくなった
 
 または
 
前のdragEnter()呼出しに関連したドロップ・サイトがアクティブでなくなった
 
 または
 
 前のdragEnter()呼出しに関連したドロップ・サイトでドラッグが拒否された
============================================================
カーソルのホット・スポットが、前のdragEnter()呼出しに関連したドロップ・サイトの操作可能な部分と交差しなくなった
 
 または
 
前のdragEnter()呼出しに関連したドロップ・サイトがアクティブでなくなった
 
 または
 
 前のdragEnter()呼出しに関連したドロップ・サイトでドラッグが拒否された
============================================================
JAXB要素をルートとするコンテンツ・ツリーの整列化

 オーバーロードされたMarshaller.marshal(java.lang.Object,...)メソッドの最初のパラメータは、JAXBIntrospector.isElement(java.lang.Object)によって計算されたJAXB要素である必要があります
============================================================
プリミティブ式: 2
クラス・コンストラクタ: new java.awt.Color(127,127,34)
staticフィールド: java.awt.Color.orange
staticメソッド: javax.swing.Box.createRigidArea(new java.awt.Dimension(0, 5))
============================================================
コアおよび最大プール・サイズ
ThreadPoolExecutorは、corePoolSize (getCorePoolSize()を参照)とmaximumPoolSize (getMaximumPoolSize()を参照)によって設定された境界に従って、プール・サイズ(getPoolSize()を参照)を自動的に調整します
============================================================
DataFlavor.stringFlavor
DataFlavor.plainTextFlavor (非推奨)

java.awt.datatransfer.StringSelectionと同様に、必要なフレーバがDataFlavor.plainTextFlavorまたは同等のフレーバである場合は、Readerが返されます
============================================================
LT - 西ヨーロッパ(日本語、中国語、韓国語でも使用)
 RT - 中東(アラビア語、ヘブライ語)
 TR - 日本語、中国語、韓国語
 TL - モンゴル語
 
 外見と制御コードが方向によって変わるコンポーネントではisLeftToRight()メソッドとisHorizontal()メソッドを使用して動作を決定します
============================================================
システム・プロパティ: システム・プロパティjavax.xml.accessExternalStylesheetによって、このプロパティの値を設定またはオーバーライドできます
 

${JAVA_HOME}/lib/jaxp.properties: この構成ファイルは、標準のjava.util.Properties形式です
============================================================
たとえば、プロパティに次が指定されている場合:
 
 ここで、「SPI」はインストールされているSPIプロバイダに実装されているロケールに依存するサービスを表し、「JRE」はJava Runtime Environmentのロケールに依存するサービスを表し、SPIプロバイダのロケールに依存するサービスが最初に検索されます
============================================================
http://java.sun.com/j2se/1.3/ docs/guide/collections/designfaq.html#28 ../../../demo/jfc/SwingSet2/src/SwingSet2.java file:///~/calendar

 階層URIは、構文に従ってさらに解析されます
============================================================
ArithmeticException例外は次の条件に当てはまる場合にスローされる
  
abs(n) > 999999999
mc.precision == 0かつn < 0
mc.precision> 0、かつnがmc.precisionの10進桁数より大きい
  
 nが0の場合、thisが0でもONEが返される
============================================================
StackメソッドとDequeメソッドの比較

 Stackメソッド
 等価なDequeメソッド


push(e)
addFirst(e)


pop()
removeFirst()


peek()
peekFirst()


両端キューがキューまたはスタックとして使用される場合、peekメソッドも同様に機能します
============================================================
modifyThread
Threadのinterrupt、stop、suspend、resume、setDaemon、setPriority、setName、およびsetUncaughtExceptionHandlerメソッドの呼び出しなどによるスレッドの変更
攻撃者は、システム内の任意のスレッドの動作を変更できます
============================================================
プリミティブ配列でない場合: 1-dimension array of <element_class_name>
プリミティブ配列の場合: 1-dimension array of <primitive_type_of_the_element_class_name>


 例として、次のコードの抜粋を参照してください
============================================================
grid offset = [period - (region offset modulo period)] modulo period)

  sourceXSubsamplingまたはsourceYSubsamplingのいずれかが0または負の場合、IllegalArgumentExceptionがスローされます
============================================================
SpinnerNumberModel => JSpinner.NumberEditor
 SpinnerDateModel => JSpinner.DateEditor
 SpinnerListModel => JSpinner.ListEditor
 その他すべて => JSpinner.DefaultEditor
============================================================
メソッドのエントリ(enteringメソッド)、メソッドの復帰(exitingメソッド)、および例外のスロー(throwingメソッド)を追跡するための簡易メソッド
 
     最後に、開発者がただ単純な文字列を特定のログ・レベルでロギングする、といった非常に単純な場合に使用するための、一連の簡易メソッドが存在する
============================================================
defaultLoader引数がnull以外で、そのローダーを使用して、指定されたインタフェースをすべて解決できる場合

 
解決されたインタフェースがすべてpublicの場合は、まずProxy.getProxyClassを使用して、コードベース・ローダーからそのインタフェースの動的プロキシ・クラスを取得しようとする
============================================================
setSyncFactory
SyncFactoryメソッドsetJNDIContextおよびsetLoggerの呼出しを許可します
SyncProvider実装の取得元として使用可能なJNDIコンテキストと、SyncProvider実装によって使用されるログ・オブジェクトを指定することをアプリケーションに許可します
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


setHostnameVerifier
HttpsURLConnectionによって接続しようとしているホストと、サーバー証明書の共通名フィールドとの間の不一致を許容するかどうかを判断するために、コールバックを設定できる
============================================================
)

 変更可能なコレクションを実装するには、上記に加えて、このクラスのaddメソッドをオーバーライドすることと(オーバーライドしなかった場合は、UnsupportedOperationExceptionがスローされる)、iteratorメソッドで返されるイテレータがremoveメソッドを実装している必要があります
============================================================
データベースとの接続を確立する
    PreparedStatementオブジェクトを作成し、プレースホルダー・パラメータを設定する
    ResultSetオブジェクトを作成する文を実行する
 
executeメソッドは、成功した場合、適切なprivate JdbcRowSetフィールドに次の項目を設定します
============================================================
com.widget.ldap.ldapURLContextFactory
  com.wiz.jndi.ldap.ldapURLContextFactory
  com.sun.jndi.url.ldap.ldapURLContextFactory

 パッケージ接頭辞がどれも成功しない場合、nullが返されます
============================================================
クライアント認証を必須にする
  クライアント認証を要求する
  クライアント認証を不要にする
 

setWantClientAuth(boolean)の場合とは異なり、このオプションが設定されていて、かつクライアント認証情報が提供されない場合は、ネゴシエーションが停止し、エンジンは、終了プロシージャを開始します
============================================================
システム・プロパティ: システム・プロパティjavax.xml.accessExternalSchemaによって、このプロパティの値を設定またはオーバーライドできます
 

${JAVA_HOME}/lib/jaxp.properties: この構成ファイルは、標準のjava.util.Properties形式です
============================================================
tryAcquire(int)
 tryRelease(int)
 tryAcquireShared(int)
 tryReleaseShared(int)
 isHeldExclusively()


 これらの各メソッドは、デフォルトではUnsupportedOperationExceptionをスローします
============================================================
MenuShortcut ms = new MenuShortcut(KeyEvent.getExtendedKeyCodeForChar('?'), false);

KeyEventの定数として定義されたキー・コードまたは拡張キー・コードで作成されたショートカットは、現在のキーボード配置にかかわらず動作します
============================================================
アクセス権ターゲット名
アクセス権により許可される操作
このアクセス権を許可した場合のリスク


createAccessControlContext
AccessControlContextの作成
このアクセス権はDomainCombinerを使用してAccessControlContextをインスタンス化する
============================================================
「validity」プロパティが存在し、かつ「有効」である場合:
 
 「member type definition」が存在する場合:
 
{name}が存在しない場合は、「member type definition」プロパティの{name}プロパティと{target namespace}プロパティを公開する
============================================================
s.getClass().getInterfaces()[0]

 という式の値はFloorWaxインタフェースを表すClassオブジェクトであり、
 
s.getClass().getInterfaces()[1]

 という式の値は、DessertToppingインタフェースを表すClassオブジェクトです
============================================================
modifyThreadGroup
ThreadGroupのdestroy、getParent、resume、setDaemon、setMaxPriority、stop、およびsuspendメソッドの呼び出しなどによるスレッド・グループの変更
攻撃者は、スレッド・グループを作成してその実行優先順位を設定できます
============================================================
objがnullでない
objがTabularDataインタフェースも実装している
表型が等しい
内容(すべてのCompositeData値)が等しい

 これらの条件が満たされていれば、このequalsメソッドは、TabularDataインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
pkg.protocol.ServerProvider

newJMXConnectorServerのenvironmentパラメータにキーjmx.remote.protocol.provider.class.loaderが含まれる場合、関連付けられた値がプロバイダをロードするためのクラス・ローダーになります
============================================================
改行(ライン・フィード)文字 (「\n」)

    直後に改行文字が付いたキャリッジ・リターン文字 (「\r\n」)

    単独のキャリッジ・リターン文字 (「\r」)

    次行文字 (「\u0085」)

    行区切り文字 (「\u2028」)

    段落区切り文字 (「\u2029」)
============================================================
クライアント・コンポーネントがFOCUS_GAINEDイベントを受け取る際に、InputContext.dispatchEventにより
 ユーザー・インタフェースまたはInputContext.selectInputMethodを使って、別のインプット・メソッドからこのインプット・メソッドに切り替えるとき
============================================================
進行中の要求がすべて完了するまで待機する
インタセプタごとにInterceptor.destroyオペレーションを呼び出す
ORBの破棄を完了する

 破壊されるORBで実装されたオブジェクトのオブジェクト参照に対してInterceptor.destroy内部からメソッドを呼び出すと、不確定な結果が生じます
============================================================
より細かくカスタマイズする場合は、レンダリングまたはペイント・コードを使用し、JComponent.isPaintingForPrint()の値に基づいて外観をカスタマイズできます
 
 また、このメソッドを呼び出す前に、まず表の状態を変更(セル編集の取消し、ユーザーによる適切な表サイズの設定など)できます
============================================================
1    
リテラル・エスケープ    
\x
2    
グループ化
[...]
3    
範囲
a-z
4    
論理和
[a-e][i-u]
5    
論理積
[a-z&&[aeiou]]

 実際には、異なるメタキャラクタのセットは、文字クラスの外部ではなく内部に存在することに留意してください
============================================================
enableContextClassLoaderOverride
スレッドのコンテキスト・クラス・ローダー・メソッドのサブクラス実装
コンテキスト・クラス・ローダーは、システム・クラス・ローダーに存在しない可能性のあるリソースを探す必要があるときに、システム・コードおよびエクステンションによって使用されます
============================================================
これらの場合、

 
URI u= new URI(str).parseServerAuthority();

 上のような文を使えば、uが参照するURIに機関コンポーネントが含まれる場合に、その機関が常に適切なユーザー情報、ホスト、ポートの各コンポーネントを含むサーバー・ベース機関であることを保証できます
============================================================
XMLSignatureFactory factory = XMLSignatureFactory.getInstance("DOM"); 
このファクトリが生成するオブジェクトはDOMに基づいており、APIの概要の「DOMメカニズム要件」セクションで定義されているDOM相互運用性の要件に従う必要があります
============================================================
pkg.protocol.ClientProvider

newJMXConnectorのenvironmentパラメータにキーjmx.remote.protocol.provider.class.loaderが含まれる場合、関連付けられた値がプロバイダをロードするために使用するクラス・ローダーになります
============================================================
"unbound-prefix-in-entity-reference" [fatal] 
 「namespaces」構成パラメータがtrueに設定されていて、バインドされていない名前空間接頭辞が置換テキストに含まれているエンティティが、名前空間接頭辞のバインディングがない位置で参照された場合に返されます
============================================================
NotificationEmitter
ManagementFactory.getMemoryMXBean()によって返されるMemoryMXBeanオブジェクトは、リスナーを通知リスナーとしてMemoryMXBean内で登録できるようにするNotificationEmitterインタフェースを実装します
============================================================
ポーリング

       アプリケーションでは、すべてのメモリー・プール共通のgetUsage()メソッド、または使用量しきい値をサポートするメモリー・プール専用のisUsageThresholdExceeded()メソッドを呼び出すことにより、アプリケーション自体のメモリー使用量を継続的に監視できます
============================================================
IV: 初期化ベクトル(IV) 
tLen: 認証タグTの長さ(ビット単位)


 ここで説明しているパラメータのほかに、Cipherクラスではその他のGCM入出力(Additional Authenticated Data (AAD)、鍵、ブロック暗号、平文/暗号テキストおよび認証タグ)が処理されます
============================================================
[L("no"), C("NO"), V("NY")]
 [L("no"), C("NO")]
 [L("no")]
 Locale.ROOT


 ロケールが正確にLocale("no", "NO", "NY")の場合は、まずLocale("nn", "NO")に変換されたあと、上記の処理が行われます
============================================================
objがnullでない
objがTabularDataインタフェースも実装している
行型が等しい
内容(インデックスと値のマッピング)が等しい

 これらの条件が満たされていれば、このequalsメソッドは、TabularDataインタフェースの異なった実装であるobjパラメータに対して正常に機能します
============================================================
YES --- 列がNULLを許可する場合
        NO --- 列がNULLを許可しない場合
        空の文字列 --- 列がNULL値を許可するかどうか不明である場合
       
SPECIFIC_NAME String =>このプロシージャをそのスキーマ内で一意に識別する名前
============================================================
Netscapeドラフト RFC 2109 - http://www.ietf.org/rfc/rfc2109.txt RFC 2965 - http://www.ietf.org/rfc/rfc2965.txt

 HttpCookieクラスは、これら3つの形式の構文をすべて受け付けることができます
============================================================
JSplitPane.TOP
 JSplitPane.LEFT
 JSplitPane.BOTTOM
 JSplitPane.RIGHT
 
constraintsオブジェクトがnullの場合、利用可能な最初の位置にコンポーネントが追加されます(開いている場合は左または上、そうでない場合は右または下)
============================================================
createMBeanServer
MBeanServerFactory.createMBeanServer()メソッドまたはMBeanServerFactory.createMBeanServer(java.lang.String)メソッドを使って、新しいMBeanServerオブジェクトを生成する
============================================================
クライアント認証を必須にする
  クライアント認証を要求する
  クライアント認証を不要にする
 

setNeedClientAuth(boolean)とは異なり、このオプションが設定されていて、かつクライアントが自身に関する認証情報を提供しないことを選択した場合でも、ネゴシエーションは続行されます
============================================================
クライアント認証を必須にする
  クライアント認証を要求する
  クライアント認証を不要にする
 

setWantClientAuth(boolean)と異なり、受け入れたソケットのオプションが設定されていて、かつクライアント認証情報が提供されない場合は、ネゴシエーションが停止し、接続が切断されます
============================================================
クライアント認証を必須にする
  クライアント認証を要求する
  クライアント認証を不要にする
 

setNeedClientAuth(boolean)とは異なり、このオプションが設定されていて、かつクライアントが自身に関する認証情報を提供しないことを選択した場合でも、ネゴシエーションは続行されます
============================================================
UDTの完全指定されたSQLの型名
   SQLDataを実装するクラスのClassオブジェクト
   


 基底型のエントリを持つ型マップがgetArrayおよびgetResultSetメソッドに提供されると、その型マップに含まれるマッピングは、ARRAY値の要素をマッピングするのに使用されます
============================================================
汎用文字である
   それが通貨記号である('$'など)
   それが連結句読点文字である('_'など)
   数字である
   数値汎用文字である(ローマ数字文字など)
   連結マークである
   非スペーシング・マークである
  文字のisIdentifierIgnorableがtrueを返す
============================================================
UPPERCASE_LETTER
 LOWERCASE_LETTER
 TITLECASE_LETTER
 MODIFIER_LETTER
 OTHER_LETTER
 LETTER_NUMBER

 あるいは、それがUnicode標準で規定された寄与プロパティOther_Alphabeticを持つ
============================================================
watchMousePointer
いつでもマウス・ポインタ位置に関する情報を取得する
絶えずマウス・ポインタを監視することで、アプレットはユーザーが何を行っているか(つまり、マウスを画面の左下隅に移動することは、おそらくユーザーがアプリケーションを起動しようとしていることを意味する)を推測できる
============================================================
PrintService.getSupportedAttributeValues()を参照してください
 
 矩形の印刷可能領域を決定する場合、要求しているコンテキスト内で指定されている方向に関わらず、ポートレート・モードで印刷する場合の用紙の左上位置が原点となり、その座標(x,y)が設定されます
============================================================
このクラスでサポートされていないPerl構文 

 定義済みの文字クラス(Unicode文字)
    \X    Unicode 拡張書記素クラスタに一致
    
 後方参照構文、n番目の前方参照を行う正規表現グループの場合\g{n}、名前付きの前方参照を行う正規表現グループの場合\g{名前}
============================================================
setNetworkTimeout
ConnectionメソッドsetNetworkTimeoutの呼出しを許可します
アプリケーションで、ConnectionまたはConnectionから作成されたオブジェクトが、データベースが任意の1つの要求に応答するのを待つ最大期間を指定することを許可します
============================================================
TemporalAccessorのように、日付/時間/オフセット情報へのアクセスを提供する
 フィールドのセットが最大から最小まで連続している
 フィールドのセットが完全であるため、他のフィールドを使用しなくても、表現されるフィールドの値の有効範囲を定義できる
 

 これを、4つの例で説明します
============================================================
thisのURLのスキームがpのURLのスキームと等しくない場合は、falseを返します
thisのURLのスキーム固有部分が「*」である場合は、trueを返します
pのURLのホスト範囲によって定義されるホスト・セットが、thisのURLのホスト範囲のサブセットでない場合は、falseを返します
============================================================
構成パラメータ
        




プロパティ名
動作
戻り型
デフォルト値
必須

javax.xml.stream.isRepairingNamespaces出力側の接頭辞のデフォルトを設定しますBooleanFalseはい


次に、名前空間と接頭辞の修復アルゴリズムについて説明します
============================================================
数値は70以上で、そのあとに空白、カンマ、スラッシュ、または終了文字列が続く
     数値は70未満で、月と月の日付の両方が認識されている

     認識された年数値が100未満の場合、Dateクラスが初期化された日の80年前から19年後までの100年間の年が略記されたものとして解釈されます
============================================================
Locale("ja", "JP", "JP")は「ja-JP-u-ca-japanese」として扱われます
 Locale("th", "TH", "TH")は「th-TH-u-nu-thai」として扱われます
 Locale("no", "NO", "NY")は「nn-NO」として扱われます
============================================================
Javaメモリー・モデルの詳細
 Javaメモリー・モデルの観点では、この処理で実行される同期アクションは効果の点で、現在のスレッドによる揮発性変数への書き込み、および影響を受けるコール・サイトのいずれかにアクセスする可能性のあるその他のすべてのスレッドによる最終的な揮発性読取りと同等になります
============================================================
- ロール内のMBean参照を1つ削除したとき参照の数が最小値より少なくなる場合は、関係を削除する必要がある
 - MBean参照を削除したあと残った参照の数がカーディナリティ範囲内である場合は、関係を保持し、handleMBeanUnregistration()コールバックを呼び出して更新する
============================================================
- ロール内のMBean参照を1つ削除したとき参照の数が最小値より少なくなる場合は、関係を削除する必要がある
 - MBean参照を削除したあと残った参照の数がカーディナリティ範囲内である場合は、関係を保持し、handleMBeanUnregistration()コールバックを呼び出して更新する
============================================================
この簡易メソッドは単純に、拡張クラス・ローダーを検索し(これをextClassLoaderとする)、次の値を返します

 
 拡張クラス・ローダーが見つからない場合はシステム・クラス・ローダーが使用され、システム・クラス・ローダーが存在しない場合はブートストラップ・クラス・ローダーが使用されます
============================================================
com.foo.MyHandler.level=INFO 
   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter 


 出力の入出力ストリームはバッファされますが、各LogRecordが書き込まれるとフラッシュされます
============================================================
メソッドに渡されるISO LocalDateから開始する
 その日付を、任意ではなくこのユース・ケースで既知の代替の暦体系に変換する
 計算を実行する
 LocalDateに変換して戻す
 
 下位レベルのフレームワークまたはライブラリを書く開発者もこのインタフェースを避けるようにしてください
============================================================
#Sample currency properties with cutover date JP=JPZ,999,0,2014-01-01T00:00:00 

Currencyクラスが2014年1月1日00:00:00 GMTより後にロードされる場合は、日本の通貨データがこれに置き換わります
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  NON_UNIQUE boolean =>インデックス値は一意でない値にできるか
============================================================
setVisible(true):
 
isActive():true
isVisible(): キャレットの点滅がオンまたはオフのどちらになるかによってtrueまたはfalse


setVisible(false):
 
isActive():false
isVisible():false
============================================================
まず、加算する2つのDurationは、汎用性を失わずに、ともに正であるとします(つまり、(-X)+Y=Y-X、X+(-Y)=X-Y、(-X)+(-Y)=-(X+Y))

 
 2つの正のDurationの加算は、単にフィールドごとの加算として定義され、フィールドがない場合は0として扱われます
============================================================
getAscent()
getLeading()
getMaxAdvance()
charWidth(char)
charsWidth(char[], int, int)


このクラスの各メソッドでの実装は効率的ではないため、通常は、より効率的なツールキット特有の実装でオーバーライドされます
============================================================
java.util.logging.config.class
 java.util.logging.config.file
 
 これらの2つのプロパティは、javaコマンドへのコマンド行で、またはJNI_CreateJavaVMに渡されるシステム・プロパティの定義として指定することができます
============================================================
"unknown-character-denormalization" [fatal]
 「ignore-unknown-character-denormalizations」構成パラメータがfalseに設定されていて、プロセッサで正規化プロパティを判定できない文字が検出された場合に発生します
============================================================
Queueメソッドのサマリー


例外のスロー
特殊な値を返す


挿入
add(e)
offer(e)


削除
remove()
poll()


検査
element()
peek()


必ずしもその必要はありませんが、通常、キューはFIFO (先入れ先出し)で要素の順序付けを行います
============================================================
loadLibrary.{library name}
特定のライブラリへの動的リンク
Javaのセキュリティ・アーキテクチャが、ネイティブ・コードのレベルで悪意のある動作を防止するようには設計されていないため、ネイティブ・コード・ライブラリをロードするアクセス権をアプレットに与えるのは危険です
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 ロックの取得およびロック取得の中断がサポートされている状況で、割り込みが発生する場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 ロックの取得およびロック取得の中断がサポートされている状況で、割り込みが発生する場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
getMinimumSpan
getPreferredSpan
getMaximumSpan
getAlignment
preferenceChanged
setSize

何回も呼び出されるためにはsetSizeメソッドを作成します(サイズが変更されない場合でも呼び出されることがあります)
============================================================
WindowFocusListenerがaddWindowFocusListenerによって登録される
 enableEventsによってウィンドウ・フォーカス・イベントが使用可能になっている
 
イベント・パラメータがnullである場合は、動作が未指定のため、例外が発生する可能性があります
============================================================
固定オフセット - UTC/グリニッジからの完全に解決されたオフセット、すべてのローカル日付/時間に同じオフセットを使用
 地理的地域 - UTC/グリニッジからのオフセットを見つけるために特定のルール・セットが適用される地域
 
 ほとんどの固定オフセットはZoneOffsetで表されます
============================================================
文字列「Orientation」をキーとし、ResourceBundleからComponentOrientationオブジェクトを取得
 ResourceBundle.getLocaleを使用し、バンドルのロケールを決定し、そのロケールの配置方向を返す
 デフォルトのロケール配置方向を返す
============================================================
typeNoNulls - NULL値を許さない
       typeNullable - NULL値を許す
       typeNullableUnknown - NULL値を許すかどうかは不明
      
CASE_SENSITIVE boolean =>大文字小文字を区別するか
============================================================
ただし、transformが呼び出されない点が異なる
    
canRetransformがtrueで追加されたトランスフォーマごとに、トランスフォーマ内でtransformメソッドが呼び出される
    
変換されたクラス・ファイル・バイトがクラスの新しい定義としてインストールされます
============================================================
DAY_OF_WEEK - 月曜(1)から日曜(7)までの曜日を定義する標準フィールド
 WEEK_OF_WEEK_BASED_YEAR - 暦週の基準年の何週目か
 WEEK_BASED_YEAR - 暦週の基準年
 
 暦週の基準年自体は、標準のISO先発暦の年を基準にして定義されます
============================================================
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER
ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS
============================================================
mailcapファイルの形式

 mailcapファイルは、mailcapファイル仕様(RFC 1524「A User Agent Configuration Mechanism For Multimedia Mail Format Information」)に準拠していなければいけません
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)







   

 shortバッファが、その他の型のオブジェクトと等価になることはありません
============================================================
クライアント認証を必須にする
  クライアント認証を要求する
  クライアント認証を不要にする
 

setNeedClientAuth(boolean)と異なり、受け入れたソケットのオプションが設定されていて、かつクライアント認証情報が提供されない場合でも、ネゴシエーションは続行されます
============================================================
フル・スクリーン以外のウィンドウにはセキュリティ警告が引き続き表示される


listenToAllAWTEvents
システム内のすべてのAWTイベントの待機
AWTイベント・リスナーを追加後、悪意のあるコードがシステム内でディスパッチされるすべてのAWTイベントを調べられるようになる
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)







   

 byteバッファが、その他の型のオブジェクトと等価になることはありません
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)







   

 charバッファが、その他の型のオブジェクトと等価になることはありません
============================================================
ContainerListenerオブジェクトがaddContainerListenerを使用して登録されている
 enableEventsによってコンテナ・イベントが使用可能になっている
 
イベント・パラメータがnullである場合は、動作が未指定のため、例外が発生する可能性があります
============================================================
DOCUMENT_FRAGMENT_NODE
deepオプションがtrueに設定されている場合は、ソースDocumentFragmentの子孫が再帰的にインポートされ、そのインポートされたDocumentFragmentの下で結果ノードが再アセンブルされて、対応するサブツリーを形成します
============================================================
既存のDynAnyオブジェクトでオペレーションを呼び出す
 DynAnyFactoryオブジェクトでオペレーションを呼び出す
 
 構築型DynAnyオブジェクトでは、構成要素の値へのアクセスをカプセル化するようなDynAnyオブジェクトを新しく作成できるオペレーションがサポートされます
============================================================
既存のDynAnyオブジェクトでオペレーションを呼び出す
 DynAnyFactoryオブジェクトでオペレーションを呼び出す
 
 構築型DynAnyオブジェクトでは、構成要素の値へのアクセスをカプセル化するようなDynAnyオブジェクトを新しく作成できるオペレーションがサポートされます
============================================================
既存のDynAnyオブジェクトでオペレーションを呼び出す
 DynAnyFactoryオブジェクトでオペレーションを呼び出す
 
 構築型DynAnyオブジェクトでは、構成要素の値へのアクセスをカプセル化するようなDynAnyオブジェクトを新しく作成できるオペレーションがサポートされます
============================================================
WINDOW_CLOSED
WINDOW_ICONIFIED
WINDOW_DEICONIFIED
WINDOW_ACTIVATED
WINDOW_DEACTIVATED
WINDOW_GAINED_FOCUS
WINDOW_LOST_FOCUS
WINDOW_STATE_CHANGED
============================================================
KeyInfoFactory factory = KeyInfoFactory.getInstance("DOM"); 
このファクトリが生成するオブジェクトはDOMに基づいており、APIの概要の「DOMメカニズム要件」セクションで定義されているDOM相互運用性の要件に従う必要があります
============================================================
SEVERE (最高値)
 WARNING (警告)
 INFO
 CONFIG
 FINE
 FINER
 FINEST (最低値)
 
 これら以外に、ロギングをオフするために使用されるレベルOFF、およびすべてのメッセージのロギングを有効にするために使用されるレベルALLがあります
============================================================
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
たとえば、
 
 language (script, country, variant) language (country) language (variant) script (country) country

 使用される形式は、ロケールに指定されているフィールドにより変化します
============================================================
たとえば、
 
 language (script, country, variant) language (country) language (variant) script (country) country

 使用される形式は、ロケールに指定されているフィールドにより変化します
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)







   

 longバッファが、その他の型のオブジェクトと等価になることはありません
============================================================
Dynamic Invocation InterfaceとDynamic Skeleton InterfaceでRequestオブジェクトの引数を記述するため
 Contextオブジェクトのコンテキスト値を記述するため
 

 各NamedValueオブジェクトは、次の内容で構成されます
============================================================
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
defineClassInPackage.{package name}
クラス・ローダーがセキュリティ・マネージャのcheckPackageDefinitionメソッドを呼び出すときに、そのクラス・ローダーのdefineClassメソッドを使用して、指定したパッケージ内にクラスを定義する
============================================================
図: barTextNode.replaceWholeText("yo")がbarTextNodeのテキスト・コンテンツを「yo」で変更
削除されるノードがEntityReferenceの読取り専用の子孫である場合は、読取り専用ノードの代わりにEntityReferenceが削除されます
============================================================
WindowStateListenerがaddWindowStateListenerを使用して登録されている
 enableEventsによってウィンドウ状態イベントが使用可能になっている
 
イベント・パラメータがnullである場合は、動作が未指定のため、例外が発生する可能性があります
============================================================
XMLからXMLSignatureを非整列化する
または、unmarshalXMLSignatureメソッドを呼び出してXMLコンテンツを格納するメカニズム固有のXMLValidateContextインスタンスを渡すことによって、既存のXML表現からXMLSignatureを作成できます
============================================================
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
既存のDynAnyオブジェクトでオペレーションを呼び出す
 DynAnyFactoryオブジェクトでオペレーションを呼び出す
 
 構築型DynAnyオブジェクトでは、構成要素の値へのアクセスをカプセル化するようなDynAnyオブジェクトを新しく作成できるオペレーションがサポートされます
============================================================
名前 
 型 


 "acl" 
 List<AclEntry> 


 "owner" 
 UserPrincipal 



 getAttributeメソッドは、getAclまたはgetOwnerメソッドを呼び出したかのように、ACLまたは所有者属性を読み取るために使用できます
============================================================
要素の型が同じである  
 バッファ内に残っている要素数が同じである
   
 バッファ内に残っている要素のシーケンス(開始位置とは無関係)が各点で等しい(pointwise equal)







   

 intバッファが、その他の型のオブジェクトと等価になることはありません
============================================================
またアンパック・プログラムでは、どのようなアーカイブ要素の伝送順序に対しても特定のバイト・イメージを生成することが、JSR 200仕様で保証されている)
 
 下位互換性を保持するために、パック・ファイルのバージョンは、入力JARファイルにあるクラス・ファイルに適合するよう設定されます
============================================================
クライアント認証を必須にする
  クライアント認証を要求する
  クライアント認証を不要にする
 

setWantClientAuth(boolean)と異なり、このオプションが設定されていて、かつクライアント認証情報が提供されない場合は、ネゴシエーションが停止し、接続が切断されます
============================================================
Class.forName("Foo", true, this.getClass().getClassLoader())


 ただし、このメソッドは、『Java言語仕様』のセクション12.2、12.3、12.4で指定された、ロード、リンク、または初期化に関連するエラーをスローします
============================================================
com.foo.MyHandler.level=INFO 
   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter 


 パターンは、実行時に置き換えられる、次の特殊コンポーネントを含む文字列から構成されます
============================================================
ただし、いくつかのメカニズムがサポートされていない場合は、そのアプリケーション自身のプロバイダを使用する

GSSManagerクラスには、これらの使用モードを有効にするために、2つのメソッドaddProviderAtFrontおよびaddProviderAtEndが用意されています
============================================================
newMBeanServer
MBeanServerFactory.newMBeanServer()メソッドまたはMBeanServerFactory.newMBeanServer(java.lang.String)メソッドを使って、新しいMBeanServerオブジェクトを生成する
============================================================
解像度の制御にも使用されるPrintQuality属性を指定するほうがロジックが単純になる場合もある
 

IPP互換性: PrinterResolutionオブジェクトのメソッドを呼び出すことにより、IPPの"printer-resolution"属性構築に必要な情報を取得できます
============================================================
0xF0: システム・エクスクルーシブ・メッセージ(MIDIワイヤー・プロトコルでの場合と同じ)
0xF7: エンド・オブ・エクスクルーシブ(EOX)

 特定のシステム・エクスクルーシブ・メッセージのデータが含まれる最初のSysexMessageオブジェクトは、状態値が0xF0です
============================================================
isLetter(ch)がtrueを返す
  getType(ch)がLETTER_NUMBERを返す
  chが通貨記号である('$'など)
  chが連結句読点文字である('_'など)
 

 これらの条件は、バージョン6.2のUnicode標準の文字情報に対してテストされます
============================================================
isLetter(ch)がtrueを返す
  getType(ch)がLETTER_NUMBERを返す
  chが通貨記号である('$'など)
  chが連結句読点文字である('_'など)
 

 これらの条件は、バージョン6.2のUnicode標準の文字情報に対してテストされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 スレッドの待機および中断がサポートされている状況で、割り込みが発生する場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 スレッドの待機および中断がサポートされている状況で、割り込みが発生する場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 スレッドの待機および中断がサポートされている状況で、割り込みが発生する場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
名前値
units"bytes"
descriptionResourceKey"bytes.key"
descriptionResourceBundleBaseName
"com.example.foo.MBeanResources"

@Unitsなどの注釈の適用先を次に示します
============================================================
InputContext.selectInputMethodによって、
 ユーザーがロケールを指定したか、あるいは以前に選択済みのインプット・メソッドのgetLocaleメソッドがnullでない値を返す場合に、ユーザー・インタフェースを使ってこのインプット・メソッドに切り替えるとき
============================================================
accessDeclaredMembers
クラスの宣言されたメンバーへのアクセス
特定のクラス内のpublic、デフォルト(パッケージ)アクセス、protected、およびprivateなフィールドやメソッドに関する問い合わせを行うコード・アクセス権をコードに与えることになります
============================================================
2.1 RowSetMetaDataの取得
 アプリケーションは、RowSetMetaDataオブジェクト上にResultSetMetaDataメソッドとRowSetMetaDataメソッドを呼び出すことにより、CachedRowSetオブジェクト内の列に関する情報を取得できます
============================================================
public int value() -- CompletionStatusオブジェクトのvalueフィールドにアクセスする
 public static CompletionStatus from_int(int i) -- intメンバーのどれか1つからインスタンスを生成する
============================================================
2.0 プレディケートの共有

 親インタフェースで、継承されたcreateSharedメソッドを使ってFilteredRowSet実装を共有している場合、すべてのFilteredRowSetインスタンスのクローンで、変更を加えることなくPredicateを共有する必要があります
============================================================
すべてのドキュメント・ウィンドウとダイアログの上に表示する
 ウィンドウとその中のすべてのコンポーネントは、フォーカスを受け取らない
 タイトルのない縮小ドラッグ領域のような軽量の装飾を保持する
 
 ただし、これらの3つの項目に関する実際の動作はプラットフォームに依存しています
============================================================
すべてのドキュメント・ウィンドウとダイアログの上に表示する
 ウィンドウとその中のすべてのコンポーネントは、フォーカスを受け取らない
 タイトルのない縮小ドラッグ領域のような軽量の装飾を保持する
 
 ただし、これらの3つの項目に関する実際の動作はプラットフォームに依存しています
============================================================
入力された年数を年フィールドから減算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2008-02-29 (うるう年)から1年を減算すると、2007-02-29(標準の年)という無効な日付が生じます
============================================================
入力された年数を年フィールドから減算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2008-02-29 (うるう年)から1年を減算すると、2009-02-29(標準の年)という無効な日付が生じます
============================================================
入力された年数を年フィールドから減算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2008-02-29 (うるう年)から1年を減算すると、2009-02-29(標準の年)という無効な日付が生じます
============================================================
HH:mmXXXXX
HH:mm:ssXXXXX
HH:mm:ss.SSSXXXXX
HH:mm:ss.SSSSSSXXXXX
HH:mm:ss.SSSSSSSSSXXXXX

 使用される形式は、完全な時間値を出力するもっとも短いものになり、省略部分はゼロであると暗に示されます
============================================================
記述子のgetClassNameメソッドを使って、オブジェクトのクラスを決定する

  getLocationメソッドを使って記述子から取得した、コードの位置からクラスをロードする

  オブジェクトのクラスの特別な起動コンストラクタを呼び出して、クラスのインスタンスを生成する
============================================================
接合のトリミングではライン接合の装飾が斜影に変換される
 破線属性
不透明部分と透明部分とが交互になるようにして破線を作成する方法の定義
 
 返される輪郭線の形状を制御する寸法や距離を指定するすべての属性は、ストロークのないオリジナルのShape引数と同じ座標系で測定されます
============================================================
ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED
ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER
ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS
============================================================
例: key="u"/value="ca-japanese" (和暦)、key="x"/value="java-1-7"

注: BCP 47では、フィールド値がIANA言語サブタグ・レジストリに登録されている必要がありますが、Localeクラスでは検証機能は提供されていません
============================================================
通常はアクセスできない機密情報やメソッドが、悪意のあるコードによってアクセスされる恐れがある


newProxyInPackage.{package name}
プロキシ・クラスが実装する非publicインタフェースの指定されたパッケージにプロキシ・インスタンスを作成する機能
============================================================
このメソッドを呼び出したときの動作は、次の場合と同じになります
 
 このportNameは、endpointReferenceのメタデータから取得されるか、serviceEndpointInterfaceとこのServiceインスタンスに関連付けられたWSDLから取得されます
============================================================
このメソッドを呼び出したときの動作は、次の場合と同じになります
 
 このportNameは、endpointReferenceのメタデータから取得されるか、serviceEndpointInterfaceとこのServiceインスタンスに関連付けられたWSDLから取得されます
============================================================
setRequestProperty


AllowUserInteractionパラメータとUseCachesパラメータのデフォルト値は、setDefaultAllowUserInteractionメソッドとsetDefaultUseCachesメソッドを使用して設定できます
============================================================
WindowListenerオブジェクトがaddWindowListenerを使用して登録されている
 enableEventsによってウィンドウ・イベントが使用可能になっている
 
イベント・パラメータがnullである場合は、動作が未指定のため、例外が発生する可能性があります
============================================================
Calendar.clear()を呼び出して、すべてのGregorianCalendarフィールドを初期化する
GregorianCalendar.setGregorianChange(new Date(Long.MIN_VALUE))を呼び出して、純粋なグレゴリオ暦を取得する
============================================================
originalTypeString
MBeanAttributeInfoMBeanOperationInfoMBeanParameterInfo
このMBeanAttributeInfoなどを生成したMXBeanインタフェース・メソッドに表示される、この要素の元のJava型
============================================================
DropMode.USE_SELECTION
DropMode.ON
DropMode.INSERT
DropMode.ON_OR_INSERT


 このコンポーネントがドロップを受け付けるTransferHandlerを持っていなければ、ドロップ・モードの効果はありません
============================================================
入力された年数を年フィールドに加算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2008-02-29 (うるう年)に1年を加算すると、2009-02-29(標準の年)という無効な日付が生じます
============================================================
入力された年数を年フィールドに加算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2008-02-29 (うるう年)に1年を加算すると、2009-02-29(標準の年)という無効な日付が生じます
============================================================
各ドキュメントが新しい用紙から開始されるので、複数のドキュメントを1つに綴じることができる
 

 SINGLE_DOCUMENTは出力ストリーム・ページの順序の面ではSEPARATE_DOCUMENTS_COLLATED_COPIESと同じですが、用紙の開始位置が異なります
============================================================
入力された年数を年フィールドに加算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2008-02-29 (うるう年)に1年を加算すると、2009-02-29(標準の年)という無効な日付が生じます
============================================================
「How to Write a Tree Expansion Listener」および「How to Write a Tree-Will-Expand Listener」
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースとの互換性がなくなる予定です
============================================================
このコンストラクタは、ActivationID、およびオブジェクト固有の初期化データが格納されているMarshalledObjectの、2つの引数をとる

  インスタンシエータが作成したリモート・オブジェクトのスタブが格納されている、MarshalledObjectを返す
============================================================
プロパティデフォルト値

キー文字
KeyEvent.CHAR_UNDEFINED


キー・コード
KeyEvent.VK_UNDEFINED


修飾子
なし


キーを離すとき
false


AWTKeyStrokeはクライアント・コードで構築するべきではありません
============================================================
また、アプリケーションまたはアプレットが不正な振る舞いをするような偽のイベントを送信する可能性がある


accessSystemTray
AWT SystemTrayインスタンスへのアクセス
悪意のあるコードによりシステム・トレイにトレイ・アイコンが追加される可能性がある
============================================================
進捗バーが確定モードで、表示可能になった
    進捗バーが表示可能で、確定モードになった
    進捗バーが表示可能で、確定モードであり、このUIがインストールされている
 
 独自のアニメーション・スレッドを実装する場合は、このメソッドをオーバーライドする必要があります
============================================================
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 最下位ビットは、MBZ (0でなければならない)ビットに対応するので、常に無視されます
============================================================
jar:http://www.foo.com/bar/baz.jar!/
作成したURLがJAR URLであることがわかっていて、JARに固有の機能が必要である場合には、ジェネリックURLConnectionをJarURLConnectionにキャストするようにしてください
============================================================
DropMode.USE_SELECTION
DropMode.ON
DropMode.INSERT
DropMode.ON_OR_INSERT

 このコンポーネントがドロップを受け付けるTransferHandlerを持っていなければ、ドロップ・モードの効果はありません
============================================================
LSOutput.encoding,
 

Document.inputEncoding,
 

Document.xmlEncoding.
 

上記のプロパティを通してどのエンコーディングにも到達できない場合は、「UTF-8」のデフォルト・エンコーディングが使用されます
============================================================
)
 T0が参照でT1がプリミティブの場合は、実行時にアンボクシング変換が適用されますが、そのあと、プリミティブ値に対してJavaキャスト変換(JLS 5.5)が行われる可能性があり、さらに下位ビットのテストによるbyteからbooleanへの変換が行われる可能性もあります
============================================================
動的アクセス 
 ファイル属性への動的アクセスが必要な場合、この属性ビューによってサポートされている属性はBasicFileAttributeViewおよびFileOwnerAttributeViewで定義されているものと同じですが、そのほかに次の属性もサポートされています
============================================================
getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader()),
 
getClassLoader()が、ResourceBundleのセキュリティ特権により実行されることだけが異なります
============================================================
IPTOS_LOWCOST (0x02)
IPTOS_RELIABILITY (0x04)
IPTOS_THROUGHPUT (0x08)
IPTOS_LOWDELAY (0x10)

 最下位ビットは、MBZ (0でなければならない)ビットに対応するので、常に無視されます
============================================================
「member type definition anonymous」が存在する場合:
 
これがfalseの場合は、「member type definition name」プロパティと「member type definition namespace」プロパティを公開する
============================================================
再変換不可能トランスフォーマ
    
再変換不可能ネイティブ・トランスフォーマ
    
再変換可能トランスフォーマ
    
再変換可能ネイティブ・トランスフォーマ
    


 再変換では、再変換不可能トランスフォーマは呼び出されず、直前の変換結果が再利用されます
============================================================
カラー・スペースの型がRGBである
プロファイルにredColorantTag、greenColorantTag、blueColorantTag、redTRCTag、greenTRCTag、blueTRCTag、およびmediaWhitePointTagタグが含まれている
============================================================
visibleAmountはmaximum - minimum以下、valueはminimum以上、かつvalueはmaximum - visibleAmount以下である必要があります
 
 このメソッドを呼び出しても、AdjustmentEventはトリガーされません
============================================================
Shapeの境界の完全に内側にある場合

Shapeの境界線上に位置し、かつ、その点に隣接する、X軸方向のプラス側にあるスペースが完全に境界内に収まる場合

 水平方向の境界セグメント上に位置し、かつ、その点に隣接する、Y軸方向のプラス側にあるスペースが境界内に収まる場合
============================================================
紀元年
紀元
先発暦の年
ISO先発暦の年




2BE2-542


1BE1-543


1BEFORE_BE0-544


2BEFORE_BE-1-545




ThaiBuddhistEraの数値表現を取得するために、ordinal()を使用しないでください
============================================================
オブジェクトの起動識別子(ActivationID)
 オブジェクトの初期化データ(MarshalledObject)
 

 このクラスの具象サブクラスは、前述した2つのパラメータをとるコンストラクタを通じて起動されるときに、このコンストラクタを呼び出す必要があります
============================================================
オブジェクトの起動識別子(ActivationID)
 オブジェクトの初期化データ(MarshalledObject)
 

 このクラスの具象サブクラスは、前述した2つのパラメータをとるコンストラクタを通じて起動されるときに、このコンストラクタを呼び出す必要があります
============================================================
デフォルトおよびプラットフォームのエンコーディング

 docフレーバのMIMEタイプにcharsetパラメータが含まれないバイト印刷データの場合、Java Print Serviceインスタンスは、US-ASCII文字セットがデフォルトで設定されているものと判断します
============================================================
コンパイラによるファイルの読み取りおよび書込みをカスタマイズするときに基本構築ブロックとして使用
複数のコンパイル・タスク間で共有

ファイル・マネージャを再利用することで、ファイル・システムのスキャンとjarファイルの読取りのオーバーヘッドを削減できる可能性があります
============================================================
入力された月数を、年の何月かを表すフィールドから減算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2007-03-31から1月を減算すると、2007-02-31という無効な日付が生じます
============================================================
入力された月数を、年の何月かを表すフィールドから減算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2007-03-31から1月を減算すると、2007-04-31という無効な日付が生じます
============================================================
language + "_" + country + "_" + (variant + "_#" | "#") + script + "-" + extensions
 

 言語は常に小文字、国は常に大文字、スクリプトは常にタイトル・ケース、拡張は常に小文字になります
============================================================
format(arguments, new StringBuffer(), null).toString()


 さらに、AttributedCharacterIteratorは、少なくともarguments配列内の引数からテキストが生成された位置を示す属性を含みます
============================================================
入力された月数を、年の何月かを表すフィールドから減算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2007-03-31から1月を減算すると、2007-04-31という無効な日付が生じます
============================================================
null以外
 RefAddrのインスタンスである場合
 objにこのRefAddrと同じアドレス型がある場合(String.compareTo()を使用)
 objおよびこのRefAddrの内容がnullであるか、または両方が等しい場合(equals()テストを使用)
============================================================
setContextClassLoader
スレッドが使うコンテキスト・クラス・ローダーの設定
コンテキスト・クラス・ローダーは、システム・クラス・ローダーに存在しない可能性のあるリソースを探す必要があるときに、システム・コードおよびエクステンションによって使用されます
============================================================
2つの文字が等しい(==演算子による比較)
    Character.toUpperCase(char)メソッドをそれぞれの文字に適用すると同じ結果になる
    Character.toLowerCase(char)メソッドをそれぞれの文字に適用すると同じ結果になる
============================================================
パス照合の例
thisのパスpのパス一致
/a/b/a/bはい
/a/b/*/a/b/cはい
/a/b/*/a/b/c/dいいえ
/a/b/-/a/b/c/dはい
/a/b/-/a/b/c/d/eはい
/a/b/-/a/b/c/*はい
/a/b/*/a/b/c/-いいえ
============================================================
パフォーマンス上の制約

 パフォーマンス上の理由のため、AlphaCompositeクラスによって作成されるCompositeContextオブジェクトのcomposeメソッドに渡すRasterオブジェクトには、あらかじめ乗算されたデータを使用することをお薦めします
============================================================
UDTの場合、型名は完全指定
  COLUMN_SIZE int =>精度
  BUFFER_LENGTH int =>未使用
  DECIMAL_DIGITS short =>スケール - DECIMAL_DIGITSが適用できないデータ型の場合、Nullが返される
============================================================
DAY_OF_WEEK
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
releaseMBeanServer
MBeanServerFactory.releaseMBeanServer(javax.management.MBeanServer)メソッドを使って、MBeanServerFactoryのMBeanServerへの参照を削除する
============================================================
紀元年
紀元
先発暦の年
ISO先発暦の年




2ROC21913


1ROC11912


1BEFORE_ROC01911


2BEFORE_ROC-11910




MinguoEraの数値表現を取得するために、ordinal()を使用しないでください
============================================================
severityNumber
0 - 6の値のうち0: 未知、1:回復不能、2:クリティカル、障害、3:メジャー、重大、4:マイナー、非重要、エラー、5:警告、6:通常、クリア済み、情報
messageIDString
メッセージ・テキストの一意のキー(翻訳、分析用)
============================================================
ObjectNameがプロパティ・リスト・パターンでない場合、空
 ObjectNameがキーを持たないプロパティ・リスト・パターンである場合、アスタリスク
 ObjectNameが1つ以上キーを持つプロパティ・リスト・パターンである場合、カンマとアスタリスク(,*)
============================================================
だが、\Qで開始された引用をエスケープする

 
特殊な構文(名前付きの前方参照や前方参照を行わない)
(?<name>X)
X、名前付きの前方参照を行う正規表現グループ
(?:X)
X、前方参照を行わない正規表現グループ
(?idmsuxU-idmsuxU) 
なし
============================================================
[L, C, V] 
 [L, C] 
 [L] 
 Locale.ROOT 

入力Localeのスクリプトの値が空でない場合は、最終コンポーネントを言語まで省略して候補Localeを追加したあと、元の国とバリアントを使用してLocaleから生成した候補を追加します
============================================================
[L("zh"), S("Hans"), C("CN")]
 [L("zh"), S("Hans")]
 [L("zh"), C("CN")]
 [L("zh")]
 Locale.ROOT

Locale("zh", "TW")の場合、候補リストは次のようになります
============================================================
TextListenerオブジェクトがaddTextListenerを使用して登録されている
 enableEventsによってテキスト・イベントが使用可能になっている
 
イベント・パラメータがnullである場合は、動作が未指定のため、例外が発生する可能性があります
============================================================
たとえば、次のクラス定義がある場合

 

 ユーザーはJAXBContextをJAXBContext.newInstance(Dog.class,Cat.class)のように作成する必要があります(AnimalはDogやCatから参照されるため、自動的に取得される)
============================================================
3.0 CachedRowSetオブジェクトの更新
CachedRowSetオブジェクトの更新方法はResultSetオブジェクトの更新方法と同様ですが、更新中、行セットはデータ・ソースに接続していないので、配下のデータ・ソースに変更を加える追加手順が必要になります
============================================================
次の条件が成立する場合:
 - 問題のMBeanのObjectNameが選択(明示的に、もしくは暗黙的に(つまり明示的に選択解除されていない))されている場合
 かつ
 - オペレーション(登録または登録解除)の型が選択されている場合
 リスナーに通知が送信されます
============================================================
メソッド・ハンドルとCore Reflection API間の相互運用
Lookup APIのファクトリ・メソッドを使えば、Core Reflection APIオブジェクトとして表現された任意のクラス・メンバーを、同等の動作を備えたメソッド・ハンドルに変換できます
============================================================
)
 
 それ以外の場合、呼出し元とアダプタの引数長が同じで、呼出し元の末尾のパラメータの型がアダプタの末尾のパラメータの型と同じかその型に代入可能な参照型である場合、固定引数のメソッド・ハンドルでasTypeを使用する場合と同様に、引数と戻り値がペアで変換されます
============================================================
TEXT_NODE、CDATA_SECTION_NODE、COMMENT_NODE、PROCESSING_INSTRUCTION_NODE
nodeValue


DOCUMENT_NODE、DOCUMENT_TYPE_NODE、NOTATION_NODE
null
============================================================
TEXT_NODE、CDATA_SECTION_NODE、COMMENT_NODE、PROCESSING_INSTRUCTION_NODE
nodeValue


DOCUMENT_NODE、DOCUMENT_TYPE_NODE、NOTATION_NODE
null
============================================================
引数の名前
    引数の値(Anyオブジェクト)
    引数が入力、出力、またはその両方かどうかを示す引数モード・フラグ
  


 操作が元のIDLインタフェース定義にどのように定義されているかによって、Requestオブジェクトも追加情報を含むことがあります
============================================================
SyncResolverオブジェクトの取得と使用
acceptChangesメソッドが競合を検出すると、SyncProviderオブジェクトはSyncProviderExceptionオブジェクトを作成し、それに新しいSyncResolverオブジェクトを設定します
============================================================
TABLE_CAT String =>表カタログ(nullの可能性がある)
  TABLE_SCHEM String =>表スキーマ(nullの可能性がある)
  TABLE_NAME String =>表名
  TABLE_TYPE String =>表のタイプ
============================================================
Class.forName("foo.bah.Driver")

 JDBCドライバは、DriverManager.deregisterDriver(java.sql.Driver)が呼び出されたときに通知を受け取るためにDriverAction実装を作成できます
============================================================
truncate[(width - subsamplingXOffset + sourceXSubsampling - 1) / sourceXSubsampling]

 幅がゼロであるような領域の場合、IllegalStateExceptionがスローされます
============================================================
メモリー使用量
ピーク・メモリー使用量
使用量しきい値
コレクション使用量しきい値 (一部のガベージ・コレクトされたメモリー・プールだけがサポートしている)

1. メモリー使用量
getUsage()メソッドは、メモリー・プールの現在の使用量の推定値を提供します
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
 
 つまり、Shapesによっては、Rectangle2DがShapeと交差していない場合でもこのメソッドがtrueを返すことがあります
============================================================
この解像度を正確にサポートするプリンタだけが検索対象となる
 

 クライアントが要求する正確な解像度を使用してジョブの印刷を実行し、それ以外の解像度では印刷しないようにする時には、PrinterResolutionクラスのインスタンスを印刷ジョブの属性として指定
============================================================
このオブジェクトのクラスの名前
 ": " (コロンとスペース)
  このオブジェクトのThrowable.getLocalizedMessage()メソッドを呼び出した結果
 
getLocalizedMessageがnullを返す場合、クラス名のみが返されます
============================================================
Conditionのサポート
書込みロックの提供するCondition実装は、書込みロックに関して、ReentrantLock.newCondition()によって提供されるCondition実装がReentrantLockに対して実行するのと同じように動作します
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
 
 つまり、Shapesによっては、Rectangle2DがShapeと交差していない場合でもこのメソッドがtrueを返すことがあります
============================================================
各入力ドキュメントの最初の印刷データは必ず新しい用紙に印刷されるため、入力ドキュメントの最後の印刷データのページ数は1になります
 

 SEPARATE_DOCUMENTS_UNCOLLATED_COPIES -- 入力ドキュメントはそれぞれ独立して処理されます
============================================================
SOAPPartオブジェクト
   SOAPEnvelopeオブジェクト
   SOAPBodyオブジェクト
   SOAPHeaderオブジェクト
 
 メッセージのSOAP部は、SOAPMessage.getSOAPPart()メソッドを呼び出して取得できます
============================================================
オン・デマンド構築
デフォルトでは、新しいタスクの到着時にのみ偶数のコア・スレッドがはじめて作成されて起動されますが、これはprestartCoreThread()またはprestartAllCoreThreads()メソッドを使用して動的にオーバーライドできます
============================================================
使用法
このクラスをシンクロナイザの基盤として使用するには、必要に応じて、getState()、setState(int)、またはcompareAndSetState(int, int)を使用して同期状態を検査または変更することによって次のメソッドを再定義します
============================================================
汎用文字である
   それが連結句読点文字である('_'など)
   数字である
   数値汎用文字である(ローマ数字文字など)
   連結マークである
   非スペーシング・マークである
  この文字のisIdentifierIgnorableがtrueを返す
============================================================
汎用文字である
   それが連結句読点文字である('_'など)
   数字である
   数値汎用文字である(ローマ数字文字など)
   連結マークである
   非スペーシング・マークである
  この文字のisIdentifierIgnorableがtrueを返す
============================================================
1.0 概要
 未接続のRowSetオブジェクト(CachedRowSetオブジェクトと、CachedRowSetインタフェースを拡張する実装)は、データ・ソースに再接続する手間なしで、RowSetオブジェクト間にSQL JOINを確立する標準の方法を持ちません
============================================================
"unbound-prefix-in-entity" [warning]
 「namespaces」構成パラメータがtrueに設定されていて、バインドされていない名前空間接頭辞がエンティティの置換テキストで検出された場合に発生する可能性のある、実装に依存した警告
============================================================
ResourceBundle.Control
ResourceBundle.Controlクラスは、ResourceBundle.Controlインスタンスを取るgetBundleファクトリ・メソッドがバンドル・ロード処理を実行する際に必要とする情報を提供します
============================================================
宣言が固定引数のメソッドまたはコンストラクタである

  宣言がstaticでもfinalでもない可変引数メソッドである

 
 メソッドまたはコンストラクタの宣言にこの注釈型が適用され、かつ次が成り立つ場合には、コンパイラから警告が発行されることが推奨されます
============================================================
SOAP 1.2が失敗した場合、Fault/Reason/Text要素で必須のxml:lang属性のデフォルト値がjava.util.Locale.getDefault()に設定されます
 
SOAPBodyは、SOAPFaultの子の要素を最大1つ保有できます
============================================================
SOAP 1.2が失敗した場合、Fault/Reason/Text要素で必須のxml:lang属性のデフォルト値がjava.util.Locale.getDefault()に設定されます
 
SOAPBodyは、SOAPFaultの子の要素を最大1つ保有できます
============================================================
また、namespaceURIがバインドされていない場合は、xmlns宣言が生成または書き込みされます
[5] prefix == ""||nullの場合、デフォルトの名前空間の定義が無効であるとして処理され、XMLStreamExceptionがスローされます
============================================================
記号
          位置
          ローカライズの有無
          意味
     
0
Number
          あり
          数字
     
#
Number
          あり
          数字
============================================================
exceptionsString[]
MBeanAttributeInfo、MBeanConstructorInfo、MBeanOperationInfo
コンストラクタまたはオペレーションの呼出し時、あるいは属性の取得時にスローされる場合がある例外のクラス名
============================================================
インデックス0は赤に、インデックス1は緑に、インデックス2は青に対応する
  アルファ・サンプルが存在する場合、インデックス3が対応する
 

 表示または処理のためにピクセル値から色成分やアルファ成分に変換するときには、サンプルと成分は1対1の対応になります
============================================================
ERROR_MESSAGE
INFORMATION_MESSAGE
WARNING_MESSAGE
QUESTION_MESSAGE
PLAIN_MESSAGE

optionTypeダイアログ・ボックスの下部に表示されるオプション・ボタンのセットを定義します
============================================================
Configuration

 コンストラクタにConfiguration入力パラメータが指定されている場合で、呼出し側がnull以外のConfigurationを指定したとき、LoginContextは呼出し側で指定されたConfigurationを使用する
============================================================
java -Dorg.omg.PortableInterceptor.ORBInitializerClass.com.x.Logging.LoggingService MyApp 

インタセプタ登録時の注意

 要求インタセプタは、ORBベースで登録されます
============================================================
java -Dorg.omg.PortableInterceptor.ORBInitializerClass.com.x.Logging.LoggingService MyApp 

インタセプタ登録時の注意

 要求インタセプタは、ORBベースで登録されます
============================================================
サーバー: WebServiceExceptionをスローし、端点の配備は失敗する必要があります
  
 無効: このモードでは、wsdl:bindingを検査するかどうか、およびwsdl:bindingをどの程度まで検査するかを、実装で選択することができます
============================================================
YES --- 列がNULLを許可する場合
        NO --- 列がNULLを許可しない場合
        空の文字列 --- 列がNULL値を許可するかどうか不明である場合
       

COLUMN_SIZE列はその列の列サイズを表します
============================================================
HierarchyEvent.PARENT_CHANGED
 HierarchyEvent.DISPLAYABILITY_CHANGED
 HierarchyEvent.SHOWING_CHANGED

 上記以外の値を割り当てると、未指定の動作が発生します
============================================================
"check-character-normalization-failure" [error] 
 「check-character-normalization」パラメータがtrueに設定されていて、正規化チェックに失敗した文字列が検出された場合に返されます
============================================================
CompositeDataからJava型Jのインスタンスを再構築する
opendata(J)がJava型JのCompositeDataである場合、JのインスタンスをCompositeDataから再構築可能であるか、Jは再構築不可能であるかのどちらかになります
============================================================
現在のスレッドで、

 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、

 読込みロックの取得中に割り込みが発生した場合、

 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、

 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、

 読込みロックの取得中に割り込みが発生した場合、

  InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、

 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、

 書込みロックの取得中に割り込みが発生した場合、

 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、

 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、

 書込みロックの取得中に割り込みが発生した場合、

 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
- 必須パラメータがすべてnullの場合
 - 同じ名前が2つのロールで使用されている場合
 関係として処理するためには、RelationSupportオブジェクトを関係サービス・メソッドaddRelation()を使って関係サービスに追加する必要があります
============================================================
- 必須パラメータがすべてnullの場合
 - 同じ名前が2つのロールで使用されている場合
 関係として処理するためには、RelationSupportオブジェクトを関係サービス・メソッドaddRelation()を使って関係サービスに追加する必要があります
============================================================
mailto:java-net@java.sun.com
news:comp.lang.java
urn:isbn:096139210x

 階層 URIは、スキーム固有部分がスラッシュで始まる絶対URI、または相対URI (スキームを指定しないURI)です
============================================================
docs/guide/collections/designfaq.html#28                  (1)
 

 をベースURI http://java.sun.com/j2se/1.3/に対して解決すると、結果のURIは次のようになります
============================================================
URLの例
URLの例説明
http://www.oracle.com/a/b/c.html
特定の(単一の)リソースを識別するURL

http://www.oracle.com/a/b/*
「*」文字は、同じ「ディレクトリ」内のすべてのリソースを指します
============================================================
1から90、91または92
 QUARTER_OF_YEAR - 暦週の基準年の何週目か
 YEAR - 標準のISO暦の年
 
暦週の基準年
 ISO-8601標準は当初、日付と時間の文字列フォーマットを定義するデータ交換フォーマットとして意図されました
============================================================
ForwardingJavaFileManager、ForwardingFileObject、およびForwardingJavaFileObject



     標準ファイル・マネージャの動作をオーバーライドする目的でサブクラス化を行うことはできません
============================================================
isVisible()
makeVisible()

 いつ選択が変更されたかを知りたい場合は、TreeSelectionListenerインタフェースを実装し、addTreeSelectionListenerメソッドを使用してそのインスタンスを追加します
============================================================
キーボードのキーを押してから離すと、次に示すキー・イベントが順に生成されます
 

 ただし、場合によっては(オートリピート・メソッドやオートインプット・メソッドがアクティブになっている場合など)、順序が異なることやプラットフォームに依存することがあります
============================================================
AES (128)
DES (56)
DESede (168)
HmacSHA1
HmacSHA256

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのKeyGeneratorのセクションで説明されています
============================================================
DiffieHellman (1024)
DSA (1024)
RSA (1024、2048)

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのKeyPairGeneratorのセクションで説明されています
============================================================
2. MBeanServerを介したMXBeanインタフェースへの間接アクセス

プラットフォームMBeanServerでMXBeanにローカル・アクセスするか、または特定のMBeanServerConnectionでMXBeanにリモート・アクセスします
============================================================
MBean名は、登録または登録解除されたMBeanのセット(またはスーパー・セット)を選択するObjectNameパターンである
オプションで、ユーザー・データを、登録または登録解除されたすべてのMBeanの名前を含むObjectNameの配列に設定できる
============================================================
)
 
 また、asTypeの動作も可変引数アダプタ向けに特殊化されており、その結果、厳密でないプレーンなinvokeが常に、asTypeを呼び出してターゲットの型を調整したあとでinvokeExactを呼び出すのと同等であるという不変性が維持されています
============================================================
presentationStringString
オペレーションの表現方法を説明するためのXML形式の文字列

persistPolicyフィールドとcurrencyTimeLimitフィールドは、コンストラクタに対して無意味ですが、無効とも見なされません
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、コンポーネントのaddMouseListener addMouseMotionListener、addMouseWheelListenerメソッドを使ってコンポーネントに登録してください
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 パーミットの取得の待機中に割り込みが発生した場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 パーミットの取得の待機中に割り込みが発生した場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
Pattern.compile(regex).matcher(str).replaceFirst(repl) 


 置換文字列内でバックスラッシュ(\)とドル記号($)を使用すると、それをリテラル置換文字列として処理した場合とは結果が異なることがあります
============================================================
SyncResolverオブジェクトのナビゲート
SyncResolverオブジェクトはRowSetオブジェクトであるため、アプリケーションはすべてのRowSetメソッドを使用して、カーソルを動かし、SyncResolverオブジェクトをナビゲートできます
============================================================
スタック・トレース全体、
lockedMonitorsがtrueの場合はスレッドによって現在ロックされているオブジェクト・モニター、および
lockedSynchronizersがtrueの場合はスレッドによって現在ロックされている所有可能なシンクロナイザ
============================================================
TransformService ts = TransformService.getInstance(Transform.XPATH2, "DOM"); 
TransformService実装は、Providerメカニズムを使用して登録およびロードされます
============================================================
4.0 配下のデータ・ソースの更新
acceptChangesメソッドの実行時には、行セットへの変更点を配下のデータ・ソースへ書き込むため、背後でCachedRowSetオブジェクトのライター、RowSetWriterImplオブジェクトが呼び出されます
============================================================
2012-12-03T12:00 (ISO)
2012-12-04T12:00 (ISO)
2555-12-04T12:00 (ThaiBuddhist)
2012-12-05T12:00 (ISO)

 2番と3番の値は時系列で同じ日付/時間を表します
============================================================
InputContext.isCompositionEnabledによって、および
 ユーザー・インタフェースまたはInputContext.selectInputMethodを使って、このインプット・メソッドから別のインプット・メソッドに切り替えるとき
============================================================
findMBeanServer
MBeanServerFactory.findMBeanServer(java.lang.String)メソッドを使って、指定された名前のMBeanServer、またはこのJVM内のすべてのMBeanServerを検索する
============================================================
単一のMethodHandleターゲット
 0個以上の先頭の値(個数はleadingArgCount)
 末尾の引数を含むObject[]配列
 

 インボーカがそのターゲットを呼び出す方法は、示されたtypeを使用したinvokeの呼出しに似ています
============================================================
enableSubstitution
直列化または直列化復元の際に、オブジェクトを別のオブジェクトと置き換える
悪意のあるコードはこれによって実際のオブジェクトを、不正なデータまたは悪意のあるデータを持つオブジェクトに置き換えることができるため、危険です
============================================================
キープアライブ時間
現在プールにcorePoolSizeの数よりも多くのスレッドがある場合、超過した分のスレッドは、アイドル状態になっている期間がkeepAliveTimeを超えると終了します(getKeepAliveTime(TimeUnit)を参照)
============================================================
拒否されたタスク
Executorがシャットダウンしている場合、またはExecutorが最大スレッド数とワーク・キュー容量の両方で有限の境界を使用し、かつ飽和状態である場合、execute(Runnable)メソッドで送信された新しいタスクは拒否されます
============================================================
e1とe2の両方がオブジェクト参照型の配列であり、Arrays.deepEquals(e1, e2)がtrueを返す
     e1とe2が同じプリミティブ型の配列であり、Arrays.equals(e1, e2)の適切なオーバーロードがtrueを返す
============================================================
空白以外のISO制御文字
 
'\u0000' - '\u0008'
'\u000E' - '\u001B'
'\u007F' - '\u009F'

汎用カテゴリ値FORMATを保持するすべての文字
 
注: このメソッドは、補助文字を処理できません
============================================================
DataHandlerとTransferableインタフェース
 DataHandlerは、Transferableインタフェースを実装して、カット・アンド・ペーストやドラッグ・アンド・ドロップなどのAWTデータ転送操作にデータを使用できるようにします
============================================================
DataHandlerとCommandMap
 DataHandlerは、コマンドに関する要求(getCommand、getAllCommands、getPreferredCommands)を処理するために使用する現在のCommandMapを追跡します
============================================================
すべてのTextノードのText.isElementContentWhitespace属性の値
 
 すべてのAttrノードのAttr.isId属性の値
 
 Element.schemaTypeInfo属性とAttr.schemaTypeInfo属性
============================================================
パラメータがない場合、フォーマッタは使用されない
 パラメータがあり、文字列に"{0"の次にjava.text.MessageFormatが含まれる場合は、フォーマッタは文字列のフォーマットに使われる
 それ以外の場合は、フォーマット処理は実行されない
============================================================
parseObjectは、setFormatで指定されたFormat上で呼び出される
   Classがその値に設定されると(setValueClass)、スーパー・クラスの実装が呼び出され、parseObjectから返された値を適切なクラスに変換する
============================================================
Connectionオブジェクト -- 行セットとデータベース間の接続
   PreparedStatementオブジェクト -- 結果セットを生成するクエリー
   ResultSetオブジェクト -- 行セットのコマンドによって生成された結果セット
============================================================
入力された月数を、月フィールドに加算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2007-03-31に1月を加算すると、2007-04-31という無効な日付が生じます
============================================================
入力された月数を、月フィールドに加算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2007-03-31に1月を加算すると、2007-04-31という無効な日付が生じます
============================================================
Unicodeロケール/言語拡張
UTS#35「Unicode Locale Data Markup Language」では、ロケールに関連付けられているデフォルト動作をオーバーライドまたは変更するための、オプションの属性とキーワードが定義されています
============================================================
入力された月数を、月フィールドに加算します
結果となる日付が無効になるかどうかをチェックします
必要に応じて、「月の日」を最後の有効な日に調整します


 たとえば、2007-03-31に1月を加算すると、2007-04-31という無効な日付が生じます
============================================================
p.relativize(p.resolve(q)).equals(q)

 シンボリック・リンクがサポートされている場合、このパスに対して解決すると、結果となるパスが、otherと同じファイルの検出に使用できるパスを生成するかどうかは実装に依存します
============================================================
現在のスレッドで、

 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、

 ロックの取得中に割り込みが発生した場合、

 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、

 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、

 ロックの取得中に割り込みが発生した場合、

 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
Pattern.compile(regex).matcher(str).replaceAll(repl) 


 置換文字列内でバックスラッシュ(\)とドル記号($)を使用すると、それをリテラル置換文字列として処理した場合とは結果が異なることがあります
============================================================
プラットフォームの依存性
 ファイル・システムからイベントを監視する実装は、ネイティブ・ファイル・イベント通知機能(使用可能な場合)に直接マップしたり、ネイティブ機能が使用できない場合はポーリングなどの基本メカニズムを使用したりするよう意図されています
============================================================
たとえば、ある注釈プロセッサが、次のコードの処理結果として、ソース・ファイルGeneratedFromUserSourceを作成しようとしている場合、

 

 次のように、作成メソッド呼出しの一部としてUserSourceの型要素が渡されるべきです
============================================================
図2: 水平方向に左から右
図3: 水平方向に右から左



 10個のコンポーネントのそれぞれは、その関連しているGridBagConstraintsオブジェクトのfillフィールドがGridBagConstraints.BOTHに設定されています
============================================================
サポートされるChronoFieldインスタンス:
 
DAY_OF_WEEK
DAY_OF_MONTH
DAY_OF_YEAR
EPOCH_DAY
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA
============================================================
)

 parkメソッドとunparkメソッドは、非推奨メソッドThread.suspendおよびThread.resumeをこのような目的に使用できなくなるような問題が発生しないスレッドをブロックおよびブロック解除するための効率的な手段を提供します
============================================================
publicLookup().findVirtual(MethodHandle.class, "invokeExact", type)

解説: インボーカ・メソッド・ハンドルは、未知の型のメソッド・ハンドル変数を操作する場合に役立つ可能性があります
============================================================
)

 subSet(E, E)、headSet(E)、およびtailSet(E)メソッドがSortedSetを返す仕様になっているのは、既存のSortedSet実装を互換性を維持しながら改良してNavigableSetを実装できるようにするためです
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 パーミットの待機中に割り込みが発生した場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 パーミットの待機中に割り込みが発生した場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
月の最初または最後の日を見つける
 翌月の最初の日を見つける
 その年の最初または最後の日を見つける
 翌年の最初の日を見つける
 月内の最初または最後の曜日(「6月の最初の水曜日」など)を見つける
 次または前の曜日(「次の木曜日」など)を見つける
============================================================
月の最初または最後の日を見つける
 翌月の最初の日を見つける
 その年の最初または最後の日を見つける
 翌年の最初の日を見つける
 月内の最初または最後の曜日(「6月の最初の水曜日」など)を見つける
 次または前の曜日(「次の木曜日」など)を見つける
============================================================
JavaBeanプロパティ 
 フィールド 
 パラメータ 
 パッケージ 
 XmlJavaTypeAdapters内から 

 あるクラスに@XmlJavaTypeAdapter注釈が定義された場合、注釈はそのクラスへのすべての参照に適用されます
============================================================
ユーザーが指定するか、DBMSで生成される名前であり、たとえばオーバーロード関数ではFUNCTION_NAMEと異なる可能性がある
  

 ユーザーにgetFunctionsによって返される任意の関数を実行するためのアクセス権がない場合があります
============================================================
たとえば、

 jar:http://www.foo.com/bar/baz.jar!/COM/foo/Quux.class
JAR URLは、あるJARファイルを参照するか、あるJARファイル内のエントリを参照する場合に使用するようにしてください
============================================================
CROSS_JOIN
FULL_JOIN
INNER_JOIN - JOIN型が設定されていない場合のデフォルト
  LEFT_OUTER_JOIN
RIGHT_OUTER_JOIN

 型を設定していない場合、JOINは自動的に内部結合になります
============================================================
asVarargsCollectorの呼出し
 可変引数のJavaメソッドまたはコンストラクタに解決するルックアップ・メソッドの呼出し
 可変引数のJavaメソッドまたはコンストラクタに解決するCONSTANT_MethodHandleのldc命令
============================================================
Standard MBeanMXBean






MXBeanではMemoryUsageにSerializableのマークを付ける必要がないことを除けば、どちらの場合も定義は同じです(ただし、Serializableのマークを付けることは可能)
============================================================
getBundle(baseName, locale, this.getClass().getClassLoader()),
 
getClassLoader()が、ResourceBundleのセキュリティ特権により実行されることだけが異なります
============================================================
例:

丸めモードHALF_DOWNの例
入力される数値
HALF_DOWNによる丸めで1桁に丸められた入力
5.5 5
2.5 2
1.6 2
1.1 1
1.0 1
-1.0 -1
-1.1 -1
-1.6 -2
-2.5 -2
-5.5 -5
============================================================
例:

丸めモードHALF_EVENの例
入力される数値
HALF_EVENによる丸めで1桁に丸められた入力
5.5 6
2.5 2
1.6 2
1.1 1
1.0 1
-1.0 -1
-1.1 -1
-1.6 -2
-2.5 -2
-5.5 -6
============================================================
java.util.logging.SimpleFormatter.format="%4$s: %5$s [%1$tc]%n"
この例では、ログ・レベル(4$)、ログ・メッセージ(5$)、およびタイムスタンプ(1$)を角括弧に囲んで1行で出力します
============================================================
変数

        式に変数の参照が含まれる場合、setXPathVariableResolver(XPathVariableResolver resolver)で設定されたXPathVariableResolverによってその値が見つけられる
============================================================
INSERT - 1つ以上の行または列が挿入された
  UPDATE - 表のデータの一部が変更された
  DELETE - 1つ以上の行または列が削除された
 
 影響を受ける表の領域は、行や列の範囲を指定するほかの4つのメソッドで指定できます
============================================================
DiffieHellman (1024)
DSA (1024)

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのAlgorithmParameterGeneratorのセクションで説明されています
============================================================
属性セットの修正不可能な同期ビューを作成するメソッド
 AttributeSetインタフェースの実装を構築するために役立つ操作
 

 AttributeSet Sの修正不可能なビュー Uは、クライアントにSへの「読込み専用」アクセスを提供します
============================================================
そうでない場合、絶対名は次の形式になる

 
modified_package_name/name

 ここで、modified_package_nameは、このオブジェクトのパッケージ名の'.' ('\u002e')を'/'で置き換えたものです
============================================================
メディア・タイプ、メディア・サブタイプ、およびパラメータは保持されるが、コメントおよび空白文字はすべて破棄される
  メディア・タイプ、メディア・サブタイプ、およびパラメータ名は、小文字に変換される
  パラメータ値は元の大文字/小文字を保持する
============================================================
ほとんどの場合、クラスDoubleの2つのインスタンスd1とd2について、d1.equals(d2)の値がtrueになるのは、

 
d1.doubleValue() == d2.doubleValue()

上記の値もtrueになる場合だけです
============================================================
Shapeの操作


draw(Shape)操作の場合は、Graphics2Dコンテキストの現在のStroke属性でcreateStrokedShapeメソッドを使用して、指定のShapeの輪郭を格納する新しいShapeオブジェクトが構築されます
============================================================
アプリケーションは、使用するプロバイダを考慮しない(デフォルト)
  アプリケーションは、特定のまたは任意のメカニズムを使用するときに、優先的に使用するプロバイダを要求する
  アプリケーションは、ローカル構成されたプロバイダをできるだけ使用する
============================================================
mousePress(buttons)およびmouseRelease(buttons)
 新しいMouseEventインスタンスの作成時のmodifiersパラメータとして
  既存のMouseEventのmodifiersExをチェックするため
============================================================
)
 
 可変引数修飾子ビット(0x0080)を持つメソッドまたはコンストラクタからルックアップや定数ロードによって生成されたメソッド・ハンドルは、asVarargsCollectorの支援によって定義されたかのように、対応する可変引数を持ちます
============================================================
プリミティブ型のマッピング
8つのプリミティブJava型(boolean、byte、short、int、long、float、double、char)は、java.langからBoolean、Byteなどの対応するboxed型にマッピングされます
============================================================
NAME String =>クライアント情報プロパティの名前
MAX_LEN int =>プロパティの値の最大長
DEFAULT_VALUE String =>プロパティのデフォルト値
DESCRIPTION String =>プロパティの記述
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 交換の待機中に割り込みが発生した場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 交換の待機中に割り込みが発生した場合、
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
3.0 違反と同期の問題
 未接続のRowSetオブジェクトとデータ・ソース間の更新が元のクエリーまたは配下のデータ・ソースの制約に違反した場合、未接続のすべてのRowSet実装と指定されたSyncProvider実装の動作は予測不能になります
============================================================
このオブジェクトのクラスの名前
 ": " (コロンとスペース)
  このオブジェクトのgetLocalizedMessage()メソッドを呼び出した結果
 
getLocalizedMessageがnullを返す場合、クラス名のみが返されます
============================================================
"TitledBorder.border"
 "TitledBorder.font"
 "TitledBorder.titleColor"
 

警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースと互換ではなくなる予定です
============================================================
'\t' U+0009
HORIZONTAL TABULATION
'\n' U+000A
NEW LINE
'\f' U+000C
FORM FEED
'\r' U+000D
CARRIAGE RETURN
' ' U+0020
SPACE
============================================================
persistPolicyString
ModelMBeanInfoModelMBeanAttributeInfo
OnUpdate、OnTimer、NoMoreOftenThan、OnUnregister、Always、Neverのいずれか
============================================================
"canonical-form"


true
[オプション]ツリーからDocumentTypeノード(存在する場合)を削除したり、各要素から余分な名前空間宣言を削除したりするなど、「正規XML」で指定されている規則に従って文書を正規化します
============================================================
図1: 水平方向に左から右
図2: 水平方向に右から左



 コンストラクタによって、またはsetRowsメソッドおよびsetColumnsメソッドによって、行数と列数のどちらもゼロ以外の値に設定されている場合、指定された列数は無視されます
============================================================
ロケール依存サービスの呼出し

java.textおよびjava.utilパッケージ内のロケールに依存するファクトリ・メソッドや名前取得メソッドは、サービス・プロバイダのメソッドを必要に応じて呼び出すことで、要求されたロケールをサポートします
============================================================
1. MXBeanインタフェースへの直接アクセス


getPlatformMXBeanまたはgetPlatformMXBeansメソッドを呼び出してMXBeanインスタンスを取得し、実行中の仮想マシンのMXBeanにローカル・アクセスします
============================================================
次の場合
 
最初の引数が負のゼロであり、かつ2番目の引数がゼロより小さいが有限の奇数の整数ではない場合、または
 最初の引数が負の無限大であり、かつ2番目の引数がゼロより大きいが有限の奇数の整数ではない場合
 
 結果は正の無限大になります
============================================================
floorDiv(x, y) * y + floorMod(x, y) == x


floorModと%演算子との値の違いは、商に等しいかそれよりも小さい整数を返すfloorDivと、ゼロにもっとも近い整数を返す/演算子の違いによるものです
============================================================
1つのレベルを検索
 返す検索結果の最大数に制限なし
 検索の時間制約なし
 検索フィルタを満たすオブジェクトに関連付けられている属性をすべて返す
 名前付きオブジェクトは返さない(名前とクラスしか返さない)
 検索中にリンクを間接参照しない
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
さらに、
このスプリッテレータがSUBSIZEDである場合、分割前のこのスプリッテレータのestimateSize()は、分割後のこのスプリッテレータおよび返されたスプリッテレータのestimateSize()の合計と等しくなければなりません
============================================================
次の場合
 
最初の引数が負のゼロであり、かつ2番目の引数がゼロより小さいが有限の奇数の整数ではない場合、または
 最初の引数が負の無限大であり、かつ2番目の引数がゼロより大きいが有限の奇数の整数ではない場合
 
 結果は正の無限大になります
============================================================
システムが選択したバッファ・サイズは、続いてDataLine.getBufferSize()を呼び出せば照会できます
 
 この操作が完了すると、ラインは開いている状態としてマークされ、OPENイベントがラインのリスナーにディスパッチされます
============================================================
http://java.sun.com/j2se/1.3/demo/jfc/SwingSet2/src/SwingSet2.java


 絶対と相対の両方のURIの解決、および階層URIの場合は絶対と相対の両方のパスの解決がサポートされます
============================================================
getAttachment*(String cid)に渡すコンテンツID、cidの識別


 XOP処理におけるcidの情報セット表現は、セクション3.2「Interpreting XOP Packages」のステップ2aに記載されています
============================================================
PKCS7
PkiPath

 タイプおよび符号化については、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのCertificateFactoryセクションおよびCertPath Encodingsセクションで説明されています
============================================================
FUNCTION_CAT String =>関数のカタログ(nullの可能性がある)
  FUNCTION_SCHEM String =>関数のスキーマ(nullの可能性がある)
  FUNCTION_NAME String =>関数の名前
============================================================
FUNCTION_CAT String =>関数のカタログ(nullの可能性がある)
  FUNCTION_SCHEM String =>関数のスキーマ(nullの可能性がある)
  FUNCTION_NAME String =>関数の名前
============================================================
ForkJoinPoolで実行していない場合、このメソッドの動作は次と同等です
  

 ForkJoinPoolで実行中の場合、まずプールを拡張して、blocker.block()の呼出し中に使用可能な十分な並列性を確保する必要があります
============================================================
GridBagConstraints.gridwidth, GridBagConstraints.gridheight
コンポーネントの表示領域における1行(gridwidth)または1列(gridheight)あたりのセルの数を指定します
============================================================
_self
   _parent
   _top
   名前の付いたフレーム
 

 ターゲットが_selfの場合、HTML.Attribute.SRC属性の値を変更するアクションが発生し、ChangedUpdateイベントをトリガーします
============================================================
例:

丸めモードCEILINGの例
入力される数値
CEILINGによる丸めで1桁に丸められた入力
5.5 6
2.5 3
1.6 2
1.1 2
1.0 1
-1.0 -1
-1.1 -1
-1.6 -1
-2.5 -2
-5.5 -5
============================================================
例:

丸めモードHALF_UPの例
入力される数値
HALF_UPによる丸めで1桁に丸められた入力
5.5 6
2.5 3
1.6 2
1.1 1
1.0 1
-1.0 -1
-1.1 -1
-1.6 -2
-2.5 -3
-5.5 -6
============================================================
グループのクラス名
  グループのコードの位置(グループのクラスの位置)
  グループ固有の初期化データが格納されている、「整列化された」オブジェクト  

 グループのクラスは必ずActivationGroupの具象サブクラスになります
============================================================
書式設定のautosense印刷データ
   


MIMEタイプ説明


"application/octet-stream"
印刷データ形式は指定されない(octetストリームのみ)


 プリンタが、印刷データの解釈方法を判別します
============================================================
JTabbedPane.WRAP_TAB_LAYOUT
JTabbedPane.SCROLL_TAB_LAYOUT


 UIによって値が設定されていない場合、デフォルト値はJTabbedPane.WRAP_TAB_LAYOUTになります
============================================================
pがMBeanServerPermissionのインスタンスであり、
 pのターゲット名がこのオブジェクトのターゲット名のサブセットである

createMBeanServerアクセス権は、newMBeanServerアクセス権を含みます
============================================================
int i = (int)(byte & 0xFF)

 単に既知のMIDIバイト値をメソッド・パラメータとして渡す必要があるだけの場合は、10進表記法または16進表記法を使用して、そのMIDIバイト値を整数型として直接表すことができます
============================================================
リスト内の次のdocに移動し、次のdocが存在しなくなるまでこの操作を繰り返す
 
 ここで、印刷クライアントがオンザフライで印刷データを生成中だが、印刷データの複数部分を一度に格納するリソースを保持していない場合について考えてみましょう
============================================================
コレクションのマッピング(List<E>など)
List<E>やSet<E> (List<String>やSet<ObjectName>など)のマッピング方法は、同じ要素型の配列(String[]やObjectName[]など)と同じです
============================================================
[L, S, C, V1, V2]
 [L, S, C, V1]
 [L, S, C]
 [L, S]
 [L, C, V1, V2]
 [L, C, V1]
 [L, C]
 [L]
 Locale.ROOT

中国語には特例があります
============================================================
publicコンストラクタStandardMBean(impl,interface)を使用
     
StandardMBeanのサブクラス化
     

いずれの場合も、ImplクラスはインタフェースIntfを実装する必要があります
============================================================
equal
kind


 次のメソッドは、objref、struct、union、enum、alias、exception、value、value_box、native、およびabstract_interfaceで呼び出すことができます
============================================================
getContentEncoding
getContentLength
getContentType
getDate
getExpiration
getLastModifed


 上記を使えば、これらのフィールドに容易にアクセスできます
============================================================
java.awt.event.KeyEvent.VK_ENTER
java.awt.event.KeyEvent.VK_TAB
java.awt.event.KeyEvent.VK_SPACE

 修飾子は、次の組み合わせで構成されます
============================================================
実装者は、java.netパッケージにContentHandlerクラスが含まれている点を考慮して、次のような処理は避けてください

通常、「import...*」を使用したプログラムは、ずさんな(sloppy)プログラムと見なされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 待機中に割り込みが発生した場合
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 待機中に割り込みが発生した場合
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 待機中に割り込みが発生した場合
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
現在のスレッドで、
 
このメソッドへのエントリ上で設定された割込みステータスが保持されるか、
 待機中に割り込みが発生した場合
 
InterruptedExceptionがスローされ、現在のスレッドの割込みステータスがクリアされます
============================================================
"validate-if-schema"


true
[オプション]スキーマで文書要素の宣言が見つかった場合にのみ(XMLスキーマ、DTD、またはスキーマのその他の任意の型または表現のどこで見つかったかには関係なく)検証を有効にします
============================================================
V[t] = gauge[t] - gauge[t-GP]


 このゲージ・モニターの実装では、監視対象の属性が整数型または浮動小数点数型(Byte、Integer、Short、Long、Float、Double)である必要があります
============================================================
たとえば、
 

JListは、ダブルクリックやトリプル・クリック(またはそれ以上の回数のクリック)のような特別な処理は行いませんが、これらのイベントの発生時にアクションを実行したい場合は、MouseListenerを簡単に追加できます
============================================================
<handler-name>.target specifies the name of the target Handler  class.(デフォルトなし) 


 たとえば、MemoryHandlerのプロパティは次のようになります
============================================================
出力ドキュメントの指定されたページ範囲を印刷
 

 SINGLE_DOCUMENT_NEW_SHEET -- すべての入力ドキュメントが1つの出力ドキュメントとしてまとめられ、各入力ドキュメントの最初の印刷データは必ず新しい用紙に印刷
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
 
 つまり、Shapesによっては、矩形領域がShapeと交差していない場合でもこのメソッドがtrueを返すことがあります
============================================================
キャッシュ管理
getBundleファクトリ・メソッドによって作成されたリソース・バンドル・インスタンスはデフォルトでキャッシュされ、ファクトリ・メソッドは同じリソース・バンドル・インスタンス(キャッシュされている場合)を複数回返します
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
 
 つまり、Shapesによっては、矩形領域がShapeと交差していない場合でもこのメソッドがtrueを返すことがあります
============================================================
アクターのデフォルト値はSOAPConstants.URI_SOAP_ACTOR_NEXTです
 
 このSOAPHeaderElementがSOAP 1.2をサポートする場合、この呼出しはsetRole(String)と等しくなります
============================================================
これにより、グループは必要に応じて、その起動システムに接続可能
ActivationGroupIDは、ActivationSystem.registerGroupを呼び出すことで取得でき、起動システム内でのグループの識別に使用されます
============================================================
接続がクローズとマークされる
 データベースへのすべての物理接続をクローズする
 接続によって使用されているリソースを解放する
 現在接続にアクセスしているすべてのスレッドを続行して完了させるか、SQLExceptionをスローさせる
============================================================
たとえば、UIManager.put("swing.boldMetal", Boolean.FALSE);

 デフォルト・プロパティswing.boldMetalを設定すると、同じ名前のシステム・プロパティよりも優先して使用されます
============================================================
4.0 FilteredRowSetオブジェクトの更新
FilteredRowSetオブジェクトのpredicateセットは、RowSetオブジェクト内のすべての行に基準を適用し、RowSetオブジェクト内の行のサブセットを管理します
============================================================
ホスト名解決 

 ホスト名からIPアドレスへの解決は、ローカル・マシン構成情報と、ドメイン・ネーム・システム(DNS)やネットワーク情報サービス(NIS)などのネットワーク・ネーム・サービスとを組み合わせて使用することで実現されます
============================================================
WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
 アクションは、コンポーネントがフォーカスを持つか、またはフォーカスを持つコンポーネントの上位オブジェクトである場合にキー・ストロークが発生したときだけ呼び出される
============================================================
応答コントロール
LdapContext.getResponseControls()というメソッドは、Context/DirContextの操作を呼び出した結果行われたLDAP操作で生成された応答コントロールを取得するのに使用されます
============================================================
次の場合
 
最初の引数が負のゼロ、かつ2番目の引数がゼロより大きいが有限の奇数の整数ではない場合、または
 最初の引数が負の無限大であり、かつ2番目の引数がゼロより小さいが有限の奇数の整数ではない場合
 
 結果は正のゼロになります
============================================================
)
 
 メソッド・ハンドル定数は、それに対応するバイト・コード命令と同じリンク時アクセス・チェックの対象であり、ldc命令によって対応するリンケージ・エラーがスローされます(バイト・コードの動作でそのようなエラーがスローされる場合)
============================================================
presentationStringString
オペレーションの表現方法を説明するためのXML形式の文字列

デフォルトの記述子は、name、descriptorType、displayName、およびroleフィールドを設定します
============================================================
org.omg.CORBA.ORB.create_operation_list

 変数nvは、指定されたOperationDefオブジェクトで記述されるメソッドの引数記述を格納している、新しく生成されたNVListオブジェクトを表す
============================================================
次の場合
 
最初の引数が負のゼロ、かつ2番目の引数がゼロより大きいが有限の奇数の整数ではない場合、または
 最初の引数が負の無限大であり、かつ2番目の引数がゼロより小さいが有限の奇数の整数ではない場合
 
 結果は正のゼロになります
============================================================
AES
DES
DESede
DiffieHellman
DSA

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのAlgorithmParametersのセクションで説明されています
============================================================
nameに指定したターゲットがまだない場合は、指定した名前で新しい最上位ウィンドウが作成され、そこにドキュメントが表示される
 

showDocumentメソッドは、アプレット・ビューアやブラウザによっては無視されることがあります
============================================================
Unicode準拠

Characterクラスのフィールドおよびメソッドは、Unicode標準(特にUnicode Character Databaseの一部であるUnicodeDataファイル)の文字情報の観点から定義されています
============================================================
enabledString
MBeanAttributeInfoMBeanNotificationInfoMBeanOperationInfo
この項目が使用可能であるかどうかにより、文字列"true"または"false"になります
============================================================
許可される値の範囲

Durationにはきわめて大きい値や小さい値を保持できますが、Durationの一部の演算はCalendarに依存しているため、そうしたDurationに対しては一部のメソッドが正常に動作しないことがあります
============================================================
::FFFF:129.144.52.38
::129.144.52.38

 ここで、「::FFFF:d.d.d.d」と「::d.d.d.d」はそれぞれ、一般的な形式のIPv4マップIPv6アドレスとIPv4互換IPv6アドレスです
============================================================
"unsupported-media-type" [fatal]

 「supported-media-types-only」構成パラメータがtrueに設定されていて、サポートされていないメディア・タイプが検出された場合に返されます
============================================================
管理インタフェース
オブジェクト名


 CompilationMXBean 
 java.lang:type=Compilation




 Java仮想マシンは、次の管理インタフェースのインスタンスを1つ以上持つことができます
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


suppressAccessChecks
クラス内のフィールドやメソッドに対する、Java言語の標準のアクセス・チェックを抑制する機能
============================================================
例:

丸めモードFLOORの例
入力される数値
FLOORによる丸めで1桁に丸められた入力
5.5 5
2.5 2
1.6 1
1.1 1
1.0 1
-1.0 -1
-1.1 -2
-1.6 -2
-2.5 -3
-5.5 -6
============================================================
deregisterDriver
DriverManagerのメソッドderegisterDriverの呼出しを許可します
登録済ドライバ・リストからJDBCドライバを削除し、そのリソースを解放することをアプリケーションに許可します
============================================================
「type definition anonymous」が存在する場合:
 
これがfalseの場合は、「type definition name」プロパティと「type definition namespace」プロパティを公開する
============================================================
http://xml.org/sax/features/namespace-prefixes

 この機能はValidatorHandlerが元のSAXイベント・ストリームに存在しない名前空間バインディングを取得する方法を制御します
============================================================
5.0 リスナーの登録と通知
 JavaBeansコンポーネントなので、すべての行セットは、BaseRowSetクラスからリスナーを登録して変更内容を通知するためのメソッドを継承して、JavaBeansイベント・モデルに参与します
============================================================
UPPERCASE_LETTER
 LOWERCASE_LETTER
 TITLECASE_LETTER
 MODIFIER_LETTER
 OTHER_LETTER


 すべての汎用文字に大文字と小文字があるわけではありません
============================================================
UPPERCASE_LETTER
 LOWERCASE_LETTER
 TITLECASE_LETTER
 MODIFIER_LETTER
 OTHER_LETTER


 すべての汎用文字に大文字と小文字があるわけではありません
============================================================
unitsString
MBeanAttributeInfoMBeanParameterInfoMBeanOperationInfo
属性、パラメータ、またはオペレーション戻り値の測定単位("bytes"、"seconds"など)
============================================================
byte[]
  java.io.InputStream
 
 このdocの印刷データ表現オブジェクトの取得後に、印刷データ表現オブジェクトから印刷データをバイト・ストリームとして読み取るための入力ストリームが作成され、返されます
============================================================
サブクラス化

 Javaプラットフォームでは、日付、メッセージ、数字をそれぞれフォーマットするため、3つの特殊なサブクラスDateFormat、MessageFormat、NumberFormatがFormatに用意されています
============================================================
java.lang:type=GarbageCollector,name=collector's name


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
フィルタリング・モード
言語優先度リスト: "de-DE"
言語優先度リスト: "de-*-DE"



AUTOSELECT_FILTERING


基本フィルタリングを実行して"de-DE"と"de-DE-1996"を返します
============================================================
HH:mm
HH:mm:ss
HH:mm:ss.SSS
HH:mm:ss.SSSSSS
HH:mm:ss.SSSSSSSSS

 使用される形式は、完全な時間値を出力するもっとも短いものになり、省略部分はゼロであると暗に示されます
============================================================
マウス・ボタンを押したり、離したり、クリック(押してから離す)したとき
 マウス・カーソルがコンポーネントに入ったときまたはコンポーネントから出たとき
 マウス・ホイールが回転したとき、あるいはマウスが移動またはドラッグされたとき
============================================================
マップのマッピング(Map<K,V>など)
Map<K,V>またはSortedMap<K,V> (Map<String,ObjectName>など)は、公開型TabularTypeを持ち、TabularDataにマッピングされます
============================================================
個々のMIDIイベントまたはトラック全体の追加または削除によるデータの編集
シーケンスの個々のトラックのミュート化またはソロ化
シーケンスの再生中に発生したメタイベントまたは制御変更イベントに関するオブジェクトの、リスナーへの通知
============================================================
フック・メソッド
このクラスは、protectedのオーバーライド可能なbeforeExecute(Thread, Runnable)メソッドとafterExecute(Runnable, Throwable)メソッドを提供します
============================================================
paint

モデルの座標体系とビューの座標体系との間の変換

ビュー・オブジェクトはファクトリから生成されており、必ずしも特定のパターンに依存することはないので、モデルの空間表現を適切に位置づける変換を実行できなければいけません
============================================================
setProperty("javax.xml.stream.isRepairingNamespaces",new Boolean(true|false));
このプロパティは、ライターのデフォルトの名前空間接頭辞の宣言を指定します
============================================================
呼出し元のインスタンスが1つも作成されていない
 呼出し元のすべてのスーパー・クラス(Objectクラスは除く)が並行可能として登録されている

いったんクラス・ローダーを並行可能として登録すると、それを元に戻す方法はありません
============================================================
UDTの型の場合、型名は完全指定
  PRECISION int =>精度
  LENGTH int =>データのバイト長
  SCALE short =>スケール - SCALEが適用できないデータ型の場合、nullが返される
============================================================
TYPEがtableIndexStatisticの場合はnull
ASC_OR_DESC String =>列ソート・シーケンス、A =>昇順、D =>降順、ソート・シーケンスがサポートされていない場合は、nullの可能性がある
============================================================
UDTの型の場合、型名は完全指定
  PRECISION int =>精度
  LENGTH int =>データのバイト長
  SCALE short =>スケール - SCALEが適用できないデータ型の場合、nullが返される
============================================================
new File( f.toURI()).equals( f.getAbsoluteFile())

 この例の場合、元の抽象パス名、URI、および新しい抽象パス名は、同じJava仮想マシンの複数の呼出しで作成する必要があります
============================================================
new File( f.toURI()).equals( f.getAbsoluteFile())

 この例の場合、元の抽象パス名、URI、および新しい抽象パス名は、同じJava仮想マシンの複数の呼出しで作成する必要があります
============================================================
例

 ロケールからの暦の選択では、Chronology.ofLocale(java.util.Locale)を使用して、ロケールでサポートされているBCP 47拡張メカニズムに基づいて、暦を見つけ、特定の暦(ca)を要求します
============================================================
」

 たとえば、言語優先度リストが2つの言語範囲("zh-Hant-TW"と"en-US"、優先度順)から構成される場合は、ルックアップ・メソッドはもっともマッチングする言語タグを見つけるために次の言語タグを段階的に検索します
============================================================
例:

丸めモードDOWNの例
入力される数値
DOWNによる丸めで1桁に丸められた入力
5.5 5
2.5 2
1.6 1
1.1 1
1.0 1
-1.0 -1
-1.1 -1
-1.6 -1
-2.5 -2
-5.5 -5
============================================================
META-INF/services/javax.naming.ldap.StartTlsResponse
 構成ファイルおよび対応する実装クラスは、呼出し側スレッドのコンテキスト・クラス・ローダーからアクセスできる必要があります
============================================================
競合の原因になったデータ・ソース内の値
RowSetオブジェクトによって値が変更され、データ・ソースに書き込まれるとき、書込み先のデータ・ソース内の値が前回同期処理を行なった時点とは異なっていた場合、競合が発生したことを表します
============================================================
pがURLPermissionのインスタンスでない場合は、falseを返します
pのメソッドのいずれかがthisのメソッド・リストに含まれていない場合で、thisのメソッド・リストが「*」と等しくないときは、falseを返します
============================================================
プロパティ: accessExternalStylesheet

 スタイル・シートの処理命令、ImportおよびInclude要素、およびドキュメント関数によって設定された外部参照へのアクセスを指定されたプロトコルに制限します
============================================================
START_DOCUMENT  
 なし  
 String encoding、boolean standalone、String version  
 START_DOCUMENTイベントをストリームに書き込む必要はありません
============================================================
オブジェクトのアクティベータへのリモート参照(RemoteRefのインスタンス)
  オブジェクトの一意識別子(UIDのインスタンス)  

 オブジェクトの起動識別子は、オブジェクトを起動システムに登録することで取得できます
============================================================
createRobot
java.awt.Robotオブジェクトの生成
java.awt.Robotによって、コードがネイティブ・レベルのマウス・イベントおよびキーボード・イベントを生成し、画面を読み込むことができるようになる
============================================================
- 先発暦の年2 = 「CE」紀元年2 - 先発暦の年1 = 「CE」紀元年1 - 先発暦の年0 = 「BCE」紀元年1 - 先発暦の年-1 = 「BCE」紀元年2

 実際には、ISO-8601標準で紀元は定義されていません
============================================================
XMLGregorianCalendar eonおよびfractionalSecondはnullに設定されます
DatatypeConstants.FIELD_UNDEFINED値は、フィールドが設定されていないことを示します
============================================================
フォント・フェースとフォント名
Fontは、多くのフェース(heavy、medium、oblique、gothic、およびregularなど)を持つ場合があり、これらすべてのフェースが、同じような文字体裁デザインを持っています
============================================================
HTMLDocumentの変更
HTMLDocumentを変更するためにDocumentやStyledDocumentによって提供されているメソッドのほかに、HTMLDocumentにはいくつかの簡易メソッドも用意されています
============================================================
ロケール・マッチング
国際化されていて複数のロケールのためのローカライズされたリソースを提供するアプリケーションまたはシステムは、ユーザー固有の設定を満たす1つ以上のロケール(または言語タグ)を見つける必要がある場合があります
============================================================
すべての正のlong値xの場合、
 
floor(log2(x)) = 63 - numberOfLeadingZeros(x)
ceil(log2(x)) = 64 - numberOfLeadingZeros(x - 1)
============================================================
たとえば、
 

 ユーザーに10進数値の入力を許可する場合、DecimalFormatに少なくとも1つの10進数(#.0###)を持たせるか、無効なsetAllowsInvalid(true)になる値を許可する必要があります
============================================================
実際に設定された値は、続いてDataLine.getBufferSize()を呼び出せば照会できます
 
 この操作が完了すると、ラインは開いている状態としてマークされ、OPENイベントがラインのリスナーにディスパッチされます
============================================================
http://www.oracle.com/a/b/-
「-」文字は、その前のパスから再帰的に下るすべてのリソースを指します(この例ではhttp://www.oracle.com/a/b/c/d/e.htmlなどが一致します)
============================================================
モデルからの変更に応答する

ビュー全体がいくつもの分割部分で表現されていると(ビューを変更し、最小限の新規コードの書込みをする場合、それが最適な状態ですが)、莫大な数のDocumentListenerを保持するのは不可能です
============================================================
NAMESPACE  
 String prefix、String namespaceURI、boolean isDefaultNamespaceDeclaration
      
 なし  
 名前空間宣言が書き込まれます
============================================================
ResultSet.TYPE_SCROLL_INSENSITIVE
 ResultSet.CONCUR_UPDATABLE
 

RowSetオブジェクトの元の値は、配下のデータ・ソースと最後の同期の前に格納されていた値です
============================================================
ENTITY_REFERENCE_NODE
deepのインポートが要求された場合も、ソース文書とデスティネーション文書でエンティティの定義が異なる場合があるので、EntityReferenceだけがコピーされることになります
============================================================
"validate"


true
[オプション]「XML 1.0」によって定義されているように正規化されている文書のスキーマ(つまり、XMLスキーマ、DTD、スキーマのその他の任意の型または表現)に対する検証を必要とします
============================================================
すべての正のint値xの場合、
 
floor(log2(x)) = 31 - numberOfLeadingZeros(x)
ceil(log2(x)) = 32 - numberOfLeadingZeros(x - 1)
============================================================
アルゴリズム固有の初期化
アルゴリズム固有のパラメータのセットがすでに存在する状況では(DSAのコミュニティ・パラメータなど)、AlgorithmParameterSpec引数を取るinitializeメソッドが2つあります
============================================================
[L("zh"), S("Hant"), C("TW")]
 [L("zh"), S("Hant")]
 [L("zh"), C("TW")]
 [L("zh")]
 Locale.ROOT

ノルウェー語には特例があります
============================================================
「type definition」プロパティが存在する場合:
 
{name}が存在しない場合は、「type definition」プロパティの{name}プロパティと{target namespace}プロパティを公開する
============================================================
進捗バーが確定モードに変わる
    進捗バーが表示可能階層に含まれなくなった
    このUIがアンインストールされた
 
 独自のアニメーション・スレッドを実装する場合は、このメソッドをオーバーライドする必要があります
============================================================
詳細情報のソースにはU.S. Naval Observatory (米国海軍天文台)があり、特に次の「Directorate of Time」、
 

 および次の「Systems of Time」の定義を参照してください
============================================================
Stroke
線幅1、破線なし、マイター・セグメント結合、および角エンド・キャップを持つ角ペン
 Transform
ComponentのGraphicsConfiguration用のgetDefaultTransform
============================================================
ldapContext.newInstance(reqCtls)
ldapContext.setRequestControls(reqCtls)

 ここで、ldapContextはLdapContextのインスタンスです
============================================================
Paths.get(p.toUri()).equals(p .toAbsolutePath())

 この例の場合、元のPath、URI、および新しいPathは、同じJava仮想マシンの複数の呼出しで作成する必要があります
============================================================
Paths.get(p.toUri()).equals( p.toAbsolutePath())

 この例の場合、元のPath、URI、および新しいPathは、同じJava仮想マシンの複数の呼出しで作成する必要があります
============================================================
SupportedAnnotationTypeString:
TypeName DotStaropt
*
DotStar:
. *



 ここで、TypeNameは、「Java(tm)言語仕様」で定義されているとおりです
============================================================
「auth」 - 認証のみ
「auth-int」 - 認証に加え、整合性の保護
「auth-conf」 - 認証に加え、整合性と機密性の保護


 リスト内の先頭に近いクライアントまたはサーバーほど、優先順位が高くなります
============================================================
SHA1withDSA
SHA1withRSA
SHA256withRSA

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのSignatureのセクションで説明されています
============================================================
属性のサマリー



キー
値の型
主な定数
デフォルト値


FAMILY
String
Font DIALOG、DIALOG_INPUT、 SERIF、SANS_SERIF、およびMONOSPACEDを参照してください
============================================================
説明
 説明;lang-en
 説明;lang-de
 説明;lang-fr
 
操作属性

 ディレクトリによっては、管理目的のディレクトリ・オブジェクトと間連付けられた属性である「操作属性」の概念を持つものもあります
============================================================
要素のXMLタグname
要素インスタンスの属性およびコンテンツ・モデルを表すvalue
要素宣言のdeclaredType (xs:element@type属性)
要素宣言のscope
boolean nilプロパティ
============================================================
java.lang:type=MemoryManager,name=manager's name


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
publicLookup().findVirtual(MethodHandle.class, "invoke", type)

ディスカッション: 一般的なメソッド型は、Object引数および戻り値のみを言及するものです
============================================================
メッセージのステータス・バイト
バイト表示によるメッセージの全長(ステータス・バイトとデータ・バイト)
まとまったメッセージを含むバイト配列

MidiMessageは取得のメソッドを含みますが、これらの値は設定しません
============================================================
例:

丸めモードUPの例
入力される数値
UPによる丸めで1桁に丸められた入力
5.5 6
2.5 3
1.6 2
1.1 2
1.0 1
-1.0 -1
-1.1 -2
-1.6 -2
-2.5 -3
-5.5 -6
============================================================
setDefaultSSLContext
デフォルトのSSLコンテキストを設定できる
 
接続が開かれたことや、転送されるプレーン・テキスト・データを監視するコンテキストが悪意のあるコードにより設定される可能性があります
============================================================
setAllowUserInteraction
setDoInput
setDoOutput
setIfModifiedSince
setUseCaches


 一般要求プロパティを修正するには次のメソッドを使用します
============================================================
たとえば、「*.oracle.com」は「foo.bar.oracle.com」に一致します
 
portrangeは、このアクセス権が適用されるポート番号、あるいは有限または無限のポート範囲を指定するために使用されます
============================================================
SwingConstants.RIGHT
SwingConstants.LEFT
SwingConstants.CENTER
SwingConstants.LEADING
SwingConstants.TRAILING
============================================================
(共有モードも似ているが、カスケード信号が関係する場合がある)

 取得でのチェックはキューに入れられる前に呼び出されるため、新しく取得するスレッドは、ブロックされてキューに入れられる他のスレッドより先にバージできます
============================================================
システム・プロパティ
説明


 java.nio.channels.DefaultThreadPool.threadFactory 
 このプロパティの値は、具象ThreadFactoryクラスの完全修飾名になります
============================================================
1.0 概要
BaseRowSetクラスはすべてのRowSet実装の中核機能を提供しますが、どの標準実装でもベンダー固有の標準実装を提供するため、このクラスと1つ以上のRowSetインタフェースを使用することができます
============================================================
1.0 CachedRowSetオブジェクトの作成
 次のコードは、リファレンス実装(RI)のCachedRowSetのデフォルト・コンストラクタを使用して、デフォルトのCachedRowSetオブジェクトを作成します
============================================================
したがって、同じ日の中では12:00 am (深夜零時)< 12:01 am、および12:00 pm (正午)< 12:01 pmとなります
 

 日付や時間のフォーマット文字列は、カレンダの定義の一部ではありません
============================================================
java.nio.fileパッケージとの相互運用性
 java.nio.fileパッケージは、ファイル、ファイル属性、およびファイル・システムにアクセスするためのJava仮想マシン用のインタフェースとクラスを定義します
============================================================
JTabbedPane.TOP
JTabbedPane.BOTTOM
JTabbedPane.LEFT
JTabbedPane.RIGHT

 デフォルト値が設定されていない場合は、SwingConstants.TOP
============================================================
ツリーにモデルがない
    ツリーにルートがない
    ルートが折りたたまれている
    ルートがリーフ・ノードである
 
nullを処理するかどうか、処理する場合はどのようにして処理するかは、開発者が決定します
============================================================
接続の作成方法に影響する要求コントロール
 コンテキスト・メソッドに影響する要求コントロール
 

 接続の作成方法に影響する要求コントロールは、LDAPサーバーとの接続の設定または再設定のどちらの場合でも使用されます
============================================================
persistPeriodNumber
OnTimeおよびNoMoreOftenThan PersistPolicyの永続サイクルの頻度(秒単位)
currencyTimeLimitNumber
キャッシュ値の有効期間
============================================================
persistPeriodNumber
OnTimeおよびNoMoreOftenThan PersistPolicyの永続サイクルの頻度(秒単位)
currencyTimeLimitNumber
キャッシュ値の有効期間
============================================================
通知ディスパッチ
MBeanは、通知の発行時に、addNotificationListenerを使って追加され、かつremoveNotificationListenerを使って削除されていない各リスナーを考慮に入れます
============================================================
通知ディスパッチ
MBeanは、通知の発行時に、addNotificationListenerを使って追加され、かつremoveNotificationListenerを使って削除されていない各リスナーを考慮に入れます
============================================================
publishEndpoint
 

publishEndpointアクセス権は、javax.xml.ws.Endpointクラスによって定義されたpublishメソッドを使用した、Webサービス端点の公開を許可します
============================================================
または
 

 どちらの場合も、X.509証明書をインスタンス化するコードは、実際の実装を特定したりデフォルト実装で初期化したりするのに、cert.provider.x509v1セキュリティ・プロパティの値を使用します
============================================================
ユーザーが指定するか、DBMSで生成される名前であり、たとえばオーバーロード関数ではFUNCTION_NAMEと異なる可能性がある
  
PRECISION列は、そのパラメータまたは列に指定された列のサイズを表します
============================================================
char[]
  java.lang.String
  java.io.Reader
 
 docの印刷データ表現オブジェクトを使用して、印刷データを文字のストリームとして読み取るためのReaderを構築して返します
============================================================
カーソルのホット・スポットは移動したが、前のdragEnter()呼出しに関連したドロップ・サイトの操作可能な部分とまだ交差している
 ドロップ・サイトがまだアクティブである
 ドロップ・サイトがドラッグを受け入れる
============================================================
カーソルのホット・スポットは移動したが、前のdragEnter()呼出しに関連したドロップ・サイトの操作可能な部分とまだ交差している
 ドロップ・サイトがまだアクティブである
 ドロップ・サイトがドラッグを受け入れる
============================================================
オプション 説明 

 APPEND 
 このオプションが存在する場合は、ファイルは書込みのために開かれ、チャネルのwriteメソッドの各呼出しは、まず位置をファイルの終わりに進めてから要求されたデータを書き込みます
============================================================
オプション 説明 

 APPEND 
 このオプションが存在する場合は、ファイルは書込みのために開かれ、チャネルのwriteメソッドの各呼出しは、まず位置をファイルの終わりに進めてから要求されたデータを書き込みます
============================================================
たとえば、
 
2.0 用法のガイドライン

Joinableインタフェース内のメソッドで、RowSetオブジェクトは、一致列(SQL JOINのベースとなる列)の設定、一致列の取得、または一致列の設定解除を行います
============================================================
CallbackHandler

 コンストラクタにCallbackHandler入力パラメータが指定されている場合、LoginContextは呼出し側で指定されたCallbackHandlerオブジェクトを使用する
============================================================
セキュリティ・マネージャとの対話
 バイト・コード命令は関連クラス・ローダー内のクラスしか参照できませんが、このAPIでは、Classオブジェクトへの参照が使用可能であるかぎり、任意のクラス内のメソッドを検索できます
============================================================
多くのOMG IDL宣言の一部である型指定を表すインタフェース・リポジトリによって使用される
 

TypeCodeオブジェクトの表現は不透明ですが、抽象的には、TypeCodeオブジェクトの構成要素は次のとおりです
============================================================
2.0 WebRowSetの状態
 次に、WebRowSet実装で、XMLスキーマを使用して、更新、挿入、または削除操作を記述し、XMLでのWebRowSetオブジェクトの状態を記述する方法について具体的に説明します
============================================================
LEFT
RIGHT
CENTER
LEADING
TRAILING


 たとえば次の図は、フロー・レイアウト・マネージャ(デフォルトのレイアウト・マネージャ)を使用して3つのボタンを配置するアプレットを示します
============================================================
この動作は、上位のプロデューサ・オブジェクトが上下左右順でピクセルを送信する場合に、フィルタが上下左右順でピクセルを送信することを判断できる場合に適切

 
 データを単に送信する場合はメソッドをオーバーライドする
============================================================
クラス名がSMXBeanのインタフェース(Sは空ではない文字列であり、注釈@MXBean(false)を含まない); および/または
@MXBean(true)または単に@MXBeanという注釈を含むインタフェース
============================================================
その他の型のマッピング
JavaクラスやインタフェースJが上記の表に示したそのほかのルールに当てはまらない場合、次に示すように、MXBeanフレームワークによりCompositeTypeへのマッピングが試みられます
============================================================
Object.wait (タイム・アウトなし)
Thread.join (タイム・アウトなし)
LockSupport.park

待機状態のスレッドは、ほかのスレッドが特定のアクションを実行するのを待機しています
============================================================
宣言型による非整列化

declaredTypeパラメータを使用した非整列化メソッドにより、JAXBContextにルート要素のXML名のマッピングが含まれないときでも、XMLデータのルート要素を直列化復元できます
============================================================
エスケープ・オクテット、引用符、エンコーディング、およびデコーディング 

 RFC 2396では、エスケープ・オクテットをユーザー情報、パス、クエリー、およびフラグメントの各コンポーネントに表示することができます
============================================================
)
 このクラスはさまざまなJInternalFrameメソッドにポリシーを提供しますが、直接呼び出されるものではなく、さまざまなJInternalFrameメソッドがDesktopManagerに呼び込まれます
============================================================
"schema-location"
[オプション]空白文字(「XML 1.0」のセクション2.3で定義されている非終端生成Sに一致する文字)で区切られたURIのリストを含むDOMStringオブジェクトを表します
============================================================
assert elements.overrides(m1, m2, elements.getTypeElement("java.lang.String")); 


 さらに興味深いケースとして、次の例があります
============================================================
(MapMode.PRIVATE) 

 このチャネルは、読込み専用のマッピングの場合は読み込み、読み込み/書込みのマッピングまたは非公開マッピングの場合は読み込みと書込みの両方が可能になっていなければいけません
============================================================
ComponentOrientation.LEFT_TO_RIGHT
ComponentOrientation.RIGHT_TO_LEFT

 通常、フロー・レイアウトはパネルにボタンを配置するために使用されます
============================================================
標準プロパティ: 要求に関連付けられているSSL証明書(存在する場合)

 型: java.security.cert.X509Certificate[] この配列の順序は、信頼に基づく昇順として定義されています
============================================================
EXTENDED_FILTERING


拡張フィルタリングを実行して"de-DE"、"de-Deva-DE"、"de-DE-1996"、"de-Latn-DE"および"de-Latn-DE-1996"を返します
============================================================
メソッド・ハンドルの呼出し
invokevirtual命令がはじめて実行されるときにそのリンクが行われますが、そのために、命令に含まれる名前がシンボルとして解決され、メソッド呼出しが静的に正しいことが検証されます
============================================================
非干渉でなければいけない(ストリームのソースを変更しない)、および
ほとんどの場合、ステートレスでなければいけない(その結果は、ストリーム・パイプラインの実行中に変化する可能性のあるどの状態にも依存すべきでない)
============================================================
オプション名
説明


 SO_RCVBUF 
 ソケット受信バッファのサイズ 


 SO_REUSEADDR 
 アドレスを再利用します 



 追加(実装固有)のオプションをサポートできる場合もあります
============================================================
MIME [RFC2045]規格
コンテンツを保有していること
 ヘッダー部分に次のヘッダー内容を含むこと
  
Content-Type AttachmentPartオブジェクトのコンテンツのデータの型を指定
============================================================
フィールド
値
説明


Calendar.MONTH
Calendar.JANUARYからCalendar.UNDECIMBER
月の番号付けは0から始まります(例: 0 - 1月、...、11 - 12月)
============================================================
EntityResolver
DTDHandler
ContentHandler
ErrorHandler

アプリケーションの作成者は、インタフェースの一部だけを実装する必要があるとき、このクラスを拡張します
============================================================
DnDConstants.ACTION_COPY
 DnDConstants.ACTION_MOVE
 DnDConstants.ACTION_LINK

 上記以外の値を割り当てると、不特定の動作が発生します
============================================================
)

 この実装は、Throwableを要求するいずれかのコンストラクタ経由で提供された原因、またはThrowable.initCause(Throwable)メソッドを使用して作成後に設定された原因を返します
============================================================
)

 この実装は、Throwableを要求するいずれかのコンストラクタ経由で提供された原因、またはThrowable.initCause(Throwable)メソッドを使用して作成後に設定された原因を返します
============================================================
)

 この実装は、Throwableを要求するいずれかのコンストラクタ経由で提供された原因、またはThrowable.initCause(Throwable)メソッドを使用して作成後に設定された原因を返します
============================================================
Logger.getLevel().getName();
 

 指定されたロガーのLevelがnullの場合、それはこのロガーの実効レベルが親から継承されることを意味しますが、その場合は空の文字列が返されます
============================================================
"xml-declaration"


true
[必須] (デフォルト) Document、Element、またはEntityノードが直列化される場合は、XML宣言またはテキスト宣言を含めるようにしてください
============================================================
属性名
型


poolName
java.lang.String


usage
javax.management.openmbean.CompositeData


count
java.lang.Long
============================================================
これにより、次のようなgetterが、

List<String> getNames()

名前「names」および公開型ArrayType(1, SimpleType.STRING)の項目にマッピングされます
============================================================
10:30+01:00
11:00+01:00
12:00+02:00
11:30+01:00
12:00+01:00
12:30+01:00

 2番目と3番目の値は、時系列上の同じインスタントを表しています
============================================================
条件付き構文(?(条件)X)および(?(条件)X|Y)

 埋込みコード構文(?{コード})および(??{コード})
 埋込みコメント構文(?#comment) 
 プリプロセス演算\l \u、\L、および\U
============================================================
PopupMenuEventには、イベントを送信するJPoupMenuのイベント・ソースだけが含まれます
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースとの互換性がなくなる予定です
============================================================
このスキャナがクローズしている場合

  このメソッドをhasNext(pattern)の形式で呼び出した場合、hasNext(Pattern.compile(pattern))の呼び出しと同じ結果が得られます
============================================================
オプション名
説明


 SO_RCVBUF 
 ソケット受信バッファのサイズ 


 SO_REUSEADDR 
 アドレスを再利用します 



 追加(実装固有)のオプションをサポートできる場合もあります
============================================================
char[]
 java.lang.String
 java.io.Reader

 docの印刷データ表現オブジェクトを使用して、印刷データを文字のストリームとして読み取るためのReaderを構築して返します
============================================================
http://java.sun.com/xml/ns/jdbc/webrowset.xsd


 このスキーマ定義は、XMLでRowSetを記述するときに必要な標準XMLドキュメント形式について記述したものです
============================================================
java.nio.channels.DefaultThreadPool.initialSize 
 デフォルト・グループのinitialSizeパラメータの値(withCachedThreadPoolを参照)
============================================================
FileDataSourceのタイプ判別のセマンティックス

 FileDataSourceクラスは、ファイルのデータのタイプ判別を、FileTypeMapクラスからサブクラス化されたオブジェクトに委譲します
============================================================
有効ホスト名=ホスト名にドットが含まれる場合はhostname、 ドットが含まれない場合はhostname.local
 
ホストAの名前がホストBの名前とドメイン一致するのは、次のいずれかが成り立つ場合です
============================================================
DropMode.USE_SELECTION
DropMode.INSERT


 このコンポーネントがドロップを受け付けるTransferHandlerを持っていなければ、ドロップ・モードの効果はありません
============================================================
天文学的および科学的注意


 修正ユリウス日は世界標準時またはUTCに基づいていると見なされる場合がありますが、この実装では常にローカル日付の修正ユリウス日が使用され、オフセットやタイムゾーンは無視されます
============================================================
java.lang:type=MemoryPool,name=pool's name


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


allowHttpTrace
HttpURLConnection内でHTTP TRACEメソッドを使用する機能
============================================================
Logger.getLevel().getName();
 

 指定されたロガーのLevelがnullの場合、それはこのロガーの実効レベルが親から継承されることを意味しますが、その場合は空文字列が返されます
============================================================
Thread.sleep
Object.wait (タイム・アウトあり)
Thread.join (タイム・アウトあり)
LockSupport.parkNanos
LockSupport.parkUntil
============================================================
(EventObject.getSource()を参照してください)

 注: 正常に動作するTrayIcon実装では、ポップアップ・メニューの表示とトレイ・アイコンの選択に異なるジェスチャが割り当てられます
============================================================
modelToView
viewToModel
getDocument
getElement
getStartOffset
getEndOffset

変換しようとする前にレイアウトを有効にする必要があります
============================================================
ATTRIBUTE  
 QName name、String value 
 QName type 
 START_ELEMENTで使用されるものと同じ字句形式検索アルゴリズムを使用して、属性が書き込まれます
============================================================
shape.contains(x,y)には次が必要:  bounds.contains(x,y)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
roleString
ModelMBeanConstructorInfoModelMBeanOperationInfo
constructor、operation、getter、またはsetterのいずれか
============================================================
shape.contains(x,y)には次が必要:  bounds.contains(x,y)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
ComponentUIとデフォルト

 一般に、すべてのComponentUIsは、ComponentUIがルック・アンド・フィールを提供するJComponent上に様々なプロパティを設定する必要があります
============================================================
次の場合
 
最初の引数が負のゼロであり、かつ2番目の引数が負の有限の奇数の整数の場合、または
 最初の引数が負の無限大であり、かつ2番目の引数が正の有限の奇数の整数の場合
 
 結果は負の無限大になります
============================================================
shape.contains(x,y)には次が必要:  bounds.contains(x,y)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
@MersennePrime(9 


 この場合の適切な応答としては、次のように空のコンプリート・リストを返すか、

 



 あるいは、次のように、有用なメッセージを含む単一の空コンプリートを返します
============================================================
shape.contains(x,y)には次が必要:  bounds.contains(x,y)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(x,y)には次が必要:  bounds.contains(x,y)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
次の場合
 
最初の引数が負のゼロであり、かつ2番目の引数が負の有限の奇数の整数の場合、または
 最初の引数が負の無限大であり、かつ2番目の引数が正の有限の奇数の整数の場合
 
 結果は負の無限大になります
============================================================
そのcancelメソッドの呼出しによって明示的に取り消される
 そのオブジェクトにアクセスできなくなったために暗黙的に取り消される 
 監視サービスを閉じることで取り消される 

 監視鍵には状態があります
============================================================
Z - UTC用
 +h
+hh
+hh:mm
-hh:mm
+hhmm
-hhmm
+hh:mm:ss
-hh:mm:ss
+hhmmss
-hhmmss

 ±はプラス記号またはマイナス記号を意味します
============================================================
たとえば、
 
class Shimmer implements FloorWax, DessertTopping { ... }

 という宣言があり、sの値がShimmerのインスタンスであるとします
============================================================
Digits
DecimalFormatは、フォーマットにDecimalFormatSymbolsオブジェクトで定義されている、ローカライズされたゼロ数字で始まる10個の連続した文字を数字として使用します
============================================================
次の場合
 
最初の引数が負のゼロであり、かつ2番目の引数が正の有限の奇数の整数の場合、または
 最初の引数が負の無限大であり、かつ2番目の引数が負の有限の奇数の整数の場合
 
 結果は負のゼロになります
============================================================
例外
 メソッドinvokeExactとinvokeはThrowableをスローするように宣言されていますが、これは、メソッド・ハンドルからスローできるものについて、静的な制限は一切ないことを示すためです
============================================================
たとえば、
 



 Javaプラットフォームでは、ResourceBundleの2つのサブクラスListResourceBundleおよびPropertyResourceBundleが用意されています
============================================================
clearProviderProperties.{provider name}
Providerによって実装されているサービスの参照に使用されるプロパティが空になるように、Providerを「クリア」する
============================================================
次の場合
 
最初の引数が負のゼロであり、かつ2番目の引数が正の有限の奇数の整数の場合、または
 最初の引数が負の無限大であり、かつ2番目の引数が負の有限の奇数の整数の場合
 
 結果は負のゼロになります
============================================================
段落属性が抽出され、調べられる
 双方向の並べ替えのためにテキストが分析され、必要な場合は並べ替え情報が計算される
 テキストがスタイル・ランにセグメント化される
 スタイル・ラン用のフォントが選択される
============================================================
XML Schema置換グループ・サポート 
 XML Schemaでは、XML文書作成者は置換グループを使用して、スキーマのコンテンツ・モデルで静的に指定されていないXML要素名を使用することができます
============================================================
)
 toDisplayStringメソッドを使うと、このクラスで定義されたキーに対して事前に定義されたResourceBundleから、ロケールに依存しないキーのローカライズされた文字列を取得できます
============================================================
Calendar.DAY_OF_WEEK
Calendar.SUNDAYからCalendar.SATURDAY
曜日の番号付けは日曜日の1から始まります(つまり、1 - 日曜日、...、7 - 土曜日)
============================================================
\u000Dと\u000A、キャリッジ・リターンと改行 
 \u000A、改行 
 \u000D、キャリッジ・リターン 

 将来のリリースでは、追加のUnicode行末記号が認識される可能性があります
============================================================
GridBagConstraints.ipadx, GridBagConstraints.ipady
レイアウト内のコンポーネントの内側のパディング(コンポーネントの最小サイズに追加する値)を指定します
============================================================
メモリーの同期化
すべてのLock実装は、『Java言語仕様』(17.4 メモリー・モデル)に記載されているように、組込み監視ロックが提供するのと同じメモリー同期セマンティックスを適用する必要があります
============================================================
エンコーディング

 デフォルトでは、XMLデータをjava.io.OutputStreamまたはjava.io.Writerに生成する場合、MarshallerはUTF-8エンコーディングを使用します
============================================================
setSecurityManager
セキュリティ・マネージャの設定(既存の設定を置き換える可能性あり)
 
セキュリティ・マネージャとは、アプリケーションがセキュリティ・ポリシーを実装できるクラスです
============================================================
createSecurityManager
新しいセキュリティ・マネージャの作成
他のクラスまたは実行スタックの情報を公開する可能性がある、保護された、機密性の高いメソッドへのアクセスをコードに与えます
============================================================
ignoreCaseがfalseであり、lenより小さく、負でない、次のような整数kがある:
 
ignoreCaseがtrueであり、lenより小さく、負でない、次のような整数kがある:
 
 および
============================================================
注:
DefaultTreeModelクラスのinsertNodeIntoメソッドと同様に、insertElementAtは、インデックスがベクターのサイズに一致したときにVectorへの追加を行います
============================================================
検証と整形式


 クライアント・アプリケーションは、setSchema(javax.xml.validation.Schema) APIを介してJAXP 1.3検証メカニズムを有効または無効にできます
============================================================
JavaBeanプロパティ 
 staticでない非一時フィールド 

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
プロパティ: accessExternalSchema

 schemaLocation属性、ImportおよびInclude要素によって設定された外部参照へのアクセスを指定されたプロトコルに制限します
============================================================
JavaBeanプロパティ 
 staticでない非一時フィールド 

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
JavaBeanプロパティ 
 staticでない非一時フィールド 

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
Z - UTC用(ISO-8601)
 +hh:mmまたは-hh:mm - 秒がゼロの場合(ISO-8601)
 +hh:mm:ssまたは-hh:mm:ss - 秒がゼロでない場合(非ISO-8601)
============================================================
UNIT_INCREMENT
 UNIT_DECREMENT
 BLOCK_INCREMENT
 BLOCK_DECREMENT
 TRACK

 上記以外の値を割り当てると、未指定の動作が発生します
============================================================
空白以外のISO制御文字
 
'\u0000' - '\u0008'
'\u000E' - '\u001B'
'\u007F' - '\u009F'

汎用カテゴリ値FORMATを保持するすべての文字
============================================================
2012-12-03 (ISO)
2012-12-04 (ISO)
2555-12-04 (ThaiBuddhist)
2012-12-05 (ISO)

 2番と3番の値は時系列で同じ日付を表します
============================================================
modified_package_name/name

 ここで、modified_package_nameは、このオブジェクトのパッケージ名の'.' ('\u002e')を'/'で置き換えたものです
============================================================
descriptionResource BundleBaseNameString任意
descriptionResourceKeyフィールドに指定されたキーがあるResourceBundleのベース名
============================================================
TEXT_NODE、CDATA_SECTION_NODE、COMMENT_NODE
CharacterDataを継承する3つのノード型で、data属性とlength属性をソース・ノードからコピーします
============================================================
"check-character-normalization"


true
[オプション]文書内の文字が、「XML 1.1」の付録Bで定義されているように、完全に正規化されているかどうかを確認します
============================================================
(デフォルトは「%h/java%u.log」) 
   <handler-name>.appendはFileHandlerが任意の既存のファイルに追加するかどうかを指定します(デフォルトはfalse)
============================================================
NONE


STAPLE


EDGE_STITCH




  
 

BIND


SADDLE_STITCH


COVER


  
 



 次のFinishingsの値はより具体的です
============================================================
IPアドレスのスコープ 
 リンク・ローカル・アドレスは、自動アドレス構成、隣接アドレスの発見などを目的として、あるいはルーターが存在しない場合に、単一リンクのアドレス指定に使うために設計されています
============================================================
ルック・アンド・フィールの推奨事項
UIManagerに記載されているとおり、各LookAndFeelに、開発者やシステムのデフォルトによって階層化されたデフォルトのセットを提供する機会が与えられます
============================================================
正規化とアクセント

RuleBasedCollatorは自動的にそのルール・テーブルを処理することにより、事前合成済みバージョンと結合文字バージョンのアクセント付き文字がどちらも含まれるようにします
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


createClassLoader
クラス・ローダーの作成
このアクセス権を与えるのはきわめて危険です
============================================================
getClassLoader
クラス・ローダー(クラスを呼び出すためのクラス・ローダーなど)の取得
これにより、特定のクラスのクラス・ローダーを取得するためのアクセス権を、攻撃者に与えることになります
============================================================
printIdentity
アイデンティティの本人の名前、および必要に応じてそのアイデンティティが使用されるスコープ、そのアイデンティティがスコープ内で「信頼できる」と見なされているかどうかを表示する
============================================================
shape.contains(x,y)にはbounds.contains(x,y)が必要
 

pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
値の型
   関連する定義済み定数(存在する場合)
   属性が設定されていない場合のデフォルトの効果
   制限がある場合の有効値
   効果の説明
 

値

属性値は常に不変でなければなりません
============================================================
2.3 状態3 - 行の挿入
WebRowSetオブジェクトは、挿入行に移動して、行の各列に対して適切な更新メソッドを呼び出し、insertRowメソッドを呼び出すことによって、新しい行を挿入できます
============================================================
Enum値
XMLスキーマ値


UNQUALIFIED
unqualified


QUALIFIED
qualified


UNSET
XMLスキーマ・フラグメントに名前空間修飾属性は含まれない
============================================================
2.0 CachedRowSetオブジェクトからのデータの取得
 データは、ResultSetインタフェースから継承された取得メソッドを使用して、CachedRowSetオブジェクトから取得されます
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
A<B (AはBより短い)
  A>B (AはBより長い)
  A==B (AとBは同じデュレーション)
  A<>B (AとBの比較は判定不可)
 
たとえば、30日と1か月は意味上比較できません
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
このインプット・メソッドのインスタンスを生成した直後
 別のインプット・メソッドからこのインプット・メソッドに切り替えるとき
 InputContext.setCharacterSubsetsにより
============================================================
NANO_OF_SECOND
MICRO_OF_SECOND
MILLI_OF_SECOND
INSTANT_SECONDS

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
クラスの直列化バージョンが、ストリームから読み込まれたクラス記述子の直列化バージョンと一致しない
  クラスに未知のデータ型が含まれている
  クラスに、アクセス可能な引数なしのコンストラクタがない
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
)
 T1がbooleanでT0が別のプリミティブの場合、Javaキャスト変換(JLS 5.5)によってT0がbyteに変換され、結果の下位ビットのテストが、(x & 1)!= 0と同様に行われます
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
たとえば、

  
フェーザのツリーを使用してnタスクのセットを作成するには、構築時に登録するPhaserを受け入れるコンストラクタを備えたTaskクラスを想定すると、次の形式のコードを使用できます
============================================================
)
 
 使用可能なポートを知るために、MixerインタフェースのgetSourceLineInfoメソッドとgetTargetLineInfoメソッドを使用してポート情報オブジェクトを取得できます
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
VALUE_ALPHA_INTERPOLATION_SPEED
VALUE_ALPHA_INTERPOLATION_QUALITY
VALUE_ALPHA_INTERPOLATION_DEFAULT
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)には次が必要:  bounds.contains(p)


pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
同じVM上の同じtime値に生成されたUIDを識別するためのshort値
 
生成されたUIDインスタンスが生成元のホスト上で常に一意であるためには、ホストのリブートに1ミリ秒を超える時間が必要です
============================================================
トラブルシューティングのヒント
jaxp.debugシステム・プロパティを設定すると、このメソッドは実行中の処理や検索している場所に関する大量のデバッグ・メッセージをSystem.errに出力します
============================================================
MAX境界およびMIN境界に達した場合

targetSizeが[MIN, MAX]の範囲外の場合、このアルゴリズムによってすべてのサイズがそれぞれの適切な最大値または最小値の制限値に設定されます
============================================================
たとえば、数値型の場合はNumber


参照参照
for parameter types: S is a supertype of Q for return types:なし
QからSにキャスト
============================================================
例:
 


 このクラスのトレースは、システム・プロパティjavax.sql.rowset.RowSetFactory.debugをfalse以外の任意の値に設定することによって、有効にできます
============================================================
<crypto_service>.<algorithm_or_type> <attribute_name>:<attribute_value>
 暗号化サービス名には、ドットを含まないようにします
============================================================
コンストラクタを使用

setSyncProviderメソッドを使用
      


 Javaプラットフォームでは、デフォルトで、RowSet同期プロバイダのリファレンス実装を常に使用できます
============================================================
同期ブロックまたはメソッドに入るために待機していた、または
通知を受けるためにObject.waitメソッドで待機していた、または
LockSupport.park呼出しにより、parkが行われた
============================================================
JavaBeanプロパティ 
 フィールド 
 パッケージ

 Java型に定義された@XmlSchemaType注釈は、プロパティまたはフィールドからそのJava型へのすべての参照に適用されます
============================================================
合成式の適用

 調整済みのAs、Ad、Cs、およびCdを標準PorterとDuff式で使用して、合成係数FsおよびFdを計算し、次に結果のあらかじめ乗算されている成分ArおよびCrを計算します
============================================================
アプレットのフレームが最上位フレームの場合は"_self"と同じ
"_blank" 名前のない新しい最上位ウィンドウに表示する
namenameに名前を指定したフレームまたはウィンドウに表示する
============================================================
新しいクラス定義の場合は、ClassLoader.defineClassに渡されるバイト
    
クラス再定義の場合は、definitions.getDefinitionClassFile()
============================================================
注:
 IP (Internet Protocol)バージョン4の場合、この値はintegerで構成され、最下位8ビットが、ソケットによって送信されたIPパケットのTOSオクテットの値を表します
============================================================
ビット値


バイト1
1
1
1
0
ビット15-12


バイト2
1
0
ビット11-6


バイト3
1
0
ビット5-0




 標準UTF-8形式とこの形式とは、次の点で異なります
============================================================
"well-formed"


true
[必須] (デフォルト)すべてのノードが、Document.xmlVersionで使用中のXMLバージョンに従う整形式のXMLであるかどうかを確認します
============================================================
GridBagConstraints.fill
コンポーネントの表示領域が、必要とするサイズよりも大きい場合には、コンポーネントのサイズ変更を行うかどうかと変更の方法を決定するために使用されます
============================================================
DRAG_LAYER
コンポーネントをドラッグする際には、そのコンポーネントをドラッグ・レイヤーに割り当てることによって、コンテナ内のほかのすべてのコンポーネントより上に表示させることができます
============================================================
」

 フィルタリングには次の2つのタイプがあります: 基本言語範囲用のフィルタリング(「基本フィルタリング」といいます)と拡張言語範囲用のフィルタリング(「拡張フィルタリング」といいます)です
============================================================
LSOutput.characterStream


LSOutput.byteStream

 LSOutput.systemId


 アプリケーションに所属するLSOutputオブジェクト
============================================================
属性名
型


init
java.lang.Long


used
java.lang.Long


committed
java.lang.Long


max
java.lang.Long
============================================================
setMethodString
setメソッドのオペレーション記述子の名前
protocolMapDescriptor
JMX仕様ドキュメントの「Protocol Map Support」を参照
============================================================
たとえば、
 

 -Djavax.sql.rowset.RowSetFactory=com.sun.rowset.RowSetFactoryImpl
 


ServiceLoader API
============================================================
stopThread
Threadのstopメソッドの呼出しによるスレッドの停止
スレッドへのアクセス権をすでに取得している場合、コードから、システム内のどのスレッドでも停止できるようになります
============================================================
注:
 IP (Internet Protocol)バージョン4の場合、この値はintegerで構成され、最下位8ビットが、ソケットによって送信されたIPパケットのTOSオクテットの値を表します
============================================================
同様に、

 

 あるコードに対して上のアクセス権が認められた場合、そのコードは、ローカル・ホスト上の1024から65535のポートに対して、接続の受け入れ、接続、待機を行うことを許可されます
============================================================
CORBAインタフェース・リポジトリから取得する
 

TypeCodeクラスのほとんどのメソッドはアクセス用メソッドであり、TypeCodeオブジェクトに格納されている情報は特定の型に固有です
============================================================
startElementイベント内のAttributesオブジェクトの永続的なスナップショットを作成する
SAX2ドライバまたはフィルタ内でAttributesオブジェクトを構築または変更する
============================================================
)

  このClassオブジェクトがクラスを表す場合、戻り値は、そのクラスによって実装されたインタフェースを指定するためのインタフェース・タイプの使用を表すオブジェクトを格納している配列です
============================================================
DataHandlerとURL
 現在のDataHandlerの実装では、DataHandlerがURLを使って構築されると、URLDataSourceのprivateインスタンスを作成します
============================================================
currencyTimeLimitNumber
ModelMBeanInfoModelMBeanAttributeInfoModelMBeanOperationInfo
キャッシュ値の有効期間
============================================================
WHEN_IN_FOCUSED_WINDOW
 アクションは、コンポーネントがフォーカスを持つか、またはフォーカスを持つウィンドウ内にある場合にキー・ストロークが発生したときにだけ呼び出される
============================================================
DEFAULT_OPTION
YES_NO_OPTION
YES_NO_CANCEL_OPTION
OK_CANCEL_OPTION

 使用できるのはこれらのオプション・ボタンにかぎりません
============================================================
DiffieHellman
DSA
RSA

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのKeyFactoryのセクションで説明されています
============================================================
実装上の考慮事項
通常、Lock実装は、ロックを解放可能なスレッドに関して制限を課し(一般に、ロックのホルダーだけが解放できる)、制限が侵された場合には(チェックされない)例外をスローできます
============================================================
2. ピーク・メモリー使用量

 Java仮想マシンは、Java仮想マシンが起動されたり、ピーク・メモリー使用量がリセットされたりしてからのメモリー・プールのピーク・メモリー使用量を保持します
============================================================
参照キャスト
 アンボクシング
 プリミティブ・ワイドニング変換
 

 呼び出しから返された結果は、プリミティブの場合はボクシングされ、戻り値の型がvoidの場合は強制的にnullにされます
============================================================
shape.contains(p)にはbounds.contains(p)が必要
 

pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
shape.contains(p)にはbounds.contains(p)が必要
 

pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
たとえば、指定されたbaseNameが「Messages」であり、指定されたlocaleがLocale("ja", "", "XX")であった場合、LocaleのList:
 
 が返されます
============================================================
shape.contains(p)にはbounds.contains(p)が必要
 

pointがshapeの内側にない場合は、引き続きboundsオブジェクトに含まれている可能性があります
============================================================
トークンは、1個の区切り文字か、区切り文字でない文字が1個以上連続している部分である
 
StringTokenizerオブジェクトは内部的に、トークン化される文字列内の現在の位置を管理します
============================================================
カーソルの移動
 個々の行の変更(更新、削除、または挿入)
 RowSetオブジェクト全体の内容の変更
 

 通知に使用されるBaseRowSetメソッドは、発生したイベントの型を示します
============================================================
21/110 = 0.190 // integer=190, scale=3 
加算、減算、および乗算では、スケールの縮小は、正確な結果の破棄される桁位置の数と等しくなる点に注意してください
============================================================
日付フィールドの場合:
 

時間フィールドの場合:
 

選択したフィールドの組み合わせで値が設定されていないカレンダ・フィールドが存在する場合、Calendarはデフォルト値を使用します
============================================================
NO_DECOMPOSITION
 CANONICAL_DECOMPOSITION
 FULL_DECOMPOSITION
 
 これらの意味については、これらの定数の説明を参照してください
============================================================
返された抽象パス名が示すファイルが存在するのは、このメソッドが呼び出されたあとである
  このメソッドまたはその派生メソッドのどれも仮想マシンの現在の呼出しでふたたび同じ抽象パス名を返さない
============================================================
WINDOW_OPENED
WINDOW_CLOSING: このイベントを処理する際に、プログラムが明示的にウィンドウの非表示も破棄も行わない場合、ウィンドウ・クローズの操作は取り消されます
============================================================
"disallow-doctype"



true
[オプション]文書の解析中にdoctypeノードが検出された場合は、致命的エラー「doctype-not-allowed」をスローします
============================================================
HmacMD5
HmacSHA1
HmacSHA256

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのMacのセクションで説明されています
============================================================
それ以外の文字が挿入されると、無効な編集となる
 

 デフォルトではMaskFormatterは無効な編集を許可しませんが、setAllowsInvalidメソッドを使用すると変更できます
============================================================
MD5
SHA-1
SHA-256

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのMessageDigestのセクションで説明されています
============================================================
)
 T0が参照でT1がプリミティブの場合、実行時にアンボクシング変換が適用されますが、そのあと、プリミティブ値に対してJavaメソッド呼出し変換(JLS 5.3)が行われる可能性があります
============================================================
MXBean仕様
MXBeanの概念を使用すると、javax.management.openmbeanにより定義された、定義済みの型セットだけを参照するMBeanを簡単にコーディングできます
============================================================
ビット・マスクベースおよびenumベースのUnicode範囲
このクラスは、スクリプト固有の数字のUnicode範囲を表すために異なる2つのプログラミング・インタフェースをサポートしています
============================================================
insertProvider
新しいプロバイダの追加
悪意のあるプロバイダ(受け取った非公開鍵を暴露するプロバイダなど)を、もっとも高い優先順位を持つプロバイダとして追加できるようになります
============================================================
アクセス権ターゲット名
アクセス権により許可される操作
このアクセス権を許可した場合のリスク


insertProvider.{provider name}
指定した新しいプロバイダの追加
============================================================
SpringLayoutとその他のレイアウト・マネージャ
 


注: 多くのレイアウト・マネージャとは異なり、SpringLayoutは、管理するコンポーネントの位置を自動的に設定しません
============================================================
)

 この実装は、Throwableを要求するいずれかのコンストラクタ経由で提供された原因、またはinitCause(Throwable)メソッドを使用して作成後に設定された原因を返します
============================================================
http://standards.iso.org/iso/9075/2002/12/sqlxml


 このスキーマ定義は、RowSetオブジェクトの内部データを次の3つの領域から記述します
============================================================
例: HashMapのカスタマイズ・マッピング
 次の例は、@XmlAdapterと@XmlJavaTypeAdapterを使用してHashMapのマッピングをカスタマイズする方法を示します
============================================================
このメソッドを文字セットcsに対して呼び出すと、次の式と同じ結果が返されます

 

 ただし、次の呼び出しまでの間にエンコーダをキャッシュできるという点で、このメソッドのほうが効率的です
============================================================
このインタフェースを使用するタイミング
 アプリケーションで複数の暦体系を処理する必要がある場合でも、APIの設計では、このインタフェースよりLocalDateTimeの使用が推奨されます
============================================================
このインタフェースを使用するタイミング
 アプリケーションで複数の暦体系を処理する必要がある場合でも、APIの設計では、このインタフェースよりZonedDateTimeの使用が推奨されます
============================================================
)

 Condition実装は、通知の順序付けが保証されることや、通知の実行時にロックを保持する必要がないことなど、Object監視メソッドとは異なる動作やセマンティックスを提供できます
============================================================
com.foo.MyHandler.level=INFO 
   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter
============================================================
interfaceClassName
StringMBeanInfo
Class.getName()により返される、Standard MBeanまたはMXBeanのJavaインタフェース名
============================================================
ENTITY_REFERENCE_NODE
ソース文書とデスティネーション文書でエンティティの定義が異なる場合があるので、EntityReferenceだけをインポートし、子孫は破棄します
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを生成してから、ComponentのaddHierarchyBoundsListenerメソッドを使ってComponentに登録します
============================================================
ロケール依存サービス・プロバイダ実装のパッケージ化
 これらのロケールに依存するサービスの実装は、インストールされた拡張機能として、Java拡張機能メカニズムを使用してパッケージ化されます
============================================================
例外

 変更されるプロパティの値がnullまたはUIResourceである場合、LookAndFeelが提供するすべてのインストール・メソッドは、デフォルト値にアクセスする必要があります
============================================================
次の場合
 
最初の引数の絶対値が1より大きく、2番目の引数が正の無限大の場合、または
 最初の引数の絶対値が1より小さく、2番目の引数が負の無限大の場合
 
 結果は正の無限大になります
============================================================
com.foo.MyHandler.level=INFO 
   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter
============================================================
)
 
 アダプタが呼び出されるときに、渡される配列引数が正しい数の要素を持たない場合、アダプタはターゲットを呼び出すかわりにIllegalArgumentExceptionをスローします
============================================================
無効: このモードでは、MTOMが無効になります
 

thresholdプロパティを使用して、いつバイナリ・データをXOPでエンコードすべきかどうかを判定するためのしきい値を設定できます
============================================================
closeClassLoader
ClassLoaderのクローズ
このアクセス権を付与すると、コード内から参照している任意のURLClassLoaderを閉じることができるようになります
============================================================
getFileSystemAttributes
ファイル・システム属性の取得
呼出し側に使用可能なディスク使用量やディスク容量などのファイル・システム情報を、コードで取得できるようにします
============================================================
com.foo.MyHandler.level=INFO 
   com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter
============================================================
次の場合
 
最初の引数の絶対値が1より大きく、2番目の引数が正の無限大の場合、または
 最初の引数の絶対値が1より小さく、2番目の引数が負の無限大の場合
 
 結果は正の無限大になります
============================================================
PKCS7
PkiPath

 これらの符号化については、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのCertPath Encodingsのセクションで説明されています
============================================================
このメソッドを文字セットcsに対して呼び出すと、次の式と同じ結果が返されます

 

 ただし、次の呼び出しまでの間にデコーダをキャッシュできるという点で、このメソッドのほうが効率的です
============================================================
指定されたデュレーションを加算して指定されたクロックからインスタントを返すクロックを取得します
 
 このクロックは別のクロックをラップし、指定されたデュレーションだけ後の時点を返します
============================================================
または
 別のスレッドが待機中の他のスレッドの1つに割り込みを行う
 バリアーの待機中にほかのスレッドがタイム・アウトする
 ほかのスレッドがこのバリアーに対してreset()を呼び出す
============================================================
または
 別のスレッドが待機中の他のスレッドの1つに割り込みを行う
 バリアーの待機中にほかのスレッドがタイム・アウトする
 ほかのスレッドがこのバリアーに対してreset()を呼び出す
============================================================
DataHandlerがDataSourceまたはURLを使って作成された場合

 DataHandlerは、このMIMEタイプのDataContentHandlerを見つけようとします
============================================================
キューに入れられた順序
    AWTEvent AがAWTEvent Bよりも前にEventQueueに入れられた場合、イベントBをイベントAよりも前にディスパッチすることはできません
============================================================
4.0 JoinRowSetのメソッド
JoinRowSetインタフェースは、RowSetオブジェクトの追加やJoinRowSetオブジェクトの情報の取得を行う複数のメソッドを提供します
============================================================
例: "Latn" (ラテン)、"Cyrl" (キリル)
country (region)
ISO 3166 alpha-2の国コードまたはUN M.49 numeric-3の地域コード
============================================================
false
[オプション]プロセッサで正規化プロパティを判定できない文字が検出された場合は、致命的エラー「unknown-character-denormalization」を報告します
============================================================
"supported-media-types-only"



true
[オプション]解析されたリソースのメディア・タイプがサポートされているメディア・タイプであることをチェックします
============================================================
次の場合
 
最初の引数の絶対値が1より大きく、2番目の引数が負の無限大の場合、または
 最初の引数の絶対値が1より小さく、2番目の引数が正の無限大の場合
 
 結果は正のゼロになります
============================================================
VALUE_INTERPOLATION_NEAREST_NEIGHBOR
VALUE_INTERPOLATION_BILINEAR
VALUE_INTERPOLATION_BICUBIC
============================================================
tiled
  コンポーネントは座標0 (左端または上端)から始まって両端揃えで配置されるか、あるいは割り当てられたスパンの端を表す座標(右端または下端)から始まって両端揃えで配置される
============================================================
次の場合
 
最初の引数の絶対値が1より大きく、2番目の引数が負の無限大の場合、または
 最初の引数の絶対値が1より小さく、2番目の引数が正の無限大の場合
 
 結果は正のゼロになります
============================================================
member_label
discriminator_type
default_index


 次のメソッドは、string、sequence、およびarrayで呼び出すことができます
============================================================
3.0 コマンドとコマンド・パラメータの設定
 行セットは、リレーショナル・データベースからデータを取得すると、ResultSetオブジェクトを生成するコマンド(クエリー)を実行します
============================================================
Class.forName(className, true, currentLoader)


 ここで、currentLoaderは、現在のクラスを定義するクラス・ローダーを示します
============================================================
)

  このClassオブジェクトが、宣言が注釈付きのスーパー・クラスを明示的に示さない型を表す場合、戻り値は注釈の付かない要素を表すAnnotatedTypeオブジェクトになります
============================================================
ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH MAXIMIZED_HORIZとMAXIMIZED_VERTを連結します
============================================================
ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH MAXIMIZED_HORIZとMAXIMIZED_VERTを連結します
============================================================
編集のサポート
 
 JEditorPane用のプラグインが編集をサポートすべきということはきわめて明白かもしれませんが、編集をサポートするには設計上の考慮すべき問題がいくつかあります
============================================================
GET
  POST
  HEAD
  OPTIONS
  PUT
  DELETE
  TRACE
  これらのメソッドのうち、どれが有効であるかはプロトコルの制限によって決まります
============================================================
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS
DAYS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
JSplitPane.VERTICAL_SPLIT (コンポーネントの上または下の方向)
 JSplitPane.HORIZONTAL_SPLIT (コンポーネントの左または右の方向)
============================================================
DAYS
WEEKS
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
if ((shaper.getRanges() & shaper.ARABIC) != 0) &#123; ... 

このメソッドはビット・マスクベースの範囲だけをサポートしています
============================================================
java.lang:type=OperatingSystem


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
org.omg.PortableInterceptor.ORBInitializerClass.<Service> 
<Service>は、次のプロパティを実装するクラスの文字列名です
============================================================
org.omg.PortableInterceptor.ORBInitializerClass.<Service> 
<Service>は、次のプロパティを実装するクラスの文字列名です
============================================================
フィルタ処理は使用不可(高周波減衰を0.0 dBに設定)
 密度パラメータを最大と最小の中間に設定
 

 次の表は、実装がリバーブ設定の表示セットに使用するパラメータ値を示しています
============================================================
トラブルシューティングのヒント:
プロパティ・ファイルがどのように構文解析されるかについては、Properties.load(java.io.InputStream)を参照してください
============================================================
intを対応するTCKindのインスタンスに変換するfrom_intメソッド
 例:
 
 変数kは、IDL string型(tk_string)のTCKindのインスタンスを表します
============================================================
同期の統計情報

スレッドが同期をブロックした、または通知を待機した回数
スレッド・コンテンション監視が有効になってから、スレッドが同期をブロックした、または通知を待機した累積経過時間
============================================================
2.2 状態2 - 行の削除
WebRowSetオブジェクトの行の削除では、ほかのRowSetオブジェクトと同様に、単に削除する行に移動し、deleteRowメソッドを呼び出すだけです
============================================================
ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH MAXIMIZED_HORIZとMAXIMIZED_VERTを連結します
============================================================
ICONIFIED
MAXIMIZED_HORIZ
MAXIMIZED_VERT
MAXIMIZED_BOTH MAXIMIZED_HORIZとMAXIMIZED_VERTを連結します
============================================================
使用法:

制限使用制約

 この注釈は、XmlElement、XmlAttribute、XmlValue、XmlElements、XmlID、およびXmlIDREFと相互に排他的です
============================================================
トラブルシューティングのヒント:
プロパティ・ファイルがどのように構文解析されるかについては、Properties.load(java.io.InputStream)を参照してください
============================================================
ObjectFactory.classを含むこと
jaxb.indexを含むこと


jaxb.indexの形式

 このファイルには、改行で区切れられたクラス名のリストが含まれます
============================================================
"doctype-not-allowed" [fatal]
 「disallow-doctype」構成パラメータがtrueに設定されていて、doctypeが検出された場合に返されます
============================================================
次の場合
 
最初の引数が正のゼロで、かつ2番目の引数がゼロより小さい場合、または
 最初の引数が正の無限大で、かつ2番目の引数がゼロより大きい場合
 
 結果は正の無限大になります
============================================================
used 
 現在使用されているメモリーの量(バイト単位)を表す
 


 committed 
 Java仮想マシンが使用できることが保証されているメモリーの量(バイト単位)を表す
============================================================
OrganicCheckBoxUIに使用するCheckboxIconの実装です
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースと互換ではなくなる予定です
============================================================
これは、任意のテキスト文字列を値に持つことのできる属性などで使用される(返される属性オブジェクトの値は無関係)
 
 正当な値を含む、属性カテゴリの1つ以上のインスタンスの配列を返す
============================================================
pがPropertyPermissionのインスタンスである
  pのアクションは、このオブジェクトのアクションのサブセットである
  pの名前がこのオブジェクトの名前に含まれている
============================================================
異なる言語への地域対応、または翻訳が容易
  複数のロケールを同時に処理可能
  将来サポートするロケールを追加する際の修正が容易
 

 リソース・バンドルはファミリに属しています
============================================================
RELAX NG
RELAX NGの場合でschemas.length!=1のとき、このメソッドはUnsupportedOperationExceptionをスローする必要があります
============================================================
W3C XML Schema 1.0

 XML Schemaの場合、このメソッドはドキュメントに指定された場所のヒントを使用して、検証を実行するSchemaオブジェクトを作成します
============================================================
DES
DESede

 これらのアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのSecretKeyFactoryのセクションで説明されています
============================================================
次の場合
 
最初の引数が正のゼロで、かつ2番目の引数がゼロより小さい場合、または
 最初の引数が正の無限大で、かつ2番目の引数がゼロより大きい場合
 
 結果は正の無限大になります
============================================================
2.0 RowSetオブジェクトがプロバイダを取得する手順

 未接続のRowsetオブジェクトは、次のいずれかの方法で、SyncProviderオブジェクトのアクセスを取得できます
============================================================
グローバルに宣言されたルート要素の非整列化

declaredTypeパラメータを含まない非整列化メソッドは、JAXBContextを使用してXMLデータのルート要素を非整列化します
============================================================
XmlType, XmlRootElement 

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
JavaBeanプロパティ 
 フィールド 


 コレクション・プロパティが@XmlElementだけで注釈されている場合、コレクション内の各項目が1つの要素によってラップされます
============================================================
例1:  XML Schema simpleTypeにクラスをマップする

例2:  simpleContentを含むXML Schema complexTypeにクラスをマップする
============================================================
このインタフェースを使用するタイミング
 アプリケーションで複数の暦体系を処理する必要がある場合でも、APIの設計では、このインタフェースよりLocalDateの使用が推奨されます
============================================================
詳細については、Instrumentation.retransformClassesを参照
    


 実装しているメソッドが変換不要と判定すると、メソッドはnullを返します
============================================================
マスクは、アルファがない場合は0 - 2までのインデックスで識別され、アルファがある場合は3までのインデックスで識別される
  最初の3つのインデックスはカラー・サンプルを参照する
============================================================
PROCESSING_INSTRUCTION_NODE、TEXT_NODE、CDATA_SECTION_NODE、COMMENT_NODE
これらのノードはすべてインポートできます
============================================================
(MapMode.READ_WRITE) 
 非公開: 結果のバッファへの変更はファイルに伝達されず、同じファイルをマッピングしているその他のプログラムによって認識されることもない
============================================================
紀元年
紀元
先発暦の年




2CE2


1CE1


1BCE0


2BCE-1




IsoEraの数値表現を取得するために、ordinal()を使用しないでください
============================================================
"discard-default-content"



true
[必須] (デフォルト) Attr.specified属性を使用して、どのような属性を破棄するべきかを決定します
============================================================
メソッド・ハンドルのコンパイル
invokeExactまたはinvokeの名前を含むJavaメソッド呼出し式は、Javaソース・コードからメソッド・ハンドルを呼び出すことができます
============================================================
ロックの降格
再入可能性を利用すると、書込みロックを取得してから読込みロックを取得し、その後書込みロックを解放するという方法で、書込みロックから読込みロックへの降格が可能になります
============================================================
プラグイン可能なSAX 2.0パーサー

 クライアント・アプリケーションは、そのJAXBプロバイダで提供されているデフォルト・パーサー・メカニズムを使用しないことを選択できます
============================================================
クリア、フリップ、リワインド 
 位置、リミット、容量の値にアクセスするメソッドや、マークやリセットを行うメソッドと同様に、このクラスもバッファに対する次のような操作を定義します
============================================================
カレンダ・タイプ
カレンダ・タイプは、getDisplayNameおよびgetDisplayNamesメソッドがカレンダ・フィールド値名を提供する暦体系を指定するために使用します
============================================================
java.lang:type=ClassLoading


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
実装上の考慮事項
実装では、このメソッドが呼び出されたとき、現在のスレッドがこのConditionに関連付けられたロックを保持することが必要になることがあります(通常は必要です)
============================================================
実装上の考慮事項
実装では、このメソッドが呼び出されたとき、現在のスレッドがこのConditionに関連付けられたロックを保持することが必要になることがあります(通常は必要です)
============================================================
super.addImpl(comp, constraints, index)


 このメソッドではレイアウトに関連する情報が変更されるため、コンポーネント階層が無効になります
============================================================
イベント・ハンドラの使用例

 ターゲット・オブジェクト上のメソッドを引数なしで呼び出すリスナーをインストールするというのが、もっとも単純なEventHandlerの利用方法です
============================================================
linearScalar = pow(10.0, gainDB/20.0) 

FloatControlクラスには、ゲインの最大許容値および最小許容値を規定するメソッドがあります
============================================================
FlowLayout.LEFT
FlowLayout.RIGHT
FlowLayout.CENTER
FlowLayout.LEADING
FlowLayout.TRAILING
============================================================
2.0 JdbcRowSetオブジェクトの作成
JdbcRowSetインタフェースのリファレンス実装、JdbcRowSetImplは、デフォルト・コンストラクタの実装を提供します
============================================================
super.addImpl(comp, constraints, index)


 このメソッドではレイアウトに関連する情報が変更されるため、コンポーネント階層が無効になります
============================================================
super.addImpl(comp, constraints, index)


 このメソッドではレイアウトに関連する情報が変更されるため、コンポーネント階層が無効になります
============================================================
JTextField.LEFT
JTextField.CENTER
JTextField.RIGHT
JTextField.LEADING
JTextField.TRAILING
============================================================
次の場合
 
最初の引数が正のゼロ、かつ2番目の引数がゼロより大きい場合、または
 最初の引数が正の無限大で、かつ2番目の引数がゼロより小さい場合
 
 結果は正のゼロになります
============================================================
void <METHOD>()
 
PostConstructの適用先のメソッドは、public、protected、package privateまたはprivateにできます
============================================================
次の場合
 
最初の引数が正のゼロ、かつ2番目の引数がゼロより大きい場合、または
 最初の引数が正の無限大で、かつ2番目の引数がゼロより小さい場合
 
 結果は正のゼロになります
============================================================
SCROLLBARS_BOTH、
 SCROLLBARS_VERTICAL_ONLY、
 SCROLLBARS_HORIZONTAL_ONLY、
 SCROLLBARS_NONE
============================================================
プラグイン可能なSAX 2.0パーサー

 クライアント・アプリケーションは、そのJAXBプロバイダで提供されているデフォルト・パーサー・メカニズムを使用しないことを選択できます
============================================================
pのURLによって指定される1つまたは複数のパスが、thisのURLによって指定されるパス・セットに含まれている場合は、trueを返します
 それ以外の場合はfalseを返します
============================================================
ほかの注釈との関係

 この注釈はXmlJavaTypeAdapterとともに使用できるため、ユーザーは自分のデータ構造をDOMにマップしたり、それからXMLを構成したりできます
============================================================
PROCESSING_INSTRUCTION  
   なし
   String target、String data
   データが存在する必要はなく、nullでもかまいません
============================================================
JList.HORIZONTAL_WRAP
   可視の行数が0より大きい場合、preferredHeightは、セルの最大の高さ* adjustedRowCountになります
============================================================
Calendar.AM_PM
Calendar.AMからCalendar.PM
0 - 午前、1 - 午後


サポートされるカレンダ固有のフィールドとそれらの値を次に示します
============================================================
"algorithm/mode/padding"または

 "algorithm"
 
 後者の場合、モードおよびパディング方式には、プロバイダ固有のデフォルト値が使用されます
============================================================
"algorithm/mode/padding"または

 "algorithm"
 
 後者の場合、モードおよびパディング方式には、プロバイダ固有のデフォルト値が使用されます
============================================================
java.lang:type=Compilation


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
jndi.syntax.separator.ava
  このプロパティが存在する場合は、複数の属性または値のペアを指定するときに、属性アサーション値を区切る文字列が指定されます
============================================================
ApplicationName - 現在接続を利用しているアプリケーションの名前
ClientUser - 接続を使用しているアプリケーションが実行している処理のユーザーの名前
============================================================
DELETE_ON_CLOSE 
 このオプションが存在する場合、実装は、ファイルがcloseメソッドによって閉じられるときに、ベスト・エフォートでファイルを削除しようとします
============================================================
GridBagConstraints.gridx, GridBagConstraints.gridy
コンポーネントの表示領域のリーディング・コーナーを格納するセルを指定します
============================================================
この結果セットから、JavaBeansコンポーネントが生成される
 
 これらのフィールドが設定されていない場合は、executeメソッドが正常に実行されなかったことになります
============================================================
DiffieHellman

 このアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのKeyAgreementのセクションで説明されています
============================================================
アルゴリズム固有の初期化
アルゴリズム固有のパラメータのセットがすでに存在する状況では、AlgorithmParameterSpec引数を取る2つのinitメソッドが存在します
============================================================
互換性
既存の使用方法との互換性を保つために、LocaleのコンストラクタはJava Runtime Environment version 1.7より前の動作を維持しています
============================================================
3文字の言語/国(地域)コード
Localeのコンストラクタでは、言語および国のパラメータの長さは2文字であると指定されてきましたが、実際には任意の長さが受け入れられていました
============================================================
)

 私用サブタグに接頭辞「lvariant」が付加された部分がある場合、その部分は削除され、結果のロケールのバリアント・フィールドに付加されます(大文字小文字の正規化なし)
============================================================
シグネチャ・ポリモーフィズム
invokeExactとプレーンなinvokeの通常とは異なるコンパイル動作やリンク動作には、シグネチャ・ポリモーフィズムという用語が使用されます
============================================================
解決時の制限
 適切なLookupオブジェクトが渡されると、直接メソッド・ハンドルを解決して、基礎となるメソッド、コンストラクタまたはフィールドのシンボリック参照を復元できます
============================================================
Lookupファクトリ・メソッド
Lookupオブジェクトのファクトリ・メソッドは、メソッド、コンストラクタ、およびフィールドのすべてのメジャーなユース・ケースに対応しています
============================================================
NAME = mbeanname

 MBeanインスタンスをm-letサービスに登録するとき、このMBeanインスタンスに割り当てるオブジェクト名を指定するオプション属性です
============================================================
次のgetterの場合、

    
boolean isName()

CompositeType内の項目はnameと呼ばれ、SimpleType.BOOLEAN型を持ちます
============================================================
それもOptionalDoubleである、および
 両方のインスタンスに存在する値がない、または
 存在する値がDouble.compare() == 0によってお互いに等しい
============================================================
バイナリ名 
 ClassLoaderのメソッドのStringパラメータとして指定するクラス名はすべて、『Java(tm)言語仕様』で規定されたバイナリ名である必要があります
============================================================
たとえば、

   



   注釈は、コンストラクタの最初のパラメータはgetX()メソッドで取得でき、2番目のパラメータはgetY()メソッドで取得できることを示します
============================================================
lastUpdatedTimeStampNumber
ModelMBeanAttributeInfoModelMBeanOperationInfo
valueが設定された時刻
============================================================
指定したCalendarオブジェクトが複製される
Calendar.add(int,int)メソッドを使用して、年、月、日フィールドがCalendarオブジェクトに追加される
============================================================
0123456789abcdefghijklmnopqrstuvwxyz


 これらは'\u0030' - '\u0039'および'\u0061' - '\u007A'です
============================================================
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
0123456789abcdefghijklmnopqrstuvwxyz


 これらは'\u0030' - '\u0039'および'\u0061' - '\u007a'です
============================================================
"format-pretty-print"



true
[オプション]空白文字を追加して出力を書式設定し、プリティプリント処理され、インデントされた読みやすい形式にします
============================================================
メソッド・ハンドルとJavaジェネリックス間の相互運用
 Javaジェネリック型を使って宣言されたメソッド、コンストラクタ、またはフィールドのメソッド・ハンドルを取得できます
============================================================
ARCHIVE = "archiveList"

 取得するMBeanによって使用されるMBeanまたはその他のリソースを含む1個以上の.jarファイルを指定する必須属性です
============================================================
NANOS
MICROS
MILLIS
SECONDS
MINUTES
HOURS
HALF_DAYS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
void <METHOD>()
 
PreDestroyの適用先のメソッドは、public、protected、package private、またはprivateにできます
============================================================
1.0 背景
Predicateインタフェースは、アプリケーションがFilteredRowSetオブジェクトに適用するフィルタを定義するために実装できる標準インタフェースです
============================================================
アクセス権ターゲット名
アクセス権により許可される操作
このアクセス権を許可した場合のリスク


setLog
ロギング・ストリームの設定
このアクセス権を与えるのは危険です
============================================================
このUUIDに関連したタイムスタンプ値

  60ビットのタイムスタンプ値が、このUUIDのtime_low、time_mid、およびtime_hiフィールドから構築されます
============================================================
2.1 状態1 - WebRowSetオブジェクトのXMLでの出力
 この例では、WebRowSetオブジェクトが、データ・ソースから、2列×5行の単純な表形式で生成されます
============================================================
JavaBeanプロパティ 
 staticでない非一時フィールド 


 この注釈は、JavaBeanコレクション・プロパティ(Listなど)への注釈として意図されています
============================================================
ほかの注釈との併用 
 この注釈型は、注釈型XmlRootElement、XmlAccessorOrder、XmlAccessorType、XmlEnumとともに使用できます
============================================================
例6:  factoryClassとfactoryMethodを定義する

 
 例7:  factoryMethodを定義し、デフォルトのfactoryClassを使用する
============================================================
MONTH_OF_YEAR
PROLEPTIC_MONTH
YEAR_OF_ERA
YEAR
ERA

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


play
システム上の1つ以上のオーディオ・デバイスを介したオーディオ再生
============================================================
その他のプリミティブ型の値を格納するバッファとしてbyteバッファを表示できる、「ビュー・バッファ」の作成メソッド 
 byteバッファの圧縮、複製およびスライス用メソッド
============================================================
ここで、definitionsはInstrumentation.redefineClassesのパラメータ
    
クラス再変換の場合は、新しいクラス定義に渡されるバイト
============================================================
TYPEがtableIndexStatisticの場合はnull
CARDINALITY long => TYPEがtableIndexStatisticの場合、表中の行数
============================================================
ビット値


バイト1
1
1
0
ビット10-6


バイト2
1
0
ビット5-0


 '\u0800'から'\uFFFF'の範囲のchar値は、3バイトで表されます
============================================================
openTypeOpenType
MBeanAttributeInfoMBeanOperationInfoMBeanParameterInfo
この要素のOpen Type
============================================================
実装により異なる

DragSourceを取得した場合は、DragGestureRecognizerも取得して、DragSourceを特定のComponentと関連付けます
============================================================
5.0 フィルタ外部の行の動作
FilteredRowSetオブジェクトに設定されたフィルタの範囲外の行は、フィルタを削除するか、新しいフィルタを適用するまで変更できません
============================================================
)

 基本となる軽量タスク・スケジューリング・フレームワークに本質的に結び付けられた実装のオーバーライドを回避するために、ほとんどの基本サポート・メソッドはfinalです
============================================================
StandardJavaFileManager


     このインタフェースを実装するすべてのコンパイラは、通常のファイルを操作する標準ファイル・マネージャを提供します
============================================================
SimpleJavaFileObject


     このクラスは、ファイル・オブジェクトを作成する際、基本単位として使用できる基本ファイル・オブジェクト実装を提供します
============================================================
ファクトリ・メソッド
メソッドforLanguageTag(java.lang.String)は、整形式のBCP 47言語タグに対応するLocaleオブジェクトを作成します
============================================================
例 
en
de_DE
_GB
en_US_WIN
de__POSIX
zh_CN_#Hans
zh_TW_#Hant-x-java
th_TH_TH_#u-nu-thai
============================================================
"normalize-characters"
 このパラメータは、「DOM Level 3 Core」のDOMConfigurationで定義されているパラメータと同等です
============================================================
メソッド・ハンドルの作成
 Javaコードは、そのコードからアクセス可能な任意のメソッド、コンストラクタ、またはフィールドに直接アクセスするメソッド・ハンドルを作成できます
============================================================
MIMEタイプ・ファイルの検索順序
 MimetypesFileTypeMapは、ユーザーのシステムのさまざまな場所を検索してMIMEタイプ・ファイルのエントリを見つけます
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、コンポーネントのaddMouseMotionListenerメソッドを使ってコンポーネントに登録します
============================================================
VALUE_FRACTIONALMETRICS_OFF
VALUE_FRACTIONALMETRICS_ON
VALUE_FRACTIONALMETRICS_DEFAULT
============================================================
java.lang:type=Threading


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
パッケージ
 トップレベル・クラス 

 追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
例1: enum定数名 ->列挙ファセットへのマップ

例2:  enum定数名(値) ->列挙ファセットのマップ 

例3: enum定数名 ->列挙ファセットへのマップ
============================================================
DELETE_ON_CLOSE 
 このオプションがある場合、実装はファイルがcloseメソッドによって閉じられるときに、ベスト・エフォートでファイルを削除しようとします
============================================================
URLおよびファイル名で安全
 エンコードおよびデコード操作に、RFC 4648の表2に明記された「URLおよびファイル名で安全なBase64アルファベット」を使用します
============================================================
JList.VERTICAL_WRAP
   可視の行数が0より大きい場合、preferredHeightは、セルの最大の高さ* visibleRowCountになります
============================================================
7.0 スクロールと更新
CachedRowSetオブジェクトには、スクロール機能や更新機能を持たないResultSetオブジェクトにこれらの機能を提供する働きもあります
============================================================
jndi.syntax.ignorecase
  このプロパティが存在する場合、trueは、名前のコンポーネントを比較するときに大文字と小文字が区別されないことを示します
============================================================
jndi.syntax.trimblanks
  このプロパティが存在する場合、trueは、比較のために名前のコンポーネントの先頭と末尾の空白が切り取られることを示します
============================================================
TYPEがtableIndexStatisticの場合はfalse
  INDEX_QUALIFIER String =>インデックス・カタログ(nullの可能性がある)
============================================================
名前型使用する場所意味
defaultValueObject
MBeanAttributeInfoMBeanParameterInfo
属性またはパラメータのデフォルト値
============================================================
"datatype-normalization"


true
[オプション] XMLスキーマの場合のXMLスキーマ正規化値などの、ツリー内のスキーマ正規化値を公開します
============================================================
ディスク・ドライブ指示子、UNIXルート・ディレクトリの"/"、Microsoft Windows UNCパス名の"\\\\" など
  ゼロ以上の文字列名前のシーケンス
============================================================
DELETE_ON_CLOSE 
 このオプションがある場合、実装はファイルがcloseメソッドによって閉じられるときに、ベスト・エフォートでファイルを削除しようとします
============================================================
座標空間
Graphics2Dオブジェクトに渡されるすべての座標は、ユーザー空間(アプリケーションによって使用される)と呼ばれる、デバイスに依存しない座標系で指定されます
============================================================
1080::8:800:200C:417A

 IPv4およびIPv6ノードが混在する環境に対応する場合にさらに便利な代替形式がx:x:x:x:x:x:d.d.d.dです
============================================================
networkaddress.cache.negative.ttl (デフォルト: 10)
ネーム・サービスによる失敗した名前検索に対するキャッシング・ポリシーを示します
============================================================
)
 新しいルックアップ・クラスが古いクラスとは異なるパッケージ内に存在している場合、protectedメンバーとデフォルト(package)メンバーにアクセスできません
============================================================
persistPolicyString
次のどれか: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never
============================================================
persistPolicyString
次のどれか: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never
============================================================
persistPolicyString
次のどれか: OnUpdate|OnTimer|NoMoreOftenThan|OnUnregister|Always|Never
============================================================
lockedSynchronizers
要素型がLockInfoのマップされた型であるjavax.management.openmbean.CompositeData[]
============================================================
getContent
getHeaderField
getInputStream
getOutputStream


 一部のヘッダー・フィールドは頻繁にアクセスされます
============================================================
4.0 内部のパラメータ処理

 注: BaseRowSetクラスは、プロパティを設定する設定メソッドと、プレースホルダー・パラメータを設定する設定メソッドを提供します
============================================================
10.0 ページング・データ
CachedRowSetオブジェクトはデータをメモリーに格納するため、一度に格納できるデータの量は使用可能なメモリーの量によって決まります
============================================================
PKIX

 このアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのCertPathValidatorのセクションで説明されています
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、コンポーネントのaddComponentListenerメソッドを使ってコンポーネントに登録します
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、コンポーネントのaddContainerListenerメソッドを使ってコンポーネントに登録します
============================================================
これを変更するには、返されたフォーマッタに対してwithLocale(Locale)を使用します
 
 返されるフォーマッタは、オーバーライドする暦やゾーンを持ちません
============================================================
logStringModelMBeanInfoModelMBeanNotificationInfo
tまたはT: すべての通知をログに記録、fまたはF:通知を記録しない
============================================================
パラメータ

Attributes、SearchControls、またはパラメータとしてメソッドに引き渡される配列オブジェクトは、サービス・プロバイダでは変更されません
============================================================
"split-cdata-sections"



true
[必須] (デフォルト) CDATAセクション終了マーカー「]]>」を含むCDATAセクションを分割します
============================================================
実装により異なる
 GUIの特定のComponentのインスタンス、またはComponentインスタンスに関連付けられているアプリケーション固有のオブジェクトごとに1つ
============================================================
カーソルのホット・スポットがプラットフォーム依存のドロップ・サイトの操作可能な部分に入る
 ドロップ・サイトがアクティブである
 ドロップ・サイトがドラッグを受け入れる
============================================================
カーソルのホット・スポットがプラットフォーム依存のドロップ・サイトの操作可能な部分に入る
 ドロップ・サイトがアクティブである
 ドロップ・サイトがドラッグを受け入れる
============================================================
ほとんどの場合、クラスFloatの2つのインスタンスf1とf2について、f1.equals(f2)の値がtrueになるのは、

 
上記の値もtrueになる場合だけです
============================================================
d.d.d.d
d.d.d
d.d
d

 4つの部分が指定されると、各部分がデータのバイトとして解釈され、左から右へ、IPv4アドレスの4つのバイトに割り当てられます
============================================================
Subject

 コンストラクタにSubject入力パラメータが指定されている場合、LoginContextは呼出し側で指定されたSubjectオブジェクトを使用する
============================================================
プラットフォームMXBean

 プラットフォームMXBeanは、JMXインストゥルメンテーション仕様に適合する管理Beanであり、基本データ型のセットだけを使用します
============================================================
MetalComboBoxUIを補助するJButtonサブクラス
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースと互換ではなくなる予定です
============================================================
MXBeanインタフェースのマッピング
MXBeanインタフェース、またはMXBeanインタフェース内部で参照される型は、別のMXBeanインタフェースJを参照できます
============================================================
名前(Stringオブジェクト)
 値(Anyオブジェクト)
 引数モード・フラグ
 

NVListオブジェクトは、次のORBメソッドのいずれかを使用して作成できます
============================================================
java.lang:type=Runtime


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
setFactory
ServerSocketまたはSocketにより使用されるソケット・ファクトリ、またはURLにより使用されるストリーム・ハンドラ・ファクトリの設定
============================================================
Signatureを検証用として初期化する(initVerifyを参照)

     非公開鍵(およびオプションでセキュリティ保護された乱数ジェネレータ)を使用する方法
============================================================
)

 SUBSIZEDによって要求されるとおりにSIZEDを報告しないスプリッテレータには一貫性がなく、そのスプリッテレータを使用した計算については何も保証できません
============================================================
floorDiv(x, y) * y + floorMod(x, y) == x


 例および%演算子との比較については、Math.floorModを参照してください
============================================================
floorDiv(x, y) * y + floorMod(x, y) == x


 例および%演算子との比較については、Math.floorModを参照してください
============================================================
2つのnanoTime値を比較する場合
  
t1 < t0ではなくt1 - t0 < 0を使用すべきですが、それは、数値のオーバーフローが発生する可能性があるからです
============================================================
----------------------------> 時間

URLに対してopenConnectionメソッドを呼び出すことによって、接続オブジェクトを生成する
============================================================
トップレベル・クラス 
 列挙型 

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
トップレベル・クラス 
 列挙型 

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
BasicCheckboxUIのCheckboxUI実装です
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースとの互換性がなくなる予定です
============================================================
これは失敗することになる

 上のシナリオで、CV.computeValueはV1などの計算中に、ロックを使って時間に依存する状態を適切に監視できるものと仮定できます
============================================================
値は、「SYSTEM」、「USER」、「DERIVED」(nullの可能性がある)
  
注: データベースによっては、すべての表に関する情報を返さないものがあります
============================================================
DataHandlerがオブジェクトを使って作成された場合

 DataHandlerは、このMIMEタイプのDataContentHandlerを見つけようとします
============================================================
immutableInfoString
MBeanInfo
MBeanのMBeanInfoが不変であるかどうかにより、文字列"true"または"false"になります
============================================================
descriptorTypeString任意
mbean、attribute、constructor、operation、notificationのいずれかの記述子型
============================================================
valueObject
ModelMBeanAttributeInfoModelMBeanOperationInfo
属性またはオペレーションの現在値(キャッシュ値)
============================================================
3.0 用法

Predicateを実装した場合(PredicateクラスのJavaDocの例を参照)、FilteredRowSetを次のように使用することができます
============================================================
InputContext.getLocaleによって、および
 ユーザー・インタフェースを使って、このインプット・メソッドから別のインプット・メソッドに切り替えるとき
============================================================
3.0 複数の一致列の管理
setMatchColumnメソッドに渡されるインデックス配列は、設定される一致列の数(配列の長さ)と、マッチングに使用される列を示します
============================================================
)
例: "polyton" (ギリシャ語Polytonic)、"POSIX"
extensions
言語の識別とは別の拡張を示す、単一文字キーから文字列値へのマップ
============================================================
java.lang:type=Memory


 これを取得するには、PlatformManagedObject.getObjectName()メソッドを呼び出します
============================================================
)
 
 厳密でないプレーンなinvokeでアダプタを呼び出したときに呼出し元の型がアダプタと同じ場合、invokeExactの場合と同様にターゲットが呼び出されます
============================================================
)
 
 JVMが記述子文字列からMethodTypeを実体化するときは、記述子で指定されたすべてのクラスはアクセス可能である必要があり、それらはすべてロードされます
============================================================
その後、クライアントがPrinterJob.print(..)を呼び出して印刷をトリガーすると、
 
 すべてのページが印刷されるまで、制御が印刷システムに渡されます
============================================================
readメソッドは常に-1を返す
 availableメソッドは常に0を返す
 closeメソッドは何も行わない
 
redirectErrorStreamプロパティ
============================================================
5.0 SyncProvider定数
SyncProviderクラスは、SyncProviderメソッドの戻り値またはパラメータとして使用される3つの定数を提供します
============================================================
SyncResolverオブジェクトの説明
SyncResolverオブジェクトは、SyncResolverインタフェースを実装する特殊なRowSetオブジェクトです
============================================================
現在のノードが読取り専用である場合を除く、現在のノード
 
 置換位置に挿入された現在のノードと同じ型(TextまたはCDATASection)の新しいTextノード
============================================================
3文字のタイムゾーンID

 JDK 1.1.xとの互換性のために、その他の3文字のタイムゾーンID (「PST」、「CTT」、「AST」など)もサポートされています
============================================================
たとえば、次のコードを実行したとします
 
 1つのパスtreePathのみが選択されるようにして、treePathのコピーが2つ選択されないようにする必要があります
============================================================
URI、URL、およびURN 

 URIはUniform Resource Identifierであり、URLはUniform Resource Locatorです
============================================================
パッケージ
 トップレベル・クラス 

 追加の一般的な情報については、javax.xml.bindパッケージのjavadocの「パッケージの仕様」を参照してください
============================================================
使用法 

 この注釈は、XMLスキーマ要素宣言と、その要素宣言を表現するJAXBElementインスタンスを返す要素ファクトリ・メソッドの間のマッピングを作成します
============================================================
90度回転の処理

AffineTransformクラスのrotateメソッドのバリエーションの中には、倍精度値の引数で回転角度(ラジアン)を指定するものがあります
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
PKIX

 このアルゴリズムについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのCertPathBuilderのセクションで説明されています
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
Class t = Class.forName("java.lang.Thread")


forName("X")の呼出しによって、Xというクラスが初期化されます
============================================================
)

 Stream.collect(Collector)のような、Collectorに基づいてリダクションを実装しているライブラリは、次の制約に従う必要があります
============================================================
jndi.syntax.separator.typeval
  このプロパティが存在する場合は、属性と値を区切る文字列が指定されます(「age=65」の「=」など)
============================================================
locale
String任意
Locale.toString()によって返される、このMBeanInfo、MBeanAttributeInfoなどの説明のロケール
============================================================
protocolMapDescriptorModelMBeanAttributeInfo
JMX仕様ドキュメントの「Protocol Map Support」を参照
============================================================
定義済みのdocフレーバ
 Java Print Serviceインスタンスには、次の印刷データ形式および印刷データ表現クラスをサポートすることは要求されていません
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
オプション 説明 

 REPLACE_EXISTING 
 ターゲット・ファイルが存在する場合は、ターゲット・ファイルが空でないディレクトリでなければ置換されます
============================================================
オプション 説明 

 REPLACE_EXISTING 
 ターゲット・ファイルが存在する場合は、ターゲット・ファイルが空でないディレクトリでなければ置換されます
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
JAXB実行時バインディング・フレームワークの互換性

 次のJAXB 1.0の制限は、スキーマとインタフェースまたは実装クラス間のバインディングにのみ適用されます
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
給紙トレーなどの給紙元による指定
  「A4」などの標準サイズによる指定
  「レターヘッド」などの名前による指定
 
 これらはIPPのmedia属性に対応します
============================================================
アプリケーションのメモリー使用量
自動メモリー管理システムにかかっている作業負荷
可能性のあるメモリー・リーク


 メモリー使用量は、次の3つの方法で監視できます
============================================================
)
 
 JVMは、コンストラクタおよびstaticイニシャライザ・ブロックを、特殊な名前("<init>"と"<clinit>")を持つ内部メソッドとして表します
============================================================
たとえば、次の項目の場合、

    
String getOwner()


    項目はownerと呼ばれ、公開型SimpleType.STRINGを持ちます
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
すなわち、dfs.getInfinity()

 数値の構文 
 このクラスのインスタンスが数値として構文解析可能な文字列は、次の正規表現の文法に従って指定されます
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
同期情報とデッドロック検出
 一部のJava仮想マシンは、オブジェクト・モニターの使用量および所有可能なシンクロナイザの使用量の監視をサポートしている場合があります
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
(RFC 2396からの変更) 

 正規化されたパスは、削除を可能にする「..」でない先行のセグメントが不十分だった場合、1つ以上の「..」セグメントで始まります
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
CORBA 2.3.1で定義されたORBコア(formal/99-10-07)
       
 ptc/00-01-08で定義されたIDL/Java言語マッピング
============================================================
例: JavaBeanプロパティをxs:IDREFにマップする(つまり、包含関係ではなく参照に基づく)

例2: 次に、包含関係と参照を対比した包括的な例を示します
============================================================
8.0 汎用データ・アクセスの取得
CachedRowSetクラスには、リレーショナル・データベース以外のソースからデータを取得し、格納できるという利点があります
============================================================
修正UTF-8

 DataInputインタフェースとDataOutputインタフェースの実装は、UTF-8を若干修正した形式のUnicodeで文字列を表現します
============================================================
基本実装 -- 標準Connectionオブジェクトを生成する
   接続プール実装 -- 自動的に接続プールに参加するConnectionオブジェクトを生成する
============================================================
たとえば、
 

 このフォーマットに加え、必要なLocale、Chronology、ZoneId、およびDecimalStyleを持つフォーマッタを作成できます
============================================================
JVMごとに、そのJVMの寿命の間1デフォルト・インスタンス
 潜在的なドラッグ・イニシエータ・オブジェクト(TextFieldなど)のクラスごとに1インスタンス
============================================================
たとえば、
 
 後続の一致列は、次のように別のJoinableオブジェクト(Joinableインタフェースを実装しているRowSetオブジェクト)に追加できます
============================================================
mailcapファイルの検索順序
 MailcapCommandMapは、ユーザーのシステムのさまざまな場所を検索してmailcapファイルのエントリを見つけます
============================================================
プログラムによってMimetypesFileTypeMapインスタンスに追加されたエントリ
  ユーザーのホーム・ディレクトリにあるファイル.mime.types
============================================================
属性名
型


lockedStackFrame
ThreadInfo.fromメソッドに定義されたstackTrace属性で指定されるCompositeData
============================================================
readFileDescriptor
ファイル記述子の読取り
コードから、読み出したファイル記述子に関連付けられているファイルを読み出すことができるようになります
============================================================
<crypto_service>. <algorithm_or_type> <attribute_name>
 暗号化サービス名には、ドットを含まないようにします
============================================================
実装者への注意

 より正確には、値は""または"##generate"にするか、<scheme>:で始まるxs:anyURIの有効な字句表現にする必要があります
============================================================
MONTHS
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
このコンストラクタは、3つの引数をとり、オブジェクトの登録とエクスポートの両方を実行する
 最初のActivatable.exportObjectメソッドを使用
============================================================
スレッド
 グループにバインドされたチャネルで開始された入出力操作の終了ハンドラは、グループ内のプールされたスレッドの1つによって呼び出されることが保証されます
============================================================
6.0 thinクライアントへのデータの送信
CachedRowSetオブジェクトは、主に、アプリケーション・コンポーネント間でのデータの受け渡しに利用されます
============================================================
UnicodeDataファイル内にエントリがある
 UnicodeDataファイルで定義された範囲に値を持つ
 
注: このメソッドは、補助文字を処理できません
============================================================
jndi.syntax.escape
  このプロパティが存在する場合は、区切り文字、エスケープ、および引用符をオーバーライドするエスケープ文字列が指定されます
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、コンポーネントのaddFocusListenerメソッドを使ってコンポーネントに登録します
============================================================
非整列化

Unmarshallerクラスは、XMLデータをJavaコンテンツ・オブジェクト・ツリーに変換できる機能をクライアント・アプリケーションに提供します
============================================================
メモリー・プールとメモリー・マネージャ
メモリー・プールとメモリー・マネージャは、Java仮想マシンのメモリー・システムを監視および管理する抽象エンティティです
============================================================
グループ名
前方参照を行う正規表現グループには「名前」を割り当てることもでき(名前付きの前方参照を行う正規表現グループ)、あとで「名前」によって後方参照できます
============================================================
)
 

再入可能性
このロックにより、リーダーとライターの両方が、ReentrantLockのスタイルで読み取りまたは書込みロックを再取得できるようになります
============================================================
(「a < b & e < f」など)
 
 これらのエラーのうちどれかがあると、RuleBasedCollatorがParseExceptionをスローします
============================================================
getProtectionDomain
クラスのProtectionDomainの取得
コードから、特定のコード・ソースのポリシー情報を取得できるようになります
============================================================
carol[/home/luehe/identitydb.obj][not trusted]


getSignerPrivateKey
署名者の非公開鍵の取得
============================================================
ゼロからXMLSignatureを作成する
XMLSignatureFactoryが作成されると、オブジェクトは適切なメソッドを呼び出してインスタンス化できます
============================================================
一般的な意図は、任意のオブジェクトxについて、次の式
 

 がtrueであり、次の式
 

 がtrueになることですが、これらは絶対的な要件ではありません
============================================================
一般的な意図は、任意のオブジェクトxについて、次の式
 

 がtrueであり、次の式
 

 がtrueになることですが、これらは絶対的な要件ではありません
============================================================
一般的な意図は、任意のオブジェクトxについて、次の式
 

 がtrueであり、次の式
 

 がtrueになることですが、これらは絶対的な要件ではありません
============================================================
バイナリ・データへのアクセス 
 このクラスには、その他のすべてのプリミティブ型(booleanを除く)の値の読み込みと書込みを行うメソッドが定義されています
============================================================
Collection

 このタイプについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのCertStoreのセクションで説明されています
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドに指定されたdateStyle
このメソッドに指定されたtimeStyle
DateTimeFormatterのLocale
Chronology
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
セキュリティ権限

 セキュリティ・マネージャがインストールされている場合に、接続を開こうとするようなメソッドを呼び出すとき、呼出し元には次のいずれが必要です
============================================================
一般的な意図は、任意のオブジェクトxについて、次の式
 

 がtrueであり、次の式
 

 がtrueになることですが、これらは絶対的な要件ではありません
============================================================
クラス・オブジェクトが、抽象クラス、インタフェース、配列クラス、プリミティブ型、またはvoidを表す場合
  クラスが引数なしのコンストラクタを保持しない場合
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


control
Java仮想マシンの実行時特性を管理する機能
============================================================
A任意の文字または数字(Character.isLetterまたはCharacter.isDigit)

?任意の文字(Character.isLetter)
============================================================
)
 
 バイトコード・ジェネレータ(コンパイラのバックエンドも含む)は、それらのメソッドに対する変換されていないシンボリック型記述子を出力する必要があります
============================================================
)
 いずれかのルックアップ・ファクトリ・メソッド(Lookup.findVirtualなど)を呼び出すことで、シンボリック参照をメソッド・ハンドルに解決する
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
Standard MBeanMXBean






MemoryPoolオブジェクトの実装の動作は、Standard MBeanでもMXBeanでも同様です
============================================================
pがPrivateCredentialPermissionのインスタンスであり、かつ
  pのターゲット名が、このオブジェクトのターゲット名に含まれている場合
============================================================
HTTP接続の場合はhttp URI
HTTPS接続の場合はhttps URI
 TCPクライアント・ソケット接続の場合はsocket://host:port
============================================================
)

  メソッドまたはコンストラクタの宣言の本体で、安全でない可能性のある操作(未検査警告が生成される、可変パラメータの配列の要素への代入など)が実行される
============================================================
このメソッドの動作は、次の呼び出しと同じになります
 
 このportNameは、WSDLまたはEndpointReferenceのメタデータから取得されます
============================================================
このメソッドの動作は、次の呼び出しと同じになります
 
 このportNameは、WSDLまたはendpointReferenceのメタデータから取得されます
============================================================
このメソッドの動作は、次の呼び出しと同じになります
 
 このportNameは、WSDLまたはEndpointReferenceのメタデータから取得されます
============================================================
このメソッドの動作は、次の呼び出しと同じになります
 
 このportNameは、WSDLまたはendpointReferenceのメタデータから取得されます
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
例:
TextLayoutとその境界の矩形の作成および描画
 


TextLayoutでヒットをテストします(特定のグラフィック位置にある文字を判定します)
============================================================
一般的な意図は、任意のオブジェクトxについて、次の式
 

 がtrueであり、次の式
 

 がtrueになることですが、これらは絶対的な要件ではありません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
このメソッドを使用する方法と理由を示すいくつかのサンプル・コード:
 

plusの後にminusを呼び出しても、同じ日付/時間が返されることは保証されません
============================================================
スレッドがブロックされているオブジェクトを所有しているスレッドのID
スレッドのスタック・トレース
スレッドによってロックされたオブジェクト・モニターのリスト
============================================================
getThreadInfo(id, 0);


 このメソッドは、指定されたIDのスレッドに関するスレッド情報を表すThreadInfoオブジェクトを返します
============================================================
DTD  
 String DocumentTypeDefinition  
 なし  
 DocumentTypeDefinitionが出力に書き込まれます
============================================================
"normalize-characters"


true
[オプション]「XML 1.1」の付録Bで定義されているように、文書内の文字を完全に正規化します
============================================================
"size,lastModifiedTime,lastAccessTime" 
 ファイル・サイズ、最終更新時間、および最終アクセス時間の属性を読み取ります
============================================================
InetAddressのキャッシュ 

 InetAddressクラスは、成功したホスト名解決と失敗したホスト名解決を格納するためのキャッシュを備えています
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、コンポーネントのaddKeyListenerメソッドを使ってコンポーネントに登録します
============================================================
KeyStore.TrustedCertificateEntry
 このタイプのエントリには別の組織に属する単一の公開鍵Certificateが格納されます
============================================================
"pi-base-uri-not-preserved" [warning]
 処理命令のベースURIを保持できない場所で処理命令が検出された場合に返されます
============================================================
floorDiv(x, y) * y + floorMod(x, y) == x


 例については、floorMod(int, int)を参照してください
============================================================
"Nimbus.Overrides"
"Nimbus.Overrides.InheritDefaults"
"JComponent.sizeVariant"
============================================================
VALUE_COLOR_RENDER_SPEED
VALUE_COLOR_RENDER_QUALITY
VALUE_COLOR_RENDER_DEFAULT
============================================================
または
 

 この表現の厳密な詳細は未指定であり変更される可能性があるほか、サブクラスで独自の形式を使用してメソッドがオーバーライドされる可能性もあります
============================================================
)

 ソート・マップに挿入されるすべてのキーは、Comparableインタフェースを実装するか、指定されたコンパレータによって受け入れられる必要があります
============================================================
)

 ソート・セットに挿入されるすべての要素は、Comparableインタフェースを実装するか、指定されたコンパレータによって受け入れられる必要があります
============================================================
TypeCodeオブジェクトの使用法:
 
Dynamic Invocation Interfaceで使用される -- 実際の引数の型または戻り値の型を示す
============================================================
)
 
 拡張したクラスを使ってリスナー・オブジェクトを作成してから、ウィンドウのaddWindowListenerメソッドを使ってWindowに登録します
============================================================
ファイル作成時のACLの設定 
 この属性ビューをサポートしている実装では、ファイルまたはディレクトリ作成時の初期ACLの設定もサポートする場合があります
============================================================
実装の注意


BufferedImageクラスに挙げられた不透明イメージの一部の種類など、ソースでピクセルのアルファ値を格納していない場合が多くあります
============================================================
タイムアウト
 このクラスによって定義されるreadメソッドとwriteメソッドを使用すると、読取りまたは書込み操作の開始時にタイム・アウトを指定できます
============================================================
SPACE_SEPARATOR
 LINE_SEPARATOR
 PARAGRAPH_SEPARATOR

注: このメソッドは、補助文字を処理できません
============================================================
誤った想定によってマルチ暦体系のコードのバグが発生する
 上記のように、任意の暦体系の日付を使用し、操作しようとする場合には考慮すべき多くの問題があります
============================================================
属性型名
 属性型名getAttributes()およびsearch()メソッドで、属性名(文字列)のリストを提供することによって、返す属性を提供できます
============================================================
CREATE_NEW 
 このオプションが存在する場合は、新しいファイルが作成され、ファイルがすでに存在するか、シンボリック・リンクである場合は失敗します
============================================================
特殊なIPv6アドレス 


IPv4マップのアドレス
::ffff:w.x.y.zという形式のIPv6アドレスは、IPv4アドレスを表すのに使用されます
============================================================
ActionMapと同様に、次の例のようなサイクルを生成すると、
 
 一部のメソッドではStackOverflowErrorがスローされる要因となります
============================================================
テキスト入力

 テキスト・コンポーネントは、キーマップとインプット・メソッドのフレームワークを使用して柔軟で国際化されたテキスト入力をサポートしています
============================================================
次のオブジェクトの場合、
Objectの配列、
 Hashtable、または
 Vector
新しいルート・ノードは、各オブジェクトを子として作成されます
============================================================
KeyIDConflictException
 KeyAuthorizationFailureException
 ExpiredKeyException
============================================================
実装上の考慮事項
Lock実装は、デッドロックを引き起こす呼び出しなどのロックの不正使用を検出し、そのような状況で(チェックされない)例外をスローできます
============================================================
3. 使用量しきい値

 各メモリー・プールは、使用量しきい値という管理可能な属性を持ち、このしきい値はJava仮想マシンが指定したデフォルト値を持ちます
============================================================
戻り値の型T1がvoidとしてマークされている場合、返される値はすべて破棄されます
 戻り値の型T0がvoidでT1が参照の場合、値nullが導入されます
============================================================
getCookieHandler
高レベルのセキュリティ保護を必要とする、HTTPセッションのCookie情報を処理するCookieハンドラを取得する機能
============================================================
setCookieHandler
高レベルのセキュリティ保護を必要とする、HTTPセッションのCookie情報を処理するCookieハンドラを設定する機能
============================================================
TLSv1

 このプロトコルについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのSSLContextのセクションで説明されています
============================================================
4.0 更新可能なSQLビュー
 未接続または接続済みのすべてのRowSetオブジェクトは、SQL VIEWを基に作成されたSQLクエリーから移植可能です
============================================================
[スキーム:]スキーム固有部分[#フラグメント]
 

 ここで、角カッコ[...]はオプションのコンポーネントを表し、文字:と#はその文字自体を表します
============================================================
3月16日
 3月16日以後の日曜日
 3月16日以前の日曜日
 2月の最後の日曜日
 
 これらの異なるルール・タイプを表現したり問い合わせたりできます
============================================================
相互運用性

 RFC 3530では、POSIXで定義されたアクセス権をサポートしているプラットフォームで特殊なユーザー識別情報を使用できるようにします
============================================================
InputMapと同様に、次の例のようなサイクルを生成すると、
 
 一部のメソッドではStackOverflowErrorがスローされる要因となります
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
charやdate型については最大文字数、numericやdecimal型については精度
  DECIMAL_DIGITS int =>小数点以下の桁数
============================================================
NUM_PREC_RADIX int =>基数(通常は、10または2のどちらか)
  COLUMN_USAGE String =>列の許可された使用方法
============================================================
logFileStringModelMBeanInfoModelMBeanNotificationInfo
イベントの記録先ファイルの完全修飾ファイル名
============================================================
ATTRIBUTE_NODE
生成されたAttr上で、ownerElement属性はnullに設定され、specifiedフラグはtrueに設定されます
============================================================
"namespace-declarations"
 「namespaces」パラメータがfalseに設定されている場合、このパラメータは効果がありません
============================================================
マルチキャスト・アドレスのスコープ 

 歴史的に、IPヘッダーのIPv4 TTLフィールドはマルチキャスト・スコープ・フィールドとして2倍になりました
============================================================
(要素インスタンスのxsi:nil属性)

declaredTypeおよびscopeプロパティは、XML型定義に対するJAXBクラスのバインディングです
============================================================
アクセス権ターゲット名
アクセス権により許可される機能
このアクセス権を許可した場合のリスク


hard
 既存のファイルをディレクトリに追加する機能
============================================================
型マッピング・ルール
javax.management.openmbeanパッケージで定義されているように、MXBeanはOpen MBeanの一種です
============================================================
次のgetterの場合、

    
T getName()

CompositeType内の項目はnameと呼ばれ、opentype(T)型を持ちます
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
com.sun.rowset.RowSetFactoryImpl 




 デフォルトのRowSetFactoryインスタンスをプラットフォームとする
============================================================
intersectメソッドがtrueを返し、かつ
 
ShapeにRectangle2Dが完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
callAbort
Connectionメソッドabort呼出しを許可します
データベースへの物理的な接続を終了させることをアプリケーションに許可します
============================================================
content_type


 ほかのCORBA擬似オブジェクトと違って、TypeCodeオブジェクトは一般的なIDLパラメータとして渡すことができます
============================================================
図3
 

redoを呼び出すと、次の編集結果のインデックスから次の重大な編集結果(リストの末尾)までのすべての編集結果に対してredoが呼び出されます
============================================================
このUUIDに関連したクロック・シーケンス値

  14ビットのクロック・シーケンス値は、このUUIDのクロック・シーケンス・フィールドから構築されます
============================================================
)

 この実装は、指定されたコレクションのイテレータを取得し、イテレータから取得した要素をこのリストの適切な位置に1つずつ挿入する操作を繰り返します
============================================================
結果の準備

 結果は、あらかじめ乗算されていないデータを格納するデスティネーション・バッファに戻す場合にのみ、次の式を使用して調整する必要があります
============================================================
0 <= mark <= position <= limit <= capacity

 新しく作成されたバッファの位置は常にゼロ、マークは未定義です
============================================================
ビット値


バイト1
0
ビット6-0


 null文字'\u0000'と'\u0080'から'\u07FF'の範囲の文字は2バイトで表現されます
============================================================
名前付きコンテキスト

 ある種のメソッドでは、名前がコンテキストを解釈処理している必要があります(たとえば、単一レベルのコンテキストを検索する場合)
============================================================
(つまり、(-X)-Y=-(X+Y)、X-(-Y)=X+Y、(-X)-(-Y)=-(X-Y))
次に2つのデュレーションがフィールドごとに減算されます
============================================================
[view-name:]attribute-name

 ここで、角カッコ[...]はオプションのコンポーネントを表し、文字':'はそれ自体を表します
============================================================
[view-name:]attribute-name

 ここで、角カッコ[...]はオプションのコンポーネントを表し、文字':'はそれ自体を表します
============================================================
[view-name:]attribute-list

 ここで、角カッコ[...]はオプションのコンポーネントを表し、文字':'はそれ自体を表します
============================================================
GridBagConstraints.insets
コンポーネントの外側のパディング、つまりコンポーネントと表示領域の端との間の最小の空間を指定します
============================================================
要素の挿入
葉以外の要素の既存の子の前後に要素を挿入するには、insertAfterStartおよびinsertBeforeEndメソッドを使用します
============================================================
"no-output-specified" [fatal]
 LSOutputへの書込み中に、LSOutputで出力が指定されていない場合に返されます
============================================================
プログラムによってMailcapCommandMapインスタンスに追加されたエントリ
  ユーザーのホーム・ディレクトリにあるファイル.mailcap
============================================================
メモリーの型
Java仮想マシンは、オブジェクト割当て用のヒープを持ち、メソッド領域とJava仮想マシンの実行用のヒープ以外のメモリーも保持しています
============================================================
初期アクセス権の設定 
 この属性ビューをサポートしている実装では、ファイルまたはディレクトリ作成時の初期アクセス権の設定もサポートする場合があります
============================================================
writeFileDescriptor
ファイル記述子への書込み
コードから、そのファイル記述子に関連付けられているファイルに書き込めるようになります
============================================================
すなわち、dfs.getDecimalSeparator()
LocalPositivePrefix  
正の数の前に表示する文字列(空の場合もある)
============================================================
コード例

 次のコードの抜粋は、未接続のRowSetオブジェクトcrsが自身を配下のデータ・ソースと同期することで、競合を解決する方法を示しています
============================================================
図4
 

UndoManagerに対してendが呼び出されると、すべてのUndoableEditメソッドに対してスーパー・クラスの動作が適用されます
============================================================
例1: 要素のリストへのマップ

例2: ほかの要素でラップされた要素のリストへのマップ
 

例3: アダプタを使用して型に基づいて要素名を変更する
============================================================
ATTRIBUTE_NODE
インポートしたAttrのownerElement属性をnullに設定し、specifiedフラグをtrueに設定します
============================================================
IGNORE_ALL_BEANINFO
指定されたbeanClassまたはそのすべての親クラスに関連付けられているBeanInfoをすべて無視します
============================================================
PKCS12

 このタイプについては、Java暗号化アーキテクチャ標準アルゴリズム名のドキュメントのKeyStoreのセクションで説明されています
============================================================
例: "US" (米国)、"FR" (フランス)、"029" (カリブ)
variant
Localeのバリエーションを示すために使用される任意の値
============================================================
ロケール定数
Localeクラスには、いくつかの便利な定数があるので、これらを使用して、よく使われるロケールのLocaleオブジェクトを作成できます
============================================================
実装上の考慮事項
ロック取得の3つの形式(割込み可、割込み不可、および時間指定)では、パフォーマンス特性、順序付けの保証、ほかの実装品質が異なります
============================================================
"namespaces"


true
[必須] (デフォルト)「XML名前空間」と「XML名前空間1.1」で定義されている名前空間処理を実行します
============================================================
1. ヒープ 
 Java仮想マシンに含まれるヒープは実行時データ領域であり、ここからすべてのクラス・インスタンスと配列のメモリーが割り当てられます
============================================================
文字列のそれぞれの部分を段階的に解析する
  小数点などの区域を位置合わせする
 
 たとえば、複数の数値を2つの方法で位置合わせすることができます
============================================================
キーのプロパティ・リスト(定義は下記のとおり)
 
Stringとして書き込まれたキーのプロパティ・リストは、カンマ区切り形式の要素リストになります
============================================================
org.omg.PortableInterceptor.ORBInitializer 
 名前の競合を防ぐため、逆方向のDNS命名規則が使用されます
============================================================
org.omg.PortableInterceptor.ORBInitializer 
 名前の競合を防ぐため、逆方向のDNS命名規則が使用されます
============================================================
使用例

 次のクラスには、1時間の間、10秒ごとにビープ音が鳴るようにScheduledExecutorServiceを設定するメソッドがあります
============================================================
systemTray
このプロパティには、システム・トレイが使用可能な場合はSystemTrayインスタンス、それ以外の場合はnullが格納されます
============================================================
パッケージ


 これは、パッケージ・レベルの注釈であり、JSR 175、セクション3の「Annotations」に含まれる推奨事項と制限に従います
============================================================
YEARS
DECADES
CENTURIES
MILLENNIA
ERAS

 他のすべてのChronoUnitインスタンスはfalseを返します
============================================================
使用上の注意:
 
単なるボーダーを作成するには、EmptyBorderを使用する(このメカニズムにより、古いsetInsetsが置き換えられる)
============================================================
コロンあり
 
 「オフセットなし」テキストは、出力されるオフセット・フィールドの合計量がゼロのときに、どのようなテキストを出力するかを制御します
============================================================
スレッド問題

 一般的なContextインスタンスのように、EventContextのインスタンスはスレッドに対して安全というわけではありません
============================================================
)
 
FutureTaskクラスは、Runnableを実装するFutureの実装であり、そのためExecutorによって実行されることがあります
============================================================
描画する色を指定する
 
Graphics2Dコンテキストの現在のComposite属性を使って、デスティネーションの描画表面に指定された色を塗る
============================================================
たとえば、
 
 Componentのレイヤー属性を設定するには、
 をコンポーネントの親であるJLayeredPane上で呼び出すこともできます
============================================================
"no-input-specified" [fatal]

 文書のロード中に、LSInputオブジェクトで入力が指定されていない場合に返されます
============================================================
直接メソッド・ハンドル
直接メソッド・ハンドルは、引数バインディングまたは他の変換が介在しないメソッド、コンストラクタ、またはフィールドを表します
============================================================
PARAM_IN - inパラメータを表す
PARAM_OUT - outパラメータを表す
PARAM_INOUT - inoutパラメータを表す
============================================================
PARAM_IN - inパラメータを表す
PARAM_OUT - outパラメータを表す
PARAM_INOUT - inoutパラメータを表す
============================================================
PARAM_IN - inパラメータを表す
PARAM_OUT - outパラメータを表す
PARAM_INOUT - inoutパラメータを表す
============================================================
不公平モード(デフォルト)
不公平として構築された場合は(デフォルト)、読み込みおよび書込みロックに入る順序は指定されず、再入可能性制約に従います
============================================================
すなわち、df.getPositivePrefix()
LocalPositiveSuffix  
正の数のあとに表示する文字列(空の場合もある)
============================================================
すなわち、df.getNegativePrefix()
LocalNegativeSuffix  
負の数のあとに表示する文字列(空の場合もある)
============================================================
例
  Socket s = new Socket(Proxy.NO_PROXY);は、ほかのプロキシ構成を無視してプレーンなソケットを作成します
============================================================
SyncProvider.UPDATABLE_VIEW_SYNC
     SyncProvider.NONUPDATABLE_VIEW_SYNC
============================================================
member_count
member_name


 次のメソッドは、struct、union、およびexceptionで呼び出すことができます
============================================================
サポートされているプロパティ


 現在、Unmarshallerに関してすべてのJAXBプロバイダがサポートする必要があるプロパティはありません
============================================================
使用法:  

 一部のJava型、たとえば、HashMapまたはその他の非JavaBeanクラスなどは、そのままではXML表現にマップされません
============================================================
enum定数

追加の一般的な情報については、javax.xml.bind.package javadocの「パッケージの仕様」を参照してください
============================================================
JavaBeanプロパティ 
 フィールド 
 クラス 

@XmlTransientは、その他のすべての定義済みのJAXB注釈と相互に排他的です
============================================================
実装上の考慮事項
Conditionの待機中に、基本となるプラットフォーム・セマンティクスへの譲歩として、通常、「見せかけの起動」が許可されます
============================================================
)
 
 このメソッドはパラメータ名とパラメータ値のペアごとに呼び出され、parameterValueの正規化された表現を返さなければいけません
============================================================
mxbeanString
MBeanInfo
このMBeanがMXBeanであるかどうかにより、文字列"true"または"false"になります
============================================================
persistPeriodNumber
ModelMBeanInfoModelMBeanAttributeInfo
永続サイクルの頻度(秒単位)
============================================================
クライアント形式の印刷データ
 印刷データは、クライアント形式の印刷データとサービス形式の印刷データの2つのカテゴリに大きく分けることができます
============================================================
NOTATION_NODE

 DOMの現在のリリースではDocumentTypeは読取り専用ですが、Notationノードはインポート可能です
============================================================
"schema-type"
[オプション]絶対URIを含み、文書の検証に使用されるスキーマ言語の型を表すDOMStringオブジェクトを表します
============================================================
プラットフォームの依存性 
 このファイル・ロックAPIは、基礎にあるオペレーティング・システムのネイティブのロック機能に直接マッピングされます
============================================================
icon
message


入力値


オプション・ボタン



 これらのダイアログ・ボックスの基本的な外観は、一般に右の図のようになります
============================================================
language
ISO 639 alpha-2またはalpha-3言語コード、または最大8文字の英字の登録済み言語サブタグ(将来の拡張のため)
============================================================
)
 
 返されるメソッド・ハンドルの引数が可変引数になるのは、コンストラクタの可変引数修飾子ビット(0x0080)が設定されている場合だけです
============================================================
だが、マッチ・フラグi d m s u x Uのオン/オフを切り替える
(?idmsux-idmsux:X)  
X、前方参照を行わないグループ
============================================================
すなわち、df.getPositiveSuffix()
LocalNegativePrefix  
負の数の前に表示する文字列(空の場合もある)
============================================================
または

 Aの型の注釈がEに直接または間接的に存在せず、Eがクラスであり、Aの型が継承可能であり、AがEのスーパークラスに関連付けられている
============================================================
最初の週
Calendar週の最初の日および最初の週の最小日数(1から7)という2つのパラメータを使用して、ロケール固有の週7日が定義されます
============================================================
jndi.syntax.direction
  構文解析の方向("right_to_left"、"left_to_right"、"flat")
============================================================
その他のデータ型の戻り値はNULL
  ORDINAL_POSITION int =>プロシージャの入力および出力パラメータの1から始まる順番
============================================================
"posix:permissions,owner,size" 
 POSIXファイル・アクセス権、所有者、およびファイル・サイズを読み取ります
============================================================
整列化

Marshallerクラスは、Javaコンテンツ・ツリーを変換してXMLデータに戻す機能をクライアント・アプリケーションに提供します
============================================================
)

 
 システム・プロパティJAXB_CONTEXT_FACTORYが存在する場合は、その値がプロバイダ・ファクトリ・クラスと見なされます
============================================================
注:
 
アクション・キーのF1やHELPなど、Unicode文字が生成されないキーの組み合わせでは、KEY_TYPEDイベントは発生しません
============================================================
例: "en" (英語)、"ja" (日本語)、"kok" (コンカニ語)
script
ISO 15924 alpha-4スクリプト・コード
============================================================
属性名
型


className
java.lang.String


identityHashCode
java.lang.Integer
============================================================
floorMod(4, 3) == 1;   および(4 % 3) == 1

引数の符号が異なる場合、結果は%演算子とは異なるものになります
============================================================
例:
 


 リスナーmyListenerは、「my_example.my_type」と等しいか、この文字列で始まる型の通知だけを受信します
============================================================
正規表現グループと前方参照
グループ番号
 前方参照を行う正規表現グループには、左から右方向に左丸括弧を数えることによって、番号が付けられます
============================================================
1    
((A)(B(C)))
2    
(A)
3    
(B(C))
4    
(C)

 グループ0は、常に表現全体を表します
============================================================
関係が関係サービスの内部オブジェクトである場合
 - RelationNotification.RELATION_MBEAN_CREATION
============================================================
関係が関係サービスの内部オブジェクトである場合
 - RelationNotification.RELATION_MBEAN_CREATION
============================================================
選択
 選択のたびに、セレクタの選択されたキー・セットにキーが追加されたり、キー・セットや取り消されたキー・セットからキーが削除されたりします
============================================================
1.0 概要
SyncFactoryクラスは、使用可能な同期プロバイダ実装(SyncProviderオブジェクト)の内部レジストリを提供します
============================================================
2.0 SyncProvider実装の登録

 ベンダーも開発者も、次のいずれかのメカニズムを使ってSyncProvider実装を登録できます
============================================================
TCKind定数の_valueフィールドにアクセスするためのvalueメソッド
 例:
 
 変数iは、IDLデータ型charの値9を表します
============================================================
引数target説明
"_self" アプレットを含むウィンドウおよびフレームに表示する
"_parent"アプレットの親フレームに表示する
============================================================
)

 この実装は、ソース・リストをスキャニングする「強引な」技術を使用して、ソース・リストの各位置でターゲットと一致するか順番に検索します
============================================================
objがnullでない
objがCompositeDataインタフェースも実装している
複合型が等しい
内容、すなわち名前と値のペアが等しい
============================================================
objがnullでない
objがCompositeDataインタフェースも実装している
複合型が等しい
内容、すなわち名前と値のペアが等しい
============================================================
アプリケーションによって閉じられた、プールされた接続
   エラー・イベントの場合は、アプリケーションにスローされるSQLException
============================================================
)

 toArray()メソッドと同じように、このメソッドは、配列ベースのAPIとコレクションベースのAPIの間の橋渡し役として機能します
============================================================
TABLE_SCHEM String =>スキーマ名
  TABLE_CATALOG String =>カタログ名(nullの可能性がある)
============================================================
TABLE_SCHEM String =>スキーマ名
  TABLE_CATALOG String =>カタログ名(nullの可能性がある)
============================================================
たとえば、
 
 テキストの長さ全体を読み取ることなく解析が完了した場合や、解析中またはマージ中に問題が発生した場合は、例外がスローされます
============================================================
たとえば、
 
 テキストの長さ全体を読み取ることなく解析が完了した場合や、解析中またはマージ中に問題が発生した場合は、例外がスローされます
============================================================
legalValues
Set<?>MBeanAttributeInfoMBeanParameterInfo
属性またはパラメータの有効な値
============================================================
ELEMENT_NODE
ソース要素の指定された属性ノードがインポートされ、生成されたAttrノードが生成されたElementに接続されます
============================================================
"infoset"



true
[必須] XML情報セット「XML Information Set」で定義された情報を文書内に維持します
============================================================
ToggleButtonモデルです
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースとの互換性がなくなる予定です
============================================================
そのため、ユーザーがグラデーションを構築するために次の配列を指定した場合、

 これは、次のキー・フレームを持つグラデーションに変換されます
============================================================
実装上の考慮事項
Conditionインスタンスの正確な操作はLock実装に依存するため、その実装によってドキュメント化される必要があります
============================================================
メモリー・プールの名前
通知が構築されたときのメモリー・プールのメモリー使用量
通知が構築されたときに、メモリー使用量がしきい値を超えた回数
============================================================
MouseWheelEvent.WHEEL_UNIT_SCROLL
  MouseWheelEvent.WHEEL_BLOCK_SCROLL
============================================================
setDefaultAuthenticator
プロキシまたはHTTPサーバーが証明書を要求したときに使用する、認証情報の取得方法を設定する
============================================================
ObjectInputStream内のこのメソッドのデフォルト実装は、次の呼出しの結果を返します
 
loaderは、次のように決定されます
============================================================
Perl 5との比較 
Patternエンジンは、Perl 5と同じく、順序付けされた代替に対する従来のNFAベースのマッチングを実行します
============================================================
そのため、ユーザーがグラデーションを構築するために次の配列を指定した場合、

 これは、次のキー・フレームを持つグラデーションに変換されます
============================================================
読み取られたバイトが順にb1、b2、b3、b4、b5、b6、b7、およびb8,で、次の条件を満たす場合:
 

 結果は以下と同じになります
============================================================
関係が関係サービスの内部オブジェクトである場合
 - RelationNotification.RELATION_MBEAN_REMOVAL
============================================================
関係が関係サービスの内部オブジェクトである場合
 - RelationNotification.RELATION_MBEAN_REMOVAL
============================================================
同じ座標系を共有し、仮想スクリーンを結合する
異なる座標系を使用し、個々のスクリーンのように動作する

 このコンストラクタは後者の場合です
============================================================
スレッドCPU時間
 Java仮想マシンの実装では、任意のスレッドやスレッド以外について、現在のスレッドのCPU時間の測定をサポートできます
============================================================
ファイナライズ
プールがプログラムで参照されなくなり、かつ残っているスレッドがなくなると、そのプールで自動的にshutdownが実行されます
============================================================
ORBクラスのメソッドの呼び出しから取得する
 たとえば次のメソッドは、最大30文字のstringのTypeCodeオブジェクトを生成します
============================================================
レイアウトへの関与

組み合わされたComponentのビューには、doLayoutやsetSizeと同様のsetSizeメソッドがあります
============================================================
XMLSignatureFactory型
XMLSignatureFactoryの各インスタンスは、特定のXMLメカニズム型をサポートします
============================================================
コンテキスト

         コンテキスト項目がない式を評価する要求が行われた場合、コンテキストには空のドキュメント・ノードが使用される
============================================================
コンテキスト

         コンテキスト項目がない式を評価する要求が行われた場合、コンテキストには空のドキュメント・ノードが使用される
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
オプション 説明 

 TRUNCATE_EXISTING 
 既存のファイルを開くと、ファイルは最初にサイズが0バイトに切り詰められます
============================================================
CREATE 
 このオプションが存在する場合は、既存のファイルが存在する場合はそれが開かれ、そうでない場合は新しいファイルが作成されます
============================================================
基本
 エンコードおよびデコード操作に、RFC 4648およびRFC 2045の表1に明記された「Base64アルファベット」を使用します
============================================================
Unicode文字表現
charデータ型(Characterオブジェクトにカプセル化される値)は、当初のUnicode仕様に基づいています
============================================================
実装上の考慮事項
このメソッドの呼出し時に、現在のスレッドは、このConditionに関連付けられているロックを保持するものとみなされます
============================================================
実装上の考慮事項
このメソッドの呼出し時に、現在のスレッドは、このConditionに関連付けられているロックを保持するものとみなされます
============================================================
実装上の考慮事項
このメソッドの呼出し時に、現在のスレッドは、このConditionに関連付けられているロックを保持するものとみなされます
============================================================
実装上の考慮事項
このメソッドの呼出し時に、現在のスレッドは、このConditionに関連付けられているロックを保持するものとみなされます
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
NUM_PREC_RADIX int =>基数(通常は、10または2のどちらか)
  NULLABLE int => NULLが許されるか
============================================================
maxValueObject
MBeanAttributeInfoMBeanParameterInfo
属性またはパラメータの有効な最大値
============================================================
minValueObject
MBeanAttributeInfoMBeanParameterInfo
属性またはパラメータの有効な最小値
============================================================
exportStringModelMBeanInfo
このMBeanをほかのJMXエージェントにエクスポートまたは公開するとき使用する名前
============================================================
PROCESSING_INSTRUCTION_NODE
インポートしたノードは、ソース・ノードからtargetとdataの値をコピーします
============================================================
false
[オプション]「要素コンテンツの空白文字」で説明されている、要素コンテンツ内に空白文字を含むすべてのTextノードを破棄します
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
CREATE 
 このオプションが存在する場合は、既存のファイルが存在する場合はそれが開かれ、そうでない場合は新しいファイルが作成されます
============================================================
CREATE 
 このオプションが存在する場合は、既存のファイルが存在する場合はそれが開かれ、そうでない場合は新しいファイルが作成されます
============================================================
0123456789abcdef


 これらは文字'\u0030' - '\u0039'および'\u0061' - '\u0066'です
============================================================
ItemEvent.SELECTED
 ItemEvent.DESELECTED

 上記以外の値を割り当てると、未指定の動作が発生します
============================================================
2.0 JoinRowSetオブジェクトによるJOINの作成
JoinRowSetオブジェクトの作成時には、このオブジェクトは空の状態です
============================================================
コード化形式

 これは鍵の外部コード化形式で、鍵を別の組織に転送する場合に、鍵の標準表示がJava仮想マシンの外部で必要なときに使います
============================================================
0123456789abcdef


 これらは文字'\u0030' - '\u0039'および'\u0061' - '\u0066'です
============================================================
ポーリング
使用量しきい値通知
コレクション使用量しきい値通知


 詳細は、MemoryPoolMXBeanインタフェースで指定されます
============================================================
引数の制限
 JVMは、あらゆる種類のすべてのメソッドおよびコンストラクタに対して、255個のスタックされた引数という絶対制限を適用します
============================================================
それもOptionalである、および
 両方のインスタンスに存在する値がない、または
 存在する値がequals()によってお互いに等しい
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
使用例:
Phaserは、可変数のパーティを処理する単発的なアクションを制御するために、CountDownLatchの代わりに使用できます
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
2.0 実装のガイドライン
FilteredRowSetのpredicateを提供するためには、このインタフェースを実装する必要があります
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
関係が関係サービスの内部オブジェクトである場合
 - RelationNotification.RELATION_MBEAN_UPDATE
============================================================
関係が関係サービスの内部オブジェクトである場合
 - RelationNotification.RELATION_MBEAN_UPDATE
============================================================
設計

 解像度属性の前後送り方向の解像度と送り方向の解像度の値は、100インチ当たりドット数(dphi)単位を使用して内部に格納されます
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
intersectメソッドがtrueを返し、かつ
 
Shapeに矩形領域が完全に含まれるかどうかを判定するための計算の負荷が非常に大きい
============================================================
)
 
 このWindowに対して、トラバーサル・キーが明示的に設定されていない場合、このWindowの親のトラバーサル・キーが返されます
============================================================
COMMENT  
 なし  
 String comment  
 コメントが存在する場合(null以外)、そのコメントが書き込まれます
============================================================
isLetter(codePoint)が次を返す:  true
 getType(codePoint)がLETTER_NUMBERを返す
============================================================
)
 
 トラバーサル・キーのセットがこのコンポーネントに対して明示的に定義されていない場合、このコンポーネントの親のセットが返されます
============================================================
value = 0
 extent = 0
 minimum = 0
 maximum = 100
 adjusting = false
============================================================
getStartPostion() <= getPosition()
getPosition() <= getEndPosition()
============================================================
サービス形式の印刷データ

サービス形式の印刷データの場合、Java Print Serviceインスタンスが印刷データ形式を判別します
============================================================
イベント・ソース
 登録メソッドを起動したEventContextインスタンスは、生成した(見込みも含む)イベントのイベント・ソースです
============================================================
値 説明 

 READ 
 ファイルが存在することと、Java仮想マシンにそのファイルを読み取るためのアクセス権があることを確認します
============================================================
値説明
JFormattedTextField.REVERT
            getValueの表示に合うように、表示を元に戻す
============================================================
このメソッドは、モデルが空の場合、-1を返します
 
 これは、リストのListUI内の同じ名前のメソッドに委譲するカバー・メソッドです
============================================================
MXBeanのマッピング
MemoryUsageは、fromメソッドで指定された属性を持つCompositeDataにマッピングされます
============================================================
)
 
 収集対象引数の特定の数に制限されない収集アダプタを作成するには、代わりにasVarargsCollectorを使用してください
============================================================
MXBeanのマッピング
MonitorInfoは、fromメソッドで指定された属性を持つCompositeDataにマッピングされます
============================================================
(上記のコード例はインターリーブ化パターンを使用)
 

同時発生パターン: 現行のmultidocからdocを取得してリストに保存する
============================================================
)
 
syncAll操作は、ほかの同期が存在していなくてもスレッドが新しいターゲット値を受け入れるように強制するための手段を提供します
============================================================
オブジェクト名
クエリーのコンテキスト内のオブジェクト名パターン

オブジェクト名は、ドメインの部分とキーのプロパティの部分から成ります
============================================================
なお、公開データ値に許可されるJavaクラスのセットは限定されている(ALLOWED_CLASSNAMES_LISTを参照)
名前
説明
============================================================
ms == 0の場合、全ピクセルが転送されるまで待つ
  ms > 0の場合、指定された時間が経過するか、全ピクセルが転送されるまで待つ
============================================================
競合発生時に試みられていた操作
SyncProviderインタフェースは、発生する可能性のある状態について説明する4つの定数を定義します
============================================================
サーバーのネイティブなcharコード・セットと変換コード・セットと、
サーバーのネイティブなwcharコード・セットと変換コード・セット
============================================================
認識されるプロパティと機能

 この仕様では、ValidatorHandlerのすべての実装で認識する必要がある次の機能を定義しています
============================================================
デフォルト規則:  
デフォルトでは、パッケージに@XmlAccessorTypeがない場合、次のパッケージ・レベルの注釈が仮定されます
============================================================
falseの場合

 falseの場合、プロパティに一致するすべての要素がDOMに非整列化され、プロパティにはDOM要素のみが含まれます
============================================================
プロパティ: accessExternalDTD

 外部DTDおよび外部エンティティ参照へのアクセスを指定されたプロトコルに制限します
============================================================
XML Schema単純型へのクラスのマッピング

@XmlValue注釈を使用して、クラスをXML Schema単純型にマップできます
============================================================
UNIT_INCREMENT
UNIT_DECREMENT
BLOCK_INCREMENT
BLOCK_DECREMENT
TRACK
============================================================
たとえば、

 
 ある場所から別の場所にデータを転送する際、このメソッドをcompactメソッドと組み合わせて使用することがあります
============================================================
jndi.syntax.beginquote
  このプロパティが存在する場合は、引用された文字列の始まりを区切る文字列が指定されます
============================================================
ISO_LOCAL_TIME


 他の暦体系の日付が正しく変換されるようにするために、返されるフォーマッタにはISO暦が設定されます
============================================================
推奨されるDocFlavor

 Java Print Service APIは、必須でサポートされるDocFlavorを定義しません
============================================================
keystorePasswordEnv="<environment-variable>" 
 キーストアのパスワードを保存する環境変数
============================================================
Java言語のリテラル文字列としてのパターンは"C:\\\\*"になる) 



 globパターンの解釈には次のルールが使用されます
============================================================
1xx: 情報
  2xx: 成功
  3xx: リダイレクション
  4xx: クライアント・エラー
  5xx: サーバー・エラー
============================================================
IPv6スコープ・アドレスのテキスト表現
 前述したIPv6アドレスのテキスト表現を拡張して、IPv6スコープ・アドレスを指定できます
============================================================
詳細
JLayeredPaneは、Containerと同じように子のリストを管理しますが、内部で複数のレイヤーを定義することができます
============================================================
init 
 起動中にJava仮想マシンがオペレーティング・システムから要求するメモリー管理のための初期メモリー量(バイト単位)を表す
============================================================
参照の種類
ルックアップ・ファクトリ・メソッドは、メソッド、コンストラクタおよびフィールドの主要ユース・ケースのすべてに対応しています
============================================================
それもOptionalLongである、および
 両方のインスタンスに存在する値がない、または
 存在する値が==によってお互いに等しい
============================================================
ファイルへのアクセス
 FilesクラスでPathを使用することで、ファイル、ディレクトリ、およびその他の種類のファイルを操作できます
============================================================
トークンは区切り文字でない文字が1個以上連続している部分である
 フラグがtrueの場合は、区切り文字はそれ自体がトークンと見なされる
============================================================
Chronology
  LocalDate
  LocalTime
  ZoneOffset
  精度
  ゾーン
  zoneId
============================================================
MXBeanのマッピング
ThreadInfoは、fromメソッドで指定された属性を持つCompositeDataにマッピングされます
============================================================
)

 このメソッドは通常、タスクの実行メソッドから呼び出され、現在のタスクが、スケジュールどおりに作業が実行されているかを判断します
============================================================
JavaBeanプロパティ 
 staticでない非一時フィールド 
 XmlElements内
 


 使用には次の制約があります
============================================================
)

 このマップがnull値を許可する場合、戻り値のnullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
)

 size、isEmpty、get、set、iterator、およびlistIteratorの処理は、一定の時間で実行されます
============================================================
9.0 プロパティの設定
 どの行セットも必ず一連のプロパティを保持しますが、それらのプロパティは通常、ツールを使用して設定されます
============================================================
考慮すべきアーキテクチャ上の問題
 アプリケーション全体でこのインタフェースを使用する前に、考慮する必要があるいくつかの点があります
============================================================
setExceptionsString[]
MBeanAttributeInfo
属性の設定時にスローされる場合がある例外のクラス名
============================================================
名前型使用する場所意味
classStringModelMBeanOperationInfo
メソッドが定義されたクラス(完全修飾)
============================================================
messageIDStringModelMBeanNotificationInfo
メッセージ・テキストの一意のキー(翻訳、分析用)
============================================================
例外

 このインタフェースのすべてのメソッドによって、NamingExceptionまたはそのサブクラスのいずれかがスローされます
============================================================
設計の根拠

 javax.print.dataパッケージ内のDocFlavorクラスは、DataFlavorクラスに類似しています
============================================================
ENTITY_NODE
DOMの現在のリリースではDocumentTypeは読取り専用ですが、Entityノードはインポート可能です
============================================================
"element-content-whitespace"


true
[必須] (デフォルト)文書内のすべての空白文字を維持します
============================================================
要求コントロール
InitialLdapContextである初期コンテキストを作成するときは、要求コントロールのリストを指定できます
============================================================
別のインプット・メソッド・クラスのインスタンスでactivateを呼び出す前
 このインプット・メソッドでdisposeを呼び出す前
============================================================
1.0 概要
 結果セットをJavaBeans™コンポーネントとして使用できるようにするResultSetオブジェクトのラッパーです
============================================================
service:jmx:protocol:sap

ここで、protocolはコネクタ・サーバーへの接続に使用する転送プロトコルです
============================================================
"validate-if-schema"
 このパラメータの説明については、DOMConfigurationの定義を参照してください
============================================================
)

 このマップがnull値を許可する場合、戻り値のnullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
)
 
 全体の効果としては、各コール・サイトのターゲットの将来のすべての読取り元に、直近で格納された値の受け入れを強制することです
============================================================
それもOptionalIntである、および
 両方のインスタンスに存在する値がない、または
 存在する値が==によってお互いに等しい
============================================================
文字クラス
 文字クラスは、ほかの文字クラス内に指定したり、結合演算子(暗黙的)や交差演算子(&&)を使用して作成することができます
============================================================
使用例:
 
 このメソッドから返されたサービスは、印刷サービスをサポートするPrinterJobインスタンスにインストールできます
============================================================
すなわち、dfs.getGroupingSeparator()
LocalDecimalSeparator  
小数点に使用する文字
============================================================
[ bytes written ] % [frame size in bytes ] == 0
戻り値は常にこの条件を満たしています
============================================================
使用法

@XmlElementRef注釈は、JavaBeanプロパティで使用するか、XmlElementRefs内から使用できます
============================================================
例2: 名前空間接頭辞、名前空間URIマッピングをカスタマイズする

例3: elementFormDefaultをカスタマイズする
============================================================
配置方向推奨サイズ

JList.VERTICAL
   リストのpreferredSizeは、行の高さの合計と、セルの最大幅です
============================================================
ダイレクト・バッファと非ダイレクト・バッファ 
 byteバッファには、「ダイレクト」バッファと「非ダイレクト」バッファがあります
============================================================
infoTimeoutStringLongMBeanInfo
MBeanInfoが変更されないと予想できる妥当な時間(ミリ秒単位)
============================================================
判別子を示すゼロ
 アクティブなメンバーを示す1
 
 共用体のcomponent_count値は、現在の判別子によって異なります
============================================================
判別子を示すゼロ
 アクティブなメンバーを示す1
 
 共用体のcomponent_count値は、現在の判別子によって異なります
============================================================
判別子を示すゼロ
 アクティブなメンバーを示す1
 
 共用体のcomponent_count値は、現在の判別子によって異なります
============================================================
月の何週目かを表す週(Week Of Month)
WEEK_OF_MONTHフィールドに対して計算される値の範囲は、0から6です
============================================================
接続先URLのホストとポートの組合せに対する「接続」SocketPermission
この要求を許可するURLPermission
============================================================
IGNORE_IMMEDIATE_BEANINFO
指定されたbeanClassに関連付けられているBeanInfoが無視されます
============================================================
したがって、次のように各コンポーネントに個別のレイヤー番号と文字を割り当てることにより、
 左のコンポーネントほど上に表示されます
============================================================
3.0 使用例

 次のコードの抜粋では、JoinRowSetオブジェクトに2つのCachedRowSetオブジェクトを追加します
============================================================
詳細

 ここで提示した公式の単純な評価は、有限精度(intを使用)でこの処理をすることによって生じる四捨五入誤差の影響を受けます
============================================================
new java.util.Random()

 この新しい擬似乱数ジェネレータは、以後このメソッドへのすべての呼出しに使われます
============================================================
className#member[objectName]

オブジェクト名は、ObjectNameの通常構文によって書き込まれます
============================================================
Standard MBeanMXBean






MBean ServerへのMBeanの登録の動作は、どちらの場合も同じです
============================================================
new java.util.Random()

 この新しい擬似乱数ジェネレータは、以後このメソッドへのすべての呼出しに使われます
============================================================
XML Schema複合型へのマッピング

クラスが@XmlType(name="")で注釈されている場合、匿名型にマップされます
============================================================
判別子を示すゼロ
 アクティブなメンバーを示す1
 
 共用体のcomponent_count値は、現在の判別子によって異なります
============================================================
ComboBoxレンダラ
 
警告: このクラスの直列化されたオブジェクトは、今後のSwingリリースと互換ではなくなる予定です
============================================================
並行アクセス

 すべてのCertStoreSpiオブジェクトのpublicメソッドは、スレッドに対して安全である必要があります
============================================================
直列化
 オブジェクト保存時にはSerializableプロトコルに適合するAWTリスナーだけが保存されることに注意してください
============================================================
たとえば、
 
コンストラクタに指定できる修飾子は、アクセス修飾子のpublic、protectedまたはprivateだけです
============================================================
その他のデータ型の戻り値はNULL
  ORDINAL_POSITION int =>入力および出力パラメータの1から始まる順番
============================================================
1080:0:0:0:8:800:200C:417A

 各フィールド内の先頭部分のゼロは記述する必要がない点に注意してください
============================================================
networkaddress.cache.ttl
ネーム・サービスによる成功した名前検索に対するキャッシング・ポリシーを示します
============================================================
IGNORE_EXTENDED_RANGES


基本フィルタリングを実行して"de-DE"と"de-DE-1996"を返します
============================================================
"unsupported-encoding" [fatal]
 サポートされていないエンコーディングが検出された場合に返されます
============================================================
"unsupported-encoding" [fatal]
 サポートされていないエンコーディングが検出された場合に返されます
============================================================
)
 T0がbooleanでT1が別のプリミティブの場合、booleanがバイト値に変換されます(trueは1、falseは0)
============================================================
getProxySelector
ネットワーク接続の確立時に使用すべきプロキシの決定に使用されるプロキシ・セレクタを取得する機能
============================================================
setProxySelector
ネットワーク接続の確立時に使用すべきプロキシの決定に使用されるプロキシ・セレクタを設定する機能
============================================================
writeメソッドは常にIOExceptionをスローする
 closeメソッドは何も行わない
 
標準出力と標準エラーの出力先
============================================================
また、次の3番目の例では、行:
 
 は、キーが"cheeses"で、関連付けられている要素が空の文字列""であることを表します
============================================================
関係サービス内専用の関係である場合
 - RelationNotification.RELATION_MBEAN_REMOVAL
============================================================
関係サービス内専用の関係である場合
 - RelationNotification.RELATION_MBEAN_REMOVAL
============================================================
プログラム例1
次のコードの場合、ResourceBundle.getBundleはプロパティ・ベースのリソースのみを検索します
============================================================
)

 プログラム例2
Properties.loadFromXMLを使ってXMLベースのバンドルをロードする例を、次に示します
============================================================
getPolicy
システム全体のセキュリティ・ポリシー(具体的には、現在インストールされているPolicyオブジェクト)の取得
============================================================
オプション機能のサポートなし
オプションのオーバーロードされたメソッドのサポートなし
メソッドのオプションのモードのサポートなし
============================================================
SAX2.0準拠パーサーのサポート

 クライアント・アプリケーションは、それぞれが選んだSAX2.0準拠パーサーを選択できます
============================================================
[スキーム:][//機関][パス][?クエリー][#フラグメント]
 

 ここで、:、/、?、および#はその文字自体を表します
============================================================
グループのActivationGroupID
 グループの初期化データ(java.rmi.MarshalledObject内)
============================================================
)

 
 または、浮動小数点演算を使用する実装では、より正確な結果が生成され、ほとんど丸め誤差のない元のピクセル値に戻ります
============================================================
データの転送 
 このクラスのサブクラスは、それぞれ次の2つのカテゴリに該当する「get」操作および「put」操作を定義します
============================================================
代わりにLocalDateを使用する
 アプリケーション全体でこのインタフェースを使用することの主な代替策は次のようになります
============================================================
#Sample currency properties JP=JPZ,999,0 

 日本の通貨データがこれに置き換わります
============================================================
longやmediumなど


 より複雑なフォーマッタはDateTimeFormatterBuilderによって提供されます
============================================================
'
接頭辞または接尾辞
          なし
          接頭辞や接尾辞内の特殊文字を引用符で囲む場合に使用される
============================================================
metricTypeString
MBeanAttributeInfoMBeanOperationInfo
メトリックのタイプ
============================================================
)

 Executorsクラスは、このパッケージで提供されるexecutorサービスのためのファクトリ・メソッドを提供します
============================================================
(デフォルトは無制限) 
   <handler-name>.countは循環する出力ファイル数を指定します(デフォルトは1)
============================================================
EXECUTE 
 ファイルが存在することと、Java仮想マシンにそのファイルを実行するためのアクセス権があることを確認します
============================================================
描画互換性
 JDK(tm) 1.1描画モデルは、座標がピクセル間の無限に細い間隔に存在するというピクセル化モデルに基づきます
============================================================
現在のLAFからのカスタマイズ
 
 HTMLは、よく知られた表示機能を提供しますが、その表示特性は正確には指定されていません
============================================================
IPアドレスのテキスト表現 

 メソッドの入力として使用されるIPv4アドレスのテキスト表現は、次のいずれかの形式になります
============================================================
IPアドレスのテキスト表現 

 メソッドの入力として使用されるIPv6アドレスのテキスト表現は、次のいずれかの形式になります
============================================================
WHEN_FOCUSED
 アクションは、コンポーネントがフォーカスを持つ場合にキー・ストロークが発生したときだけ呼び出される
============================================================
特例として:
 どちらかの引数がNaN、1番目の引数が無限大、2番目の引数が正のゼロまたは負のゼロの場合は、NaNが返されます
============================================================
usePolicy
このアクセス権を付与すると、Java Plug-Inのデフォルトのセキュリティ・プロンプト動作が無効になる
============================================================
<crypto_service>.<algorithm_or_type>
 暗号化サービス名には、ドットを含まないようにします
============================================================
<crypto_service>.<algorithm_or_type>
 暗号化サービス名には、ドットを含まないようにします
============================================================
特例として:
 どちらかの引数がNaN、1番目の引数が無限大、2番目の引数が正のゼロまたは負のゼロの場合は、NaNが返されます
============================================================
[ bytes read ] % [frame size in bytes ] == 0
戻り値は常にこの条件を満たしています
============================================================
length


 次のメソッドは、alias、sequence、array、およびvalue_boxで呼び出すことができます
============================================================
SwingConstants.CENTER
SwingConstants.TOP
SwingConstants.BOTTOM
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
)

 この実装では、ソース・リストの反復処理を行う「強引な」技術を使用して、各位置でターゲットと一致するか順番に検索します
============================================================
)
 
 トラバーサル・キーのセットがこのコンテナに対して明示的に定義されていない場合、このコンテナの親のセットが返されます
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
targetTypeStringModelMBeanOperationInfo
targetObjectのオブジェクト参照型
============================================================
false
[必須] (デフォルト)文書にスキーマが含まれている場合は、内部サブセット処理も含め、スキーマ処理を実行しません
============================================================
要素の置換
要素とそのすべての子孫を置換するには、setInnerHTMLおよびsetOuterHTMLメソッドを使用します
============================================================
元に戻す/再実行のサポート

 編集履歴メカニズムのサポートが提供されているので、元に戻す/再実行の操作を行うことができます
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
VERSION = version

 取得するMBeanと関連.jarファイルのバージョン番号を指定するオプション属性です
============================================================
カウンタ・モニターとゲージ・モニターに共通:
     
上限値または下限値の型がゲージ(ゲージ・モニター)の型と異なる場合
============================================================
)
 
MouseEventリスナーを作成し、目的のイベントのためのメソッドをオーバーライドするには、このクラスを拡張します
============================================================
プラットフォームの依存性

 マルチキャスト実装は、ネイティブ・マルチキャスト機能に直接マッピングすることを目的としています
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
並行アクセス
すべてのPolicyQualifierInfoオブジェクトは、不変で、スレッドに対して安全である必要があります
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
Rectangle2DとShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
VALUE_ANTIALIAS_ON
VALUE_ANTIALIAS_OFF
VALUE_ANTIALIAS_DEFAULT
============================================================
removeProviderProperty.{provider name}
指定したProviderからのプロパティの削除
============================================================
アクション文字列
 URLPermissionのアクション文字列は、メソッド・リストと要求ヘッダー・リストを連結したものです
============================================================
(@XmlAnyElementで注釈されたプロパティを仮定)


 次に、混合コンテンツのバインディングと作成の例を示します
============================================================
例2:  xs:allを使用した複合型にクラスをマップする 

 例3: 匿名型を使用したグローバル要素にクラスをマップする
============================================================
変数

        式に変数の参照が含まれる場合、XPathVariableResolverによってその値が見つけられる
============================================================
シャットダウンおよび終了
 shutdownメソッドは、グループの正しい順序でのシャットダウンを開始するために使用されます
============================================================
CREATE_NEW 
 このオプションがある場合、新しい空のファイルが作成され、ファイルがすでに存在する場合は失敗します
============================================================
属性が範囲全体に対して未定義またはnullである、あるいは
 属性値が定義され、範囲全体に対してnull以外の同じ値を持つ
============================================================
width
ペンの軌跡に対して垂直方向のペンの幅
 先端
閉じられていない部分輪郭線セグメントと破線セグメントの両端の装飾
============================================================
それ以外の場合は、次のようになる
 
 nが正の場合、二乗法を繰り返して単一のアキュムレータに入れることで結果が計算される
============================================================
ResultSet.TYPE_SCROLL_INSENSITIVE
 ResultSet.CONCUR_UPDATABLE
============================================================
"cdata-sections"



true
[必須] (デフォルト)文書のCDATASectionノードを維持します
============================================================
false
[必須]文書からすべてのEntityReferenceノードを削除し、その場所で直接エンティティ拡張を行います
============================================================
TRUNCATE_EXISTING 
 このオプションが存在する場合は、既存のファイルはサイズが0バイトに切り詰められます
============================================================
CREATE_NEW 
 このオプションがある場合、新しい空のファイルが作成され、ファイルがすでに存在する場合は失敗します
============================================================
TRUNCATE_EXISTING 
 このオプションが存在する場合は、既存のファイルはサイズが0バイトに切り詰められます
============================================================
WRITE 
 ファイルが存在することと、Java仮想マシンにそのファイルに書き込むためのアクセス権があることを確認します
============================================================
::255.255.0.d

 ここで、「::d」は一般的なIPv6アドレス「0:0:0:0:0:0:0:d」に対応します
============================================================
サービス・プロバイダの要求

 サービス・プロバイダは、接続およびコンテキストの要求コントロールを次のようにサポートします
============================================================
"resource-resolver"
[必須] LSResourceResolverオブジェクトへの参照、またはnull
============================================================
"canonical-form"


true
[オプション]「正規XML」で指定されている規則に従って文書を書き込みます
============================================================
アクセス・チェック
 アクセス・チェックは、メソッド・ハンドルの作成時にLookupのファクトリ・メソッド内で適用されます
============================================================
型名
MXBean内のメソッド・パラメータや戻り値のマップされていない型Tを文字列として表現することが必要な場合があります
============================================================
JavaでORB初期化子を登録する

 ORBInitializersは、Java ORBプロパティを経由して登録されます
============================================================
JavaでORB初期化子を登録する

 ORBInitializersは、Java ORBプロパティを経由して登録されます
============================================================
正規表現    
結果
:
{ "boo", "and", "foo" }
o
{ "b", "", ":and:f" }
============================================================
)

 このメソッドを呼び出したときに、返されるノードとその上位ノードが存在しなかった場合は、それらのノードが作成されます
============================================================
)

 このメソッドを呼び出したときに、返されるノードとその上位ノードが存在しなかった場合は、それらのノードが作成されます
============================================================
VALUE_DITHER_DISABLE
VALUE_DITHER_ENABLE
VALUE_DITHER_DEFAULT
============================================================
VALUE_STROKE_NORMALIZE
VALUE_STROKE_PURE
VALUE_STROKE_DEFAULT
============================================================
無視可能な文字

 無視可能な文字の場合、最初のルールは、関係文字で始まる必要があります(上の例は実際には一部を表している
============================================================
W3C XML Schema 1.0

 結果として得られるスキーマには、指定されたソースからのコンポーネントが含まれます
============================================================
スレッドID
 スレッドIDは、スレッドのThread.getId()メソッドの呼出しにより返された正のlong型の値です
============================================================
id
name


 次のメソッドは、struct、union、enum、およびexceptionで呼び出すことができます
============================================================
XMLデータの非整列化

 非整列化では、XML文書全体またはXML文書のサブツリーを表すXMLデータを直列化復元できます
============================================================
URI構文とコンポーネント 

 最高位レベルの文字列形式のURI参照(以降は単に「URI」とする)の構文は次のとおりです
============================================================
動的アクセス 
 ファイル属性への動的アクセスが必要な場合、この属性ビューによってサポートされている属性は次のとおりです
============================================================
MIME
 エンコードおよびデコード操作に、RFC 2045の表1に明記された「Base64アルファベット」を使用します
============================================================
イテレータの使用例
 



CollationElementIterator.nextは、次の文字の照合順序を返します
============================================================
マルチスレッド・アクセス
CompoundNameインスタンスは、並行マルチスレッド・アクセスに対しては同期化されません
============================================================
TYPEがtableIndexStatisticの場合はnull
INDEX_NAME String =>インデックス名
============================================================
getMethodStringModelMBeanAttributeInfo
getメソッドのオペレーション記述子の名前
============================================================
setMethodStringModelMBeanAttributeInfo
setメソッドのオペレーション記述子の名前
============================================================
COPY_ATTRIBUTES 
 このファイルに関連付けられたファイル属性をターゲット・ファイルにコピーしようとします
============================================================
1.0 背景
RowSetオブジェクトで、ある程度のコンテンツ・フィルタリング機能を提供しなければならない場合があります
============================================================
拡張可能/スケーラブル
 
 このキットを無駄なく活用できるようにするために、キットを拡張可能にする努力が払われています
============================================================
JFormattedTextField.COMMIT_OR_REVERT
            COMMITとほぼ同じ
============================================================
MXBeanのマッピング
LockInfoは、fromメソッドで指定されたCompositeDataにマッピングされます
============================================================
注:

MXBeanプロキシの使用は、実行中の仮想マシンのプラットフォームMXBeanへのリモート・アクセスに有用である
============================================================
2. ヒープ以外のメモリー
 Java仮想マシンは、「ヒープ以外のメモリー」(非ヒープ・メモリーと呼ばれる)を管理します
============================================================
org.omg.CORBA.ORB.create_list

 変数nvは新たに作成されたNVListオブジェクトを表す
============================================================
VALUE_RENDER_SPEED
VALUE_RENDER_QUALITY
VALUE_RENDER_DEFAULT
============================================================
getStackTrace
別のスレッドのスタック・トレース情報の取得
別のスレッドのスタック・トレース情報を取得できる
============================================================
実装上の注意: 

 通常、エントリのサイズと位置を格納する際には、サイズの格納か、または位置の格納のどちらかを選びます
============================================================
)

 繰返しタイマー・タスクのrunメソッドからこのメソッドを呼び出すと、タイマー・タスクは二度と実行されなくなります
============================================================
または

 Aの型の注釈がEに直接存在せず、Eがクラスであり、Aの型が継承可能であり、AがEのスーパークラスに存在する
============================================================
countDown()メソッドの呼出しにより、カウントがゼロに達する
 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
countDown()メソッドの呼出しにより、カウントがゼロに達する
 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
ISO_OFFSET_DATE_TIME
ゾーンIDが使用不可またはZoneOffsetである場合、書式設定は完了です
============================================================
(MapMode.READ_ONLY) 
 読み込み/書き込み: 結果のバッファへの変更は最終的にファイルに伝達される
============================================================
ATOMIC_MOVE 
 この移動は原子的なファイル・システム操作として実行され、他のオプションはすべて無視されます
============================================================
年の何週目かを表す値および暦週の基準年
WEEK_OF_YEARフィールドに対して計算される値の範囲は、1から53です
============================================================
たとえば、

 

 これは、単一パスで、人数だけでなく、その扶養家族の最小値、最大値、合計、および平均値も計算します
============================================================
JAXB実装の検出

 いずれかのnewInstanceメソッドが呼び出されると、次の手順でJAXB実装が検出されます
============================================================
"well-formed"
 このパラメータの説明については、DOMConfigurationの定義を参照してください
============================================================
4. コレクション使用量しきい値

 一部のガベージ・コレクトされたメモリー・プールだけに適用できる管理可能な属性です
============================================================
CODEBASE = codebaseURL

 取得するMBeanのコード・ベースURLを指定するオプション属性です
============================================================
行末記号
 行末記号とは、入力文字シーケンスの行の末尾を指定するときに使用する、1文字または2文字の文字シーケンスです
============================================================
たとえば、
 
標準プロパティ・ファイルの使用リファレンス実装はJ2SE 5.0に付属して出荷されることになっています
============================================================
JavaBeanプロパティ 
 フィールド 

 static finalフィールドは、XML固定属性にマップされます
============================================================
END_ELEMENT  
 Qname name  
 なし 
 整形式のEND_ELEMENTタグが書き込まれます
============================================================
サポートされているプロパティ
次のプロパティは、アプリケーションでsetPropertyメソッドを使用して設定できます
============================================================
6.0 デフォルトの動作
 デフォルトのBaseRowSetオブジェクトの初期化のときの開始値は、一定ではありません
============================================================
マークとリセット 
 バッファの「マーク」は、resetメソッドを呼び出したときに戻る位置を指定するインデックスです
============================================================
CachedRowSet.absolute
CachedRowSet.first
CachedRowSet.last
============================================================
CachedRowSet.absolute
CachedRowSet.first
CachedRowSet.last
============================================================
丸め
DecimalFormatは、RoundingModeで定義されている丸めモードをフォーマット処理に提供します
============================================================
属性値に含まれている一般的なエンティティ
宣言に含まれているパラメータ・エンティティ

これらは通知なく拡張されます
============================================================
"entities"



true
[必須] (デフォルト)文書のEntityReferenceノードを維持します
============================================================
使用例

 次に示すネットワーク・サービスの概略では、要求が着信するスレッド・プール・サービス内のスレッドを示します
============================================================
レイアウト・グリッドの寸法の計算
 コンポーネントを配置するセルの指定
 行または列間へのウエイトと最小サイズの配分
============================================================
KeyStore.PrivateKeyEntry
 このタイプのエントリには暗号化PrivateKeyが格納されます
============================================================
属性値に含まれている一般的なエンティティ
宣言に含まれているパラメータ・エンティティ

これらは通知なく拡張されます
============================================================
実装上の考慮事項
ある状況下ではロック取得に割り込むことができず、場合によっては負荷の大きい操作になる場合があります
============================================================
実装上の考慮事項
ある状況下ではロック取得に割り込むことができず、場合によっては負荷の大きい操作になる場合があります
============================================================
false
[オプション]プロセッサで正規化プロパティを判定できない文字が検出された場合は、致命的エラーを報告します
============================================================
メソッド・ハンドルの内容
 メソッド・ハンドルは、そのパラメータと戻り値の型に従って動的にかつ強く型付けされています
============================================================
)
 
 ルックアップ・クラスがメンバーにアクセスする完全な権限を持っている場合、最初の引数の型はrefcになります
============================================================
getNetworkInformation
ローカル・ネットワークのインタフェースに関するすべての情報を取得する機能
============================================================
requestPasswordAuthentication
システムに登録されたオーセンティケータにパスワードを要求
============================================================
相互運用性
 デフォルト・プロバイダに関連付けられたPathは通常、java.io.Fileクラスと相互運用可能です
============================================================
ローカライズの数 
 このクラスのインスタンスは、標準の書式に加え、スキャナのロケールの書式で数値をスキャンできます
============================================================
pのアクションは、このオブジェクトのアクションの適切なサブセットである
  pのポート範囲が、このポート範囲に収まる
============================================================
正規表現
結果

:
{ "boo", "and", "foo" }
o
{ "b", "", ":and:f" }
============================================================
1時間ベースのUUID
 2 DCEセキュリティUUID
 3名前ベースのUUID
 4ランダムに生成されたUUID
============================================================
)

 注釈型TCが要素に存在し、Tが繰返し可能に変更され、TCがその包含する注釈型である場合、次のようになります
============================================================
並行アクセス

CertStoreオブジェクトのすべてのpublicメソッドは、スレッドセーフでなければいけません
============================================================
entryNameSeparator="<separator>" 
 キーストア名の接頭辞とエントリ名の区切り文字
============================================================
true
[必須] (デフォルト)スキーマから指定またはデフォルト設定されている名前空間宣言属性を文書内に含めます
============================================================
たとえば、

 

 これは、単一パスで、人数だけでなく、その体重の最小値、最大値、合計、および平均値も計算します
============================================================
read  読込みアクセス権
     write  書込みアクセス権
     execute
     実行権
============================================================
たとえば、

 
JarURLConnectionインスタンスは、JARファイルからの読取り時にしか使用できません
============================================================
順方向と逆方向のキャレット移動
 
モデル/ビュー分割

 テキスト・コンポーネントはモデル/ビュー分割を持ちます
============================================================
ビルダー
Locale.Builderを使用して、BCP 47構文に適合するLocaleオブジェクトを構築できます
============================================================
)
 JMMでは特に、無益であることがわかっている変数の読み取りや書込みを除去するようにコンパイラを最適化できます
============================================================
例

 たとえば、X社が記述クライアント側のロギング・サービスに次のORBInitializer実装があるとします
============================================================
例

 たとえば、X社が記述クライアント側のロギング・サービスに次のORBInitializer実装があるとします
============================================================
putProviderProperty.{provider name}
指定したProviderのプロパティの設定
============================================================
スレッドの安全性 

 SerialJavaObjectは、複数の並行スレッドによる使用において安全ではありません
============================================================
非整列化イベント・コールバック

Unmarshallerは、2つのスタイルのコールバック・メカニズムを提供します
============================================================
例2: XML Schema置換グループ・サポート
 次の例は、XML Schema置換グループ用の注釈を示します
============================================================
機能やプロパティを照会および設定するための標準的な方法
高度なXML標準で必要とされることが多い名前空間のサポート
============================================================
YEAR_OF_ERA
YEAR
ERA

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
UTCを基準とする
有効な標準オフセットを基準とする
ウォール・オフセット(壁の時計に表示されるもの)を基準とする
============================================================
転送元と転送先は同じにはしない
 Rasterオブジェクトの場合、転送元のバンド数は転送先のバンド数と同じにする
============================================================
SPARSE 
 新しいファイルの作成時に、このオプションは新しいファイルがスパースであることのヒントになります
============================================================
SYNC 
 ファイルの内容またはメタデータの更新は、基本となる記憶装置に同期的に書き込まれることを必要とします
============================================================
最後のスレッドが到着する
 指定されたタイム・アウトが経過する
 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
例"#,#00.0#" → 1,234.56
 これは、最小2桁の整数、1つの小数点、最大2桁の小数を意味します
============================================================
例"#,#00.0#" → 1,234.56
 これは、最小2桁の整数、1つの小数点、最大2桁の小数を意味します
============================================================
SPARSE 
 新しいファイルの作成時に、このオプションは新しいファイルがスパースであることのヒントになります
============================================================
SYNC 
 ファイルの内容またはメタデータの更新は、基本となる記憶装置に同期的に書き込まれることを必要とします
============================================================
SPARSE 
 新しいファイルの作成時に、このオプションは新しいファイルがスパースであることのヒントになります
============================================================
SYNC 
 ファイルの内容またはメタデータの更新は、基本となる記憶装置に同期的に書き込まれることを必要とします
============================================================
例
 
要求ホストy.x.foo.comからのDomain=.foo.comのSet-Cookie2は拒否される
============================================================
jmx.remote.connection.notifs.lost
クライアント接続の通知が失われた可能性がある
============================================================
デルタの分散 
 概要 

 ターゲット・サイズと、r内の要素の推奨サイズの合計との差を「DELTA」と呼びます
============================================================
スレッド・セーフ

 Swingテキスト・コンポーネントは特定のスレッドに対して安全な操作のサポートを提供します
============================================================
KeyStore.SecretKeyEntry
 このタイプのエントリには暗号化SecretKeyが格納されます
============================================================
レガシー言語コード
Localeのコンストラクタは常に、3つの言語コードを廃止された以前の形式に変換してきました
============================================================
コードが変更された言語かどうかを調べる場合は、次のようにしないでください
 
 代わりに、次のようにしてください
============================================================
false
[必須]パーサーは、より高レベルのプロトコルからの文字セット・エンコーディング情報をすべて無視します
============================================================
"validate"
 このパラメータの説明については、DOMConfigurationの定義を参照してください
============================================================
)
 T0とT1がプリミティブの場合、Javaメソッド呼出し変換(JLS 5.3)が適用されます(存在する場合)
============================================================
)
 T0がプリミティブでT1が参照の場合、Javaキャスト変換(JLS 5.5)が適用されます(存在する場合)
============================================================
例外
Java型から公開型へのマッピングで問題が発生すると、OpenDataExceptionにより通知されます
============================================================
例:
 
この例では、Enabled+Selectedの状態で、「foreground」が検索されたと仮定します
============================================================
実装上の注意: 
このロックは、最大65535の再帰的書込みロックおよび65535の読込みロックをサポートします
============================================================
getDomainCombiner
AccessControlContextのDomainCombinerを取得
============================================================
デフォルトのルック・アンド・フィール

 デフォルトのルック・アンド・フィールのクラスは、次の方法で選択されます
============================================================
2.4 状態4 - 行の変更
 行を変更すると、新しい値と置換された値の両方を記録する固有のXMLが生成されます
============================================================
使用例
次に、値ゼロを使用してロック解除状態およびロック状態を表す再入不可能な相互排他ロック・クラスを示します
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
並行アクセス

 特に指定しない限り、このインタフェースで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に指定しない限り、このインタフェースで定義されているメソッドはスレッドセーフではありません
============================================================
たとえば、インスタンス・メソッドでは、

 
Class.forName("Foo")


 は、次と同じです
============================================================
)

  このClassオブジェクトがプリミティブ型またはvoidを表す場合、返される配列の長さは0になります
============================================================
並行アクセス

 特に指定しない限り、このインタフェースで定義されているメソッドはスレッドセーフではありません
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
TYPEがtableIndexStatisticの場合は0
  COLUMN_NAME String =>列名
============================================================
たとえば、
 

 'A'から'Z'および'a'から'z'のすべての文字は、パターン文字として予約されています
============================================================
利用可能な最良のものが選択されます
 
 書式設定時には、書式設定される時間的オブジェクトから暦が取得されます
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
描画プロセス
 描画プロセスは、Graphics2D描画属性によって制御される4つの段階に分けることができます
============================================================
)
 これはgetReader(int, int, int, HTML.Tag, TRUE)の簡易メソッドです
============================================================
)

ホストがドメインに含まれない(RFC 2965セクション3.3.2)のは、次のいずれかが成り立つ場合です
============================================================
getInteger(nm, new Integer(val))


 しかし実際には、次のように実装されます
============================================================
タイプ
意味


jmx.remote.connection.opened
新しいクライアント接続が開始された
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
直列化
直列化の際、拡張も含めすべてのフィールドがwriteObjectによって出力ストリームに書き込まれます
============================================================
"infoset"
 このパラメータの説明については、DOMConfigurationの定義を参照してください
============================================================
特例として:

 
引数がNaNまたは無限大の場合、結果はDouble.MAX_EXPONENT+1になります
============================================================
名前型意味
nameString
属性名
descriptorTypeString
必ず"attribute"
============================================================
exportString
このMBeanをほかのJMXエージェントにエクスポートまたは公開するとき使用する名前
============================================================
exportString
このMBeanをほかのJMXエージェントにエクスポートまたは公開するとき使用する名前
============================================================
MONTH_OF_YEAR
YEAR

 他のすべてのChronoFieldインスタンスはfalseを返します
============================================================
Standard MBeanMXBean






上記の記述から、定義は非常に類似していることがわかります
============================================================
Standard MBeanMXBean






MXBeanの定義
MXBeanは、MBeanの一種です
============================================================
getResponseCache
ローカル応答キャッシュへのアクセス機能を提供する応答キャッシュを取得する機能
============================================================
setResponseCache
ローカル応答キャッシュへのアクセス機能を提供する応答キャッシュを設定する機能
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
矩形領域とShapeが交差している可能性が高いが、
 
 この共通部分を正確に判断する計算の負荷がかなり大きい
============================================================
low
medium
high

 リスト内の先頭に近いクライアントまたはサーバーほど、優先順位が高くなります
============================================================
スレッドの安全性 

 SerialDatalinkは、複数の並行スレッドによる使用において安全ではありません
============================================================
getSSLSessionContext
SSLSessionのSSLSessionContextを取得できる
============================================================
特例として:

 
引数がNaNまたは無限大の場合、結果はDouble.MAX_EXPONENT+1になります
============================================================
キューイング
送信されたタスクを転送したり保持したりするために、任意のBlockingQueueを使用できます
============================================================
キューの保守
getQueue()メソッドを使用すると、監視やデバッグの目的でワーク・キューにアクセスできます
============================================================
demo/jfc/SwingSet2/src/SwingSet2.java

 最後に相対化とは、解決の逆です
============================================================
文字カテゴリ 

 URI参照の各種コンポーネントで許可される文字は、RFC 2396で厳密に指定されています
============================================================
openConnection()
connect()
リモート・リソースへの接続に影響するパラメータを操作する
============================================================
0 NCS下位互換性を維持するために予約されている
 2 IETF RFC 4122 (Leach-Salz)
============================================================
このUUIDに関連したノード値

  48ビットのノード値は、このUUIDのノード・フィールドから構築されます
============================================================
モデルの一部を描画する

ペイント・メソッドで描画しますが、コンポーネント・ペイント・メソッドとよく似ています
============================================================
例3: リストをIDREF型の繰返し要素にマップする
 
例4: リストをIDREF型の要素リストにマップする
============================================================
)
 
構文解析中、XMLReaderは登録済みのイベント・ハンドラを介してXML文書に関する情報を提供します
============================================================
representationClass = InputStream
 mimeType = mimeType
============================================================
representationClass = InputStream
 mimeType = mimeType
============================================================
呼出しの連鎖 
 このクラスのメソッドのうち戻り値を返さないものは、自身を呼び出したバッファの情報を返します
============================================================
呼出しの連鎖 
 このクラスのメソッドのうち戻り値を返さないものは、自身を呼び出したバッファの情報を返します
============================================================
UnicodeDataファイル内にエントリがある
 UnicodeDataファイルで定義された範囲に値を持つ
============================================================
)

 関数がnullを返した場合、マッピングは削除されます(最初から存在しない場合は、存在しないままです)
============================================================
REFの場合、型名は完全指定され、参照型のターゲットの型を表す
  ATTR_SIZE int =>列サイズ
============================================================
ISO_LOCAL_DATE_TIME
オフセットが書式設定または解析に使用できない場合、書式設定は完了です
============================================================
名前
DirContextメソッドに引数として引き渡される名前はそれぞれ、そのコンテキストを基準にしています
============================================================
)

 関数がnullを返した場合、マッピングは削除されます(最初から存在しない場合は、存在しないままです)
============================================================
)

 関数がnullを返した場合、マッピングは削除されます(最初から存在しない場合は、存在しないままです)
============================================================
次のHTMLコンテンツでは

HTMLドキュメントを変更するためのすべてにメソッドにElementが必要です
============================================================
IPv6-address%scope_id
 IPv6-addressは、前述のリテラルIPv6アドレスです
============================================================
)

 関数がnullを返した場合、マッピングは削除されます(最初から存在しない場合は、存在しないままです)
============================================================
特例として:

 
引数がNaNまたは無限大の場合、結果はFloat.MAX_EXPONENT+1になります
============================================================
OBJECT = serfile

 取得するMBeanの直列化表現を含む.serファイルを指定する属性です
============================================================
presentationStringString
データ表現とMBeanを関連付けるためのXML形式の文字列
============================================================
presentationStringString
データ表現とMBeanを関連付けるためのXML形式の文字列
============================================================
Standard MBeanMXBean





Stringなどの単純な型の属性の場合、コードは同じです
============================================================
命名規則
MXBean内のメソッドには、Standard MBean内のメソッドと同じ命名規則が適用されます
============================================================
たとえば、

MXBeanに対応したMBeanInfoの内容
MXBeanは、Open MBeanの一種です
============================================================
myFilter.enableType("my_example.*"); 
 は、どの通知型とも一致しません
============================================================
)
次のいずれかの構文を使用して、アドレスで、JNDIによってRMIスタブを検索する場所を示すこともできます
============================================================
すなわち、df.getNegativeSuffix()
LocalNaN  
浮動小数点値の非数を表す文字列
============================================================
byte[]
 java.io.InputStream

 docの印刷データ表現オブジェクトが取得されます
============================================================
設計

 2次元のサイズの属性値の寸法Xと寸法Yの値は、整数型としてミクロン(µm)単位で内部に格納されます
============================================================
特例として:

 
引数がNaNまたは無限大の場合、結果はFloat.MAX_EXPONENT+1になります
============================================================
並行アクセス
すべてのTrustAnchorオブジェクトは、不変で、スレッドに対して安全である必要があります
============================================================
TCKindクラスのインスタンスに設定されるkindフィールド
 特定の種類に適応する0以上の追加フィールド
============================================================
Activatable.registerメソッドを使用
 最初のActivatableコンストラクタを使用
============================================================
親フレームがない場合は"_self"と同じ
"_top" アプレットのウィンドウの最上位フレームに表示する
============================================================
ライン接合
2つの輪郭線セグメントの交点、およびSEG_CLOSEで閉じられる部分輪郭線の両端の交点の装飾
============================================================
非厳密性
Calendarは、カレンダ・フィールドを解釈する際、厳密および非厳密の2つのモードを使用します
============================================================
並行アクセス

 このクラスのインスタンスは、複数スレッドからの並行アクセスから保護される必要はありません
============================================================
並行アクセス

 このクラスのインスタンスは、複数スレッドからの並行アクセスから保護される必要はありません
============================================================
テキストの操作


 指定されたStringを描画するために必要なグリフのセットは、次の手順で指定されます
============================================================
アルゴリズムに依存しない初期化
すべての鍵ジェネレータが、キー・サイズおよび乱数発生の元の概念を共有します
============================================================
アルゴリズムに依存しない初期化
すべての鍵ジェネレータは、キー・サイズおよび乱数発生の元の概念を共有します
============================================================
arglist

 インスタンス化するMBeanのパラメータ(複数可)のリストを指定するオプション属性です
============================================================
並行アクセス
すべてのPolicyNodeオブジェクトは、不変で、スレッドに対して安全である必要があります
============================================================
インストゥルメンテーション
このクラスは、ロックが保持されるか競合するかを判別するメソッドをサポートします
============================================================
たとえば、次のような別名を使用すると、

 

 実行時にClassCastExceptionが発生します
============================================================
セレクタのcloseメソッドの呼出し
   
 ブロックされたスレッドのinterruptメソッドの呼出し
============================================================
スレッドの安全性 

 SerialStructは、複数の並行スレッドによる使用において安全ではありません
============================================================
ALIGN_LEFT
 ALIGN_RIGHT
 ALIGN_CENTER
 ALIGN_JUSTIFED
============================================================
すべての場合において
 
uが階層の場合
 
uが階層で、機関を持たないかサーバー・ベースの機関を持つ場合
============================================================
例
new Boolean("True")の場合はtrueを表すBooleanオブジェクトが生成されます
============================================================
SPACE_SEPARATOR
 LINE_SEPARATOR
 PARAGRAPH_SEPARATOR
============================================================
RADIX short =>基数
  NULLABLE short => NULLを含めることができるか
============================================================
RADIX short =>基数
  NULLABLE short => NULLを含めることができるか
============================================================
severityStringInteger
MBeanNotificationInfo
この通知の重要度
============================================================
"namespaces"



true
[必須] (デフォルト)定義に従って、名前空間処理を実行します
============================================================
false
[必須] CDATASectionに表現できない文字が含まれている場合に、エラーを通知します
============================================================
順序関係
Durationオブジェクトは部分的な順序のみを持ち、AとBの2つの値は次のいずれかになります
============================================================
ターゲット
addNamingListener()メソッドにある名前パラメータは、ターゲットと呼ばれます
============================================================
FontとTextAttribute
FontではほとんどのTextAttributeがサポートされます
============================================================
印刷のサポート

 基本的なドキュメントの印刷処理のため、いくつかのprintメソッドが用意されています
============================================================
コンテキスト要求コントロール
 コンテキスト・インスタンスが要求コントロールを取得する方法は2つあります
============================================================
パラメータ

 すべてのメソッドにパラメータとして渡されるControl[]配列は、呼出し側が所有します
============================================================
where
 
注: OAEPParameterSpec.DEFAULTが使用するものは、次のとおりです
============================================================
Randomクラスによるnextメソッドの実装では、シードを
  
 に原始的に更新し、次の値を返します
============================================================
createPolicy.{policy type}
プロバイダからPolicy実装のインスタンスを取得
============================================================
スレッドの安全性 

 SerialArrayは、複数の並行スレッドによる使用において安全ではありません
============================================================
minimum
 コンポーネントまたはコンポーネント・グループの適度な最小の幅および高さ(ピクセル単位)
============================================================
maximum
 コンポーネントまたはコンポーネント・グループの適度な最大の幅および高さ(ピクセル単位)
============================================================
スレッド・コンテンション監視
 一部のJava仮想マシンは、スレッド・コンテンション監視をサポートします
============================================================
)

 ノード変更イベントは、登録されたリスナーと同じJVM内で変更が行われたときにだけ、生成されます
============================================================
宣言型による非整列化を実装します

 
 「プラグイン可能なSAX 2.0パーサー」を参照してください
============================================================
String myString 
myMbeanによって作成され、送信される通知の内容は次のとおりです
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
isLetter(ch)がtrueを返す
  getType(ch)がLETTER_NUMBERを返す
============================================================
標準文字セット
Javaプラットフォームの実装は、すべて次の標準文字セットをサポートする必要があります
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
フォント・スタイル
DefaultMetalThemeは、多くのコントロールで太字フォントを使用します
============================================================
GETは、GETフォーム・メソッドに対応している
POSTは、POSTフォーム・メソッドに対応している
============================================================
View.BadBreakWeight
分割したい位置が、結果として開始オフセットの分割位置になる場合
============================================================
//[host[:port]][url-path]

角括弧[]は、アドレスのオプション部分を示します
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
コントロールの使用についての詳細

 このインタフェースは、LDAP v3コントロールをサポートします
============================================================
CODE = クラス

 取得するMBeanのパッケージ名を含む完全Javaクラス名を指定する属性です
============================================================
全種類のモニターに共通:
     
監視対象のオブジェクトがMBeanサーバーに登録されていない場合
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
)

 ノード変更イベントは、登録されたリスナーと同じJVM内で変更が行われたときにだけ、生成されます
============================================================
関係がMBeanとして登録されている場合
 こうした関係で参照されるMBeanの場合、何も行われません
============================================================
関係がMBeanとして登録されている場合
 こうした関係で参照されるMBeanの場合、何も行われません
============================================================
例

 次にあるのはResourceBundleのサブクラスMyResourcesの非常に簡単な例です
============================================================
たとえば、
 


 または:
 



 ルール文字列を連結して新しい照合ルール文字列を作成できます
============================================================
setPolicy
システム全体のセキュリティ・ポリシー(具体的には、Policyオブジェクト)の設定
============================================================
preferred
 コンポーネントまたはコンポーネント・グループの本来の幅および高さ(ピクセル単位)
============================================================
プロパティ
説明


trayIcons
このSystemTrayのTrayIconオブジェクトの配列
============================================================
member_type(int index)


 次のメソッドは、unionで呼び出すことができます
============================================================
宣言型による非整列化を実装します

 
 「プラグイン可能なSAX 2.0パーサー」を参照してください
============================================================
URIインスタンスの操作 

 このクラスでサポートされる主要な操作は、正規化、解決、および相対化です
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
並行アクセス

 特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
例1: Antタスクの例
 次のJavaクラス階層は、Antビルド・スクリプトをモデリングしたものです
============================================================
カレンダ・フィールド値の取得と設定
カレンダ・フィールド値は、setメソッドを呼び出して設定できます
============================================================
)

 U+0000 - U+FFFFの文字セットは、基本多言語面(BMP)と呼ばれる場合もあります
============================================================
deprecatedString任意
情報モデルのこの要素は、使用が推奨されなくなったことを示します
============================================================
descriptionResourceKey
String任意
この要素の説明に対するリソース・キー
============================================================
messageTextStringModelMBeanNotificationInfo
通知テキスト
============================================================
presentationStringString任意
データ表現を可能にするためのXML形式の文字列
============================================================
"comments"



true
[必須] (デフォルト)文書のCommentノードを維持します
============================================================
絶対値mについては、次のとおり:

 
mが無限大の場合、これは文字列"Infinity"で表される
============================================================
リスナーの実装
 登録/登録解除メソッドではNamingListenerのインスタンスを受け取ります
============================================================
絶対値mについては、次のとおり:

 
mが無限大の場合、これは文字列"Infinity"で表される
============================================================
グリフの位置
 グリフに関連した変換
 GlyphVectorのコンテキストでのグリフのメトリックス
============================================================
メソッド名
説明


showConfirmDialog
yes/no/cancelなどの確認の要求
============================================================
キャレット変更

 キャレットは、Swingテキスト・コンポーネント内のプラガブル・オブジェクトです
============================================================
CONTENTS_CHANGED
 INTERVAL_ADDED
 INTERVAL_REMOVED
============================================================
使用量しきい値通知

       使用量しきい値通知は、MemoryMXBeanにより発行されます
============================================================
すなわち、dfs.getNaN()
LocalInfinity  
浮動小数点値の無限大を表す文字列
============================================================
)
 
 戻された配列には、リスナーが今後イベントを受信するMIDIコントローラの番号を含んでいます
============================================================
スレッドの安全性 
 SerialBlobは、複数の並行スレッドによる使用において安全ではありません
============================================================
スレッドの安全性 
 SerialClobは、複数の並行スレッドによる使用において安全ではありません
============================================================
スレッドの安全性 

 SerialRefは、複数の並行スレッドによる使用において安全ではありません
============================================================
サポートされているプロパティ
次のプロパティは、setPropertyメソッドを使用して設定できます
============================================================
)

 デフォルト実装は、UnsupportedOperationExceptionをスローします
============================================================
)

 デフォルト実装は、UnsupportedOperationExceptionをスローします
============================================================
DSYNC 
 ファイルの内容の更新は、基本となる記憶装置に同期的に書き込まれることを必要とします
============================================================
属性インデックスを使用する方法
名前空間修飾名を使用する方法
前置修飾子付きの修飾名を使用する方法
============================================================
並行アクセス

 すべてのCertPathオブジェクトは、スレッドに対して安全である必要があります
============================================================
persistFileStringModelMBeanInfo
MBeanを保持するファイルの名前
============================================================
DOCUMENT_TYPE_NODE

DocumentTypeノードを取り入れることはできません
============================================================
keystoreProviderName="<name>" 
 キーストアのJCEプロバイダの名前
============================================================
絶対値mについては、次のとおり:
 
mが無限大の場合、これは文字列"Infinity"で表される
============================================================
順次
    これが指定されている場合、このキューの複数イベントの同時ディスパッチは許可されません
============================================================
DSYNC 
 ファイルの内容の更新は、基本となる記憶装置に同期的に書き込まれることを必要とします
============================================================
DSYNC 
 ファイルの内容の更新は、基本となる記憶装置に同期的に書き込まれることを必要とします
============================================================
絶対値mについては、次のとおり:
 
mが無限大の場合、これは文字列"Infinity"で表される
============================================================
物理フォントと論理フォント

 Javaプラットフォームでは物理フォントと論理フォントを区別します
============================================================
Imageの操作


 対象となる領域は、ソースImageのバウンディング・ボックスで定義されます
============================================================
非同期ロード
 
 大きなドキュメントでは、大量の構文解析が必要になりロードに多少時間がかかります
============================================================
標準プロパティ: HTTPSでの要求の受信時のアルゴリズムのビット・サイズ
 型: Integer
============================================================
::FFFF:d.d.d
::FFFF:d.d
::d.d.d
::d.d

 次の形式は有効です
============================================================
DiagnosticCollector

     診断情報を収集し、リスト化するために使用します
============================================================
parentComponent
 このダイアログ・ボックスの親となるComponentを定義します
============================================================
天文学的および科学的注意
 標準の天文学的定義では、1日のうちの時間を示すために小数が使用されます
============================================================
getLong(nm, new Long(val))


 しかし実際には、次のように実装されます
============================================================
たとえば、

 

 これは、単一パスで、人数、および年齢の最小、最大、合計および平均を計算します
============================================================
)

 呼出しのチェック
 典型的なプログラムでは、メソッド・ハンドルの型一致処理は通常成功します
============================================================
)
 
 (注: arrayTypeは通常は、元のターゲットの最後のパラメータの型と同じになります
============================================================
)
 具体的には、Sの現在のターゲットへの書込みは、Vへの揮発性書込みの前に起こったものとされます
============================================================
並行アクセス
特に断らないかぎり、このクラスで定義されているメソッドはスレッドセーフではありません
============================================================
公平モード
公平として構築された場合、スレッドは近似の到着順ポリシーを使用してエントリで競合します
============================================================
queuePrintJob
印刷ジョブ要求の発行
機密情報を印刷してしまうか、用紙の無駄になります
============================================================
1.0 実装の命名規則
SyncProvider実装の命名時には、次の項目を考慮する必要があります
============================================================
1.0 概要
WebRowSetImplは、必要に応じて拡張可能な標準リファレンス実装を提供します
============================================================
JavaBeanプロパティ 
 staticでない非一時フィールド 

使用には次の制約があります
============================================================
データ値
 Anyオブジェクトに格納されているデータ値の型を記述するTypeCodeオブジェクト
============================================================
5.0 イベント通知
BaseRowSetクラスは、行セットにイベント通知メカニズムを提供します
============================================================
例:
各表現の左側は[unscaled value, scale]、右側は結果の文字列を示します
============================================================
並行アクセス

 このクラスのstaticメソッドは、スレッドセーフであることが保証されています
============================================================
並行アクセス

 このクラスのstaticメソッドは、スレッドセーフであることが保証されています
============================================================
GridBagConstraints.anchor
表示領域内のコンポーネントの位置を指定します
============================================================
それらのホスト名文字列を文字列比較した結果が等しくなる
AがHDN文字列であり、NBの形式を持つ
============================================================
::FFFF:d

 ただし、これは、次のIPv4互換IPv6アドレスの、慣例に従わない表現です
============================================================
結果はこの精度に丸められる

 roundingMode: RoundingModeオブジェクト
============================================================
メモリー使用量の監視

 メモリー使用量は、メモリー・システムにとってきわめて重要な監視属性です
============================================================
heap
non-heap

メモリー使用量の監視

 メモリー・プールには、次の属性があります
============================================================
呼出し元依存メソッド
 少数のJavaメソッドに、呼出し元依存性という特殊なプロパティがあります
============================================================
presentationStringString
データ表現を可能にするためのXML形式の文字列
============================================================
presentationStringString
データ表現を可能にするためのXML形式の文字列
============================================================
現在のスレッドにより読込みロックが取得される

 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
現在のスレッドにより読込みロックが取得される

 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
注:

区別可能なBigDecimal値とこの変換の結果の間には、1対1のマッピングがあります
============================================================
インバリアント(不変式) 
 次のインバリアントは、マーク、位置、リミット、容量の値を表します
============================================================
読込み専用バッファ 
 すべてのバッファは読込み可能ですが、書き込みも可能であるとは限りません
============================================================
persistLocationStringModelMBeanInfo
完全修飾ディレクトリ名
============================================================
visibilityNumber任意
1 - 4の値のうち1: 常に可視、4: ほとんど不可視
============================================================
"error-handler"
[必須] DOMErrorHandlerオブジェクトを含みます
============================================================
そのドロップ・サイトに対応する
  このリスナーのdragExit()の呼出しがあとに続かない
============================================================
データの損失なし
 
 EditorKitはドキュメントを読み込んで保存する能力を持っています
============================================================
JFormattedTextField.PERSIST
            何も処理しない
============================================================
jmx.remote.connection.failed
クライアント接続で突然障害が発生した
============================================================
コマンド

 テキスト・コンポーネントは、コンポーネントを操作するのに使うコマンドを提供します
============================================================
並行アクセス
このクラスのstaticメソッドは、スレッド・セーフであることが保証されています
============================================================
)
 
 必要なペア単位の変換のいずれかを行えない場合は、メソッド・ハンドルの変換を行えません
============================================================
<ARG TYPE=argumentType VALUE=値>
以下にそれぞれの意味を示します
============================================================
currencyTimeLimitNumber
値の有効期間(<0無効、=0常に有効、>0秒)
============================================================
取得順序
このクラスは、ロック・アクセスに対するリーダーまたはライターの優先順序を規定しません
============================================================
ロック取得の割り込み
読込みロックと書込みロックの両方が、ロック取得中の割込みをサポートします
============================================================
ワークフロー

SwingWorkerのライフ・サイクル内には、次の3つのスレッドが存在します
============================================================
並行アクセス
このクラスのstaticメソッドは、スレッド・セーフであることが保証されています
============================================================
図1
 

図1に示すように、Dが追加されたばかりの場合、次の編集のインデックスは4になります
============================================================
使用法:  
 @XmlJavaTypeAdapter注釈は、次のプログラム要素で使用できます
============================================================
並行アクセス
このクラスのstaticメソッドは、スレッド・セーフであることが保証されています
============================================================
カレンダ・フィールド
カレンダ・フィールドは、Calendarに定義された定数で指定されます
============================================================
)

 このクラスは、形式は異なるが主要な機能は共通である、複数の証明書を抽象化したものです
============================================================
defaultObjectModelMBeanAttributeInfo
属性のデフォルト値
============================================================
DOCUMENT_FRAGMENT_NODE
ソース・ノードの子孫を再帰的にインポートします
============================================================
)

 戻り値nullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
view-name:attribute-name

 ここでの文字':'はそれ自体を表します
============================================================
)

 戻り値nullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
)

 戻り値nullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
JFormattedTextField.COMMIT
            現在の値を確定
============================================================
HORIZONTAL_WRAP
セルは水平方向に配置され、必要に応じて次の行へ折り返されます
============================================================
)

 戻り値nullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
ロケールの使用
Localeを作成したあとは、このオブジェクトにそれ自身の情報を照会できます
============================================================
関係が関係として追加されたMBeanである場合
 ソース・オブジェクトは関係サービス自体です
============================================================
関係が関係として追加されたMBeanである場合
 ソース・オブジェクトは関係サービス自体です
============================================================
関係が関係として追加されたMBeanである場合
 ソース・オブジェクトは関係サービス自体です
============================================================
関係が関係として追加されたMBeanである場合
 ソース・オブジェクトは関係サービス自体です
============================================================
関係が関係として追加されたMBeanである場合
 ソース・オブジェクトは関係サービス自体です
============================================================
関係が関係として追加されたMBeanである場合
 ソース・オブジェクトは関係サービス自体です
============================================================
実装するケース

 3つの条件を満たすクラスでは、このインタフェースを実装する必要があります
============================================================
)

 戻り値nullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
)

 戻り値nullは、マップがキーのマッピングを保持していないことを示すとはかぎりません
============================================================
より正確には、

 
hasNextおよびhasPreviousは常にfalseを返します
============================================================
+HH - 分と秒は無視し、時のみ
 +HHmm - 秒は無視し、時と分(ゼロでない場合)
============================================================
DOCUMENT_TYPE_NODE
DocumentTypeノードはインポートできません
============================================================
IPアドレスのテキスト表現 

 IPアドレスのテキスト表現はアドレス・ファミリに固有です
============================================================
たとえば、
 
アクセス修飾子は、『Java言語仕様』で規定された正規の順序で格納されます
============================================================
visibilityNumber
1 - 4の値のうち1: 常に可視、4: ほとんど不可視
============================================================
10進数の優先順位
1つのUnicode範囲に10進数のセットが複数含まれることがあります
============================================================
8進数のエスケープは認識されない

  文字シーケンス\bは、バックスペース文字を表さない
============================================================
サーバー側: 
 
send_reply遮断点内では、SUCCESSFULだけが返されます
============================================================
「STATELESS」 - 実装は
 「THREAD-ISOLATED」の要件を満たします
============================================================
aligned
  コンポーネントはそれぞれの揃え方の値(XまたはY)に基づいて整列される
============================================================
Microsoft Corporationの下位互換性維持
 7将来の定義のために予約済み
============================================================
)
アプリケーションがXML文書のJAXBビューにアクセスする、または、それを更新します
============================================================
スレッドの安全性 
 バッファは、複数の並行スレッドによる使用において安全ではありません
============================================================
次のフォームのメソッド呼出しは、

 

 上記のメソッドは、次の表現と同様に動作します
============================================================
次のフォームのメソッド呼出しは、

 

 上記のメソッドは、次の表現と同様に動作します
============================================================
false
[必須] (デフォルト)内部サブセット処理も含め、スキーマ処理を実行しません
============================================================
デュレーションの演算
このクラスは、加算、減算、乗算などの一連の基本算術演算を実行します
============================================================
"posix:*" 
 すべてのPOSIX-file-attributesを読み取ります
============================================================
View.ExcellentBreakWeight
分割したい位置の直前に空白がある場合
============================================================
フィールドのデフォルト値
clearメソッドは、カレンダ・フィールドを未定義に設定します
============================================================
PALETTE_LAYER
パレット・レイヤーは、デフォルト・レイヤーの上に表示されます
============================================================
VERTICAL_WRAP
セルは垂直方向に配置され、必要に応じて次の列へ折り返されます
============================================================
1.0 背景
Joinableインタフェースは、一致列の取得と設定のメソッドを提供します
============================================================
たとえば、
 
 アプリケーションは直接スクロール・ペインに子を追加すべきできありません
============================================================
logString
t: tの場合はすべての通知をログに記録、fの場合は通知を記録しない
============================================================
exitVM.{exit status}
指定された終了状態でのJava仮想マシンの停止
============================================================
ブロック・モード

 選択可能チャネルは、ブロック・モードか非ブロック・モードになります
============================================================
新しいスレッドの作成
新しいスレッドは、ThreadFactoryを使用して作成されます
============================================================
)

 このクラスは、Java Collections Frameworkのメンバーです
============================================================
ルック・アンド・フィールの指定

 ルック・アンド・フィールの指定方法は2とおりあります
============================================================
使用法 

@XmlElementWrapper注釈は、次のプログラム要素で使用できます
============================================================
取消し
 Futureインタフェースは、実行を取り消すcancelメソッドを定義します
============================================================
つまり、負でないint型のインデックスkに対して、
 
 が成り立たなければいけません
============================================================
たとえば、

 
 このメソッドはバッファ内のデータを実際に消去するわけではありません
============================================================
フィールド操作

 カレンダ・フィールドは、set()、add()、およびroll()
============================================================
特殊な値
NaNは、通常は単一の文字\uFFFDを持つ文字列としてフォーマットされます
============================================================
false
[必須]文書内のCDATASectionノードをTextノードに変換します
============================================================
)

  長さn (0 <= n <= r)のバイト・シーケンスが書き込まれるとします
============================================================
改行

 改行の処理方法については、DefaultEditorKitを参照してください
============================================================
改行

 改行の処理方法については、DefaultEditorKitを参照してください
============================================================
改行

 改行の処理方法については、DefaultEditorKitを参照してください
============================================================
そうでない場合は
  UI上でのgetToolTipTextの呼出しによる値が返される
============================================================
改行

 改行の処理方法については、DefaultEditorKitを参照してください
============================================================
特例として:

 2番目の引数が正のゼロまたは負のゼロの場合は、結果は1.0になります
============================================================
メモリー 
 Java仮想マシンのメモリー・システムは、次の種類のメモリーを管理します
============================================================
visibilityNumber
1 - 4の値のうち1: 常に可視4:ほとんど不可視
============================================================
visibilityNumber
1 - 4の値のうち1: 常に可視4:ほとんど不可視
============================================================
visibilityNumber
1 - 4の値のうち1: 常に可視4:ほとんど不可視
============================================================
visibilityNumber
1 - 4の値のうち1: 常に可視4:ほとんど不可視
============================================================
visibilityNumber
1 - 4の値のうち1: 常に可視4:ほとんど不可視
============================================================
たとえば、次のString:
 
 は、2つのキーを持つObjectNameを表します
============================================================
並行性
 このインタフェースの実装は不変であり、複数の並行スレッドで安全に使用できます
============================================================
setIO
System.out、System.in、およびSystem.errの設定
============================================================
)

  長さn (0 <= n <= r)のバイト・シーケンスが読み取られるとします
============================================================
removeProvider.{provider name}
指定したプロバイダの削除
============================================================
sc.register(sel, ops)

 次の呼び出しと正確に同じ動作になります
============================================================
)

  長さn (0 <= n <= r)のバイト・シーケンスが読み取られるとします
============================================================
)

  長さn (0 <= n <= r)のバイト・シーケンスが書き込まれるとします
============================================================
特例として:

 2番目の引数が正のゼロまたは負のゼロの場合は、結果は1.0になります
============================================================
デフォルト・イベント・ハンドラ

Validatorのjavadocを参照してください
============================================================
使用法 
 @XmlAccessorOrder注釈は、次のプログラム要素で使用できます
============================================================
)

  長さn (0 < n <= r)のバイト・シーケンスが読み取られるとします
============================================================
)

  長さn (0 < n <= r)のバイト・シーケンスが書き込まれるとします
============================================================
jndi.syntax.endquote
  引用された文字列の終わりを区切る文字列
============================================================
さらに、
 
 ユーザー・データ・イベントNODE_RENAMEDがトリガーされます
============================================================
例:
 


 これにより、実装に依存しない始点を持つアプリケーションが提供されます
============================================================
ほかのスレッドが交換ポイントに入る
 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
ほかのスレッドが交換ポイントに入る
 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
jmx.remote.connection.closed
クライアント接続が終了した
============================================================
特例として:
 引数がNaNまたはその絶対値が1を超える場合、結果はNaNになります
============================================================
特例として:
 引数がNaNまたはその絶対値が1を超える場合、結果はNaNになります
============================================================
例
 
引数の符号が同じである場合、floorModと%演算子の結果は同じになります
============================================================
)

 このメソッドでは、リフレクションやセキュリティに関する例外はスローされません
============================================================
)

 このメソッドでは、リフレクションやセキュリティに関する例外はスローされません
============================================================
specifyStreamHandler
URLの作成時にストリーム・ハンドラを指定
============================================================
Perlとの大きな相違点 

 Perlでは、\1から\9は常に前方参照と解釈される
============================================================
ここでは
 
注: PSSParameterSpec.DEFAULTは次を使用します
============================================================
例

 次の例に、U.S. ロケールで日時パターンがどのように解釈されるかを示します
============================================================
特例として:
 引数がNaNまたはその絶対値が1を超える場合、結果はNaNになります
============================================================
特例として:
 引数がNaNまたはその絶対値が1を超える場合、結果はNaNになります
============================================================
[ユーザー情報@]ホスト[:ポート]
 

 ここで、@と:はその文字自体を表します
============================================================
使用法 
 @XmlAccessorType注釈は、次のプログラム要素で使用できます
============================================================
使用法 

@XmlAnyAttribute注釈は、次のプログラム要素で使用できます
============================================================
スキーマからJavaへのマップ例

 次のスキーマは、次のJavaクラスを生成します
============================================================
使用法 

 @XmlRootElement注釈は、次のプログラム要素で使用できます
============================================================
起動システムの中でグループを一意に識別する
 グループの起動システムへの参照を持つ
============================================================
jndi.syntax.separator
  基本名のコンポーネントの区切り文字
============================================================
jndi.syntax.beginquote2
  開始/終了引用符のセットの代替
============================================================
たとえば、
 
修飾子は、『Java言語仕様』で規定された正規の順序で格納されます
============================================================
) 

 GroupはPrincipalを拡張したものであることに注意してください
============================================================
標準プロパティ: HTTPSでの要求の受信時の暗号化方式群値
 型: String
============================================================
USE_ALL_BEANINFO
検出できるすべてのBeanInfoが使用されます
============================================================
たとえば、
 
 valueがnullの場合、このメソッドはプロパティを削除します
============================================================
特例として:

 
引数がNaNまたは -1より小さい場合、結果はNaNになります
============================================================
logString
T - メッセージをログに記録、F - メッセージを記録しない
============================================================
targetObjectObject
メソッドはこのオブジェクトに対して実行される
============================================================
lastUpdatedTimeStampNumber
キャッシュ値が設定された時刻
============================================================
再帰型
再帰(自己参照)型をMXBeanインタフェース内で使用することはできません
============================================================
removeIdentityCertificate
Identityの証明書の削除
============================================================
alignment
 コンポーネントまたはコンポーネント・グループのXおよびY揃え
============================================================
この制約により、代入
 
 が後続のすべてのレイアウト・オペレーションで発生します
============================================================
次のフォームのメソッド呼出しは、

 

 次の呼び出しと正確に同じ動作になります
============================================================
次のフォームのメソッド呼出しは、

 

 次の呼び出しと正確に同じ動作になります
============================================================
次のフォームのメソッド呼出しは、

 

 次の呼び出しと正確に同じ動作になります
============================================================
一般的なスレッド情報

スレッドID
スレッドの名前

実行情報

スレッドの状態
============================================================
使用法
@XmlNs注釈は、ほかのプログラム注釈から使用されることを意図しています
============================================================
X.509

 また、次の標準のCertPath符号化にも対応する必要があります
============================================================
用語
 このクラスの名前は、RFC 2278で使用されている用語に由来しています
============================================================
)

  コード化文字集合は、抽象文字の集合と整数の集合間のマッピングを表します
============================================================
DOCUMENT_NODE

Documentノードを取り入れることはできません
============================================================
実装時の注意

 パーサーは、あらゆるSchema実装で動作できる必要があります
============================================================
false
[必須] (デフォルト)文字が正規化されているかどうかを確認しません
============================================================
(int)(v^(v>>>32))


 ただし、vは次の式によって定義されます
============================================================
DEFAULT_LAYER
ほとんどのコンポーネントが配置される標準レイヤーです
============================================================
showMessageDialog
発生したことについてのユーザーへのメッセージ
============================================================
特例として:
 引数がすでに計算上の整数と等しい場合は、引数と同じ値が返されます
============================================================
特例として:
 引数がすでに計算上の整数と等しい場合は、引数と同じ値が返されます
============================================================
特例として:
 引数がすでに計算上の整数と等しい場合は、引数と同じ値が返されます
============================================================
特例として:
 
 どちらかの引数が無限大の場合は、結果は正の無限大値になります
============================================================
lastUpdatedTimeStampNumber
valueが設定された時刻
============================================================
logfileString
オペレーティング・システムに適した完全修飾ファイル名
============================================================
文字列モニター専用:
     
監視対象の属性の値が比較文字列値に一致した場合
============================================================
実装時の注意

 パーサーは、あらゆるSchema実装で動作できる必要があります
============================================================
getProperty.{key}
鍵を指定してのセキュリティ・プロパティの取得
============================================================
setProperty.{key}
鍵を指定してのセキュリティ・プロパティの設定
============================================================
特例として:
 引数がすでに計算上の整数と等しい場合は、引数と同じ値が返されます
============================================================
特例として:
 引数がすでに計算上の整数と等しい場合は、引数と同じ値が返されます
============================================================
特例として:
 引数がすでに計算上の整数と等しい場合は、引数と同じ値が返されます
============================================================
特例として:
 
 どちらかの引数が無限大の場合は、結果は正の無限大値になります
============================================================
特例として:
 
引数がNaNまたは -1より小さい場合、結果はNaNになります
============================================================
END_DOCUMENT  
 なし 
 なし  
 何も出力に書き込まれません
============================================================
使用法 

@XmlSchemaType注釈は、次のプログラム要素で使用できます
============================================================
record
システム上の1つ以上のオーディオ・デバイスを介したオーディオ録音
============================================================
例:
 
 これで、drPepper.toString()は「{}」を返します
============================================================
より正確には、

 
hasMoreElementsは常にfalseを返します
============================================================
jndi.syntax.endquote2
  開始/終了引用符のセットの代替
============================================================
)
 各要素に適用された特定の関数の結果を累積するマップされたリダクションです
============================================================
UDTの場合、型名は完全指定
  COLUMN_SIZE int =>列サイズ
============================================================
ELEMENT_NODE
ソース要素の指定された属性ノードがインポートされます
============================================================
NOTATION_NODE
Notationノードを取り入れることはできません
============================================================
文字とグリフ
文字は英字、数字、句読点などのアイテムを抽象的に表すシンボルです
============================================================
デフォルトの描画属性
Graphics2D描画属性のデフォルト値を次に示します
============================================================
01234567


 これらは文字'\u0030' - '\u0037'です
============================================================
POPUP_LAYER
ポップアップ・レイヤーは、ダイアログの上に表示されます
============================================================
01234567


 これらは文字'\u0030' - '\u0037'です
============================================================
たとえば、

 

MemoryMXBeanが発行する通知の型は次のとおりです
============================================================
roleString
必ずoperation、getter、またはsetter
============================================================
targetTypeString
targetObjectのオブジェクト参照型
============================================================
カウンタ・モニター専用:
     
監視対象の属性の値がしきい値に達した場合
============================================================
)
ほかのすべてのメソッドは、メソッドと同じ名前の演算が存在することを示します
============================================================
shutdownHooks
仮想マシンのシャットダウン・フックの登録および解除
============================================================
スキーマ言語

 この仕様は名前空間URIを使用して、スキーマ言語を指定します
============================================================
または
 

 この表現の厳密な詳細は未指定であり、変更される可能性があります
============================================================
デフォルト
UIManagerは、UIDefaultsのセットを3組管理します
============================================================
insertUpdate
removeUpdate
changedUpdate
============================================================
使用法 

@XmlAttribute注釈は、次のプログラム要素で使用できます
============================================================
使用法 
 @XmlEnumValue注釈は、次のプログラム要素で使用できます
============================================================
また次の式
 

 がtrueになりますが、これは絶対的な要件ではありません
============================================================
また次の式
 

 がtrueになりますが、これは絶対的な要件ではありません
============================================================
また次の式
 

 がtrueになりますが、これは絶対的な要件ではありません
============================================================
ISO_LOCAL_DATE
オフセットが使用不可の場合、書式設定は完了です
============================================================
ISO_LOCAL_TIME
オフセットが使用不可の場合、書式設定は完了です
============================================================
false
[必須] (デフォルト)ツリー上でスキーマの正規化を実行しません
============================================================
また次の式
 

 がtrueになりますが、これは絶対的な要件ではありません
============================================================
マルチキャスト
一連のインタフェース(通常は別のノードに属している)の識別子
============================================================
フィルタリング
フィルタリング操作はすべてのマッチングする言語タグを返します
============================================================
false
[必須] (デフォルト)文書内のdoctypeノードを許可します
============================================================
displayNameString
ディスプレイで使用されるMBeanの名前
============================================================
displayNameString
ディスプレイで使用されるMBeanの名前
============================================================
displayNameString
人間が読める形式のオペレーションの表示名
============================================================
@MersennePrime(1 

userTextの値は"1"になります
============================================================
getenv.{variable name}
指定された環境変数の値の読取り
============================================================
addIdentityCertificate
Identityの証明書の追加
============================================================
setSignerKeyPair
署名者の鍵のペア(公開鍵と非公開鍵)の設定
============================================================
更新

 初期化の種類に応じて、署名または検証の対象となるバイトを更新します
============================================================
また次の式
 

 がtrueになりますが、これは絶対的な要件ではありません
============================================================
使用法

 名前空間修飾値は、このパッケージで定義された注釈内で使用されます
============================================================
使用法
 @XmlTransient注釈は、次のプログラム要素で使用できます
============================================================
JNDI合成名の構文
 JNDIでは、合成名の標準文字列表記が定義されます
============================================================
最後のスレッドが到着する
 ほかのスレッドが現在のスレッドに割り込みを行う
============================================================
四半期
 ISO-8601標準は、標準の12か月からなる年に基づいています
============================================================
定義

 各定数をmin[i]、max[i]、およびpref[i]とします
============================================================
接続要求コントロール
 接続要求コントロールを設定する3つの方法があります
============================================================
特例として:

 引数がNaNまたはゼロより小さい場合、NaNが返されます
============================================================
getMethodString
getメソッドのオペレーション記述子の名前
============================================================
ゲージ・モニター専用:
     
監視対象の属性の値が上限値を超えた場合
============================================================
localeパラメータは、nullにすべきではありません
 
 コード例:
============================================================
特例として:

 引数がNaNまたはゼロより小さい場合、NaNが返されます
============================================================
Types of URL

 一般に、URLはいくつかの部分に分解できます
============================================================
使用法 

@XmlElement注釈は、次のプログラム要素で使用できます
============================================================
接合制限値
JOIN_MITER装飾のライン接合のトリミングを行う制限値
============================================================
コロンなし
 +HH:MM:ss - 時、分、および秒(ゼロでない場合)
============================================================
displayNameString任意
この項目の人間が読める形式の名前
============================================================
DOCUMENT_NODE
Documentノードはインポートできません
============================================================
ENTITY_NODE

Entityノードを取り入れることはできません
============================================================
keystoreURI="<url>" 
 キーストアの場所を指定します
============================================================
View.GoodBreakWeight
以上2つの条件が該当しない場合
============================================================
Composite
AlphaComposite.SRC_OVERルール
============================================================
サマリー
次の表に、前述のドキュメントの例と各種メソッドの結果を示します
============================================================
たとえば、
 

警告: Swingはスレッドに対して安全ではありません
============================================================
ロケールの作成
Localeオブジェクトを作成する方法はいくつかあります
============================================================
ルックアップ
ルックアップ操作はもっともマッチングする言語タグを返します
============================================================
false
[必須] (デフォルト)任意のメディア・タイプを受け入れます
============================================================
特例として:
 引数がNaNまたはゼロより小さい場合、NaNが返されます
============================================================
特例として:
 引数がNaNまたはゼロより小さい場合、NaNが返されます
============================================================
特例として:
 引数が正のゼロまたは負のゼロの場合は、正のゼロを返します
============================================================
特例として:
 引数が正のゼロまたは負のゼロの場合は、正のゼロを返します
============================================================
パターンとその解釈
MessageFormatは次のパターンを使用します
============================================================
logfileString
イベントの記録先ファイルの完全修飾ファイル名
============================================================
logString
t: すべての通知をログに記録、f:通知を記録しない
============================================================
logfileString
イベントの記録先ファイルの完全修飾ファイル名
============================================================
RELAX NG

 RELAX NGではこの処理をサポートしていません
============================================================
setSystemScope
システムのアイデンティティ・スコープの設定
============================================================
setIdentityPublicKey
Identityの公開鍵の設定
============================================================
setIdentityInfo
Identityの概要を表す文字列の設定
============================================================
例:
 
 コマンド行インタフェースは、マニフェスト設定よりも優先します
============================================================
特例として:
 引数がNaNまたはゼロより小さい場合、NaNが返されます
============================================================
特例として:
 引数がNaNまたはゼロより小さい場合、NaNが返されます
============================================================
特例として:
 引数が正のゼロまたは負のゼロの場合は、正のゼロを返します
============================================================
特例として:
 引数が正のゼロまたは負のゼロの場合は、正のゼロを返します
============================================================
例:
 グラフィック・ポイントのテキスト・モデル内の挿入ポイントへの変換
============================================================
yyyy-mm-dd hh:mm:ss形式での文字数です
   20+s
============================================================
アイデンティティ 

 任意のURI uの場合に、常に次のようになります
============================================================
使用法: 

@XmlValue注釈は、次のプログラム要素で使用できます
============================================================
直列化
 このクラスは直列化でき、文字列ゾーンIDを外部形式で格納します
============================================================
たとえば、宣言
  
 は、次の宣言で一時的に置き換えることができます
============================================================
複合名の構文
 複合名の構文は、プロパティのセットによって指定されます
============================================================
sinceString任意
この要素が導入された情報モデルのバージョン
============================================================
NOFOLLOW_LINKS 
 シンボリック・リンクはたどられません
============================================================
特例
互換性を維持するため、2つの非準拠ロケールが特例として扱われます
============================================================
progress
 LSParserがデータ解析の進捗状況を通知します
============================================================
false
[必須] (デフォルト)結果をプリティプリント処理しません
============================================================
特例として:
 引数がNaNまたは無限大の場合、結果はNaNになります
============================================================
特例として:
 引数がNaNまたは無限大の場合、結果はNaNになります
============================================================
特例として:
 引数がNaNまたは無限大の場合、結果はNaNになります
============================================================
max 
 メモリー管理に使用できる最大メモリー量(バイト単位)を表す
============================================================
displayNameString
ディスプレイで使用される属性の名前
============================================================
displayNameString
人間が読める形式のコンストラクタ名
============================================================
persistFileString
MBeanを保持するファイルの名前
============================================================
persistFileString
MBeanを保持するファイルの名前
============================================================
descriptorTypeString
必ずnotification
============================================================
currencyTimeLimitNumber
キャッシュ値の有効期間
============================================================
項目名
項目の型


キー
String


value
String
============================================================
]
 
注: 本書では、演算子はSpringクラスのメソッドを表します
============================================================
特例として:
 引数がNaNまたは無限大の場合、結果はNaNになります
============================================================
特例として:
 引数がNaNまたは無限大の場合、結果はNaNになります
============================================================
特例として:
 引数がNaNまたは無限大の場合、結果はNaNになります
============================================================
使用法

 XmlSchema注釈は、次のプログラム要素で使用できます
============================================================
クラスのマッピング 

 クラスをXML Schema型にマップします
============================================================
コロンなし
 +HH:mm - 秒は無視し、時と分(ゼロでない場合)
============================================================
コロンあり
 +HHMMss - 時、分、および秒(ゼロでない場合)
============================================================
科学表記法
科学表記法の数値は仮数と10の累乗の結果として表されます
============================================================
Clip
描画Clipなし、出力はComponentにクリップされる
============================================================
タイム・スケール

 人間が時間を測定する標準手段は太陽日の長さです
============================================================
DISPOSE_ON_CLOSE
 自動的に内部フレームを破棄します
============================================================
たとえば、次のコードは . . .

 

 次のラベルを作成します
============================================================
要求コントロール

 要求コントロールには次の2つのタイプがあります
============================================================
コンストラクタ
Localeクラスには3つのコンストラクタがあります
============================================================
false
[必須]すべての属性およびすべてのコンテンツを維持します
============================================================
特例として:
 どちらかの引数がNaNの場合、結果はNaNになります
============================================================
特例として:
 
 どちらかの引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 どちらかの引数がNaNの場合、NaNが返されます
============================================================
persistPeriodNumber
永続サイクルの頻度(秒単位)
============================================================
lockedStackDepth
java.lang.Integer
============================================================
次の形式の呼出しは、
  
 次の呼び出しと正確に同じ動作になります
============================================================
"rwd"  
 "rw"と同様に、読み込みおよび書込み用に開きます
============================================================
日時パターン

 日時フォーマットは日時パターン文字列で指定されます
============================================================
)

 ストリーム・パイプラインは順次、並列のいずれかで実行できます
============================================================
特例として:
 どちらかの引数がNaNの場合、結果はNaNになります
============================================================
特例として:
 
 どちらかの引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 どちらかの引数がNaNの場合、NaNが返されます
============================================================
) 
すべての不正な文字は、単にエンコーディングして引用符で囲まれる
============================================================
使用法 

@XmlEnum注釈は、次のプログラム要素で使用できます
============================================================
使用法 
@XmlIDREF注釈は、次のプログラム要素で使用できます
============================================================
使用法 

@XmlList注釈は、次のプログラム要素で使用できます
============================================================
)

 この実装は、指定されたコレクションのイテレータを取得します
============================================================
注:


 このコンストラクタの結果は予想外である可能性があります
============================================================
特殊パターン文字
パターン内の多くの文字は文字どおりに取得されます
============================================================
keystoreType="<type>" 
 キーストア・タイプ
============================================================
false
infosetをfalseに設定しても効果はありません
============================================================
登録の有効期間
 登録したリスナーが登録解除されるのは次の場合です
============================================================
HIDE_ON_CLOSE
 自動的に内部フレームを不可視にします
============================================================
message
 ダイアログ・ボックスに表示する説明メッセージです
============================================================
false
[必須] XML宣言およびテキスト宣言を直列化しません
============================================================
)

 計算結果は、正確な結果の1 ulp以内である必要があります
============================================================
特例として:
 
 最初の引数がNaNの場合は、NaNが返されます
============================================================
特例として:
 
 最初の引数がNaNの場合は、NaNが返されます
============================================================
persistLocationString
完全修飾ディレクトリ名
============================================================
persistLocationString
完全修飾ディレクトリ名
============================================================
LocalGroupSeparator  
1000位の区切り文字
============================================================
次のどちらかの方法による初期化

     
公開鍵を使用する方法
============================================================
特例として:
 
 最初の引数がNaNの場合は、NaNが返されます
============================================================
特例として:
 
 最初の引数がNaNの場合は、NaNが返されます
============================================================
型名が等しい
行型が等しい
同じインデックス名を同じ順番で使用する
============================================================
使用法
 @XmlType注釈は、次のプログラム要素で使用できます
============================================================
文字セット名
 文字セット名は、次の文字を含む文字列で表されます
============================================================
属性モデル
 基本モデルには2つあり、関連付ける属性が異なります
============================================================
描画する対象を指定する
 
 描画操作を現在のClipに制限する
============================================================
たとえば、
 

 結果は、文字列「123-____」になります
============================================================
descriptorTypeString
必ずoperation
============================================================
descriptorTypeString
必ずoperation
============================================================
例:
 
このインタフェースではスレッドの安全性は保証されません
============================================================
たとえば、
\:\=

 には、2文字のキー":="が含まれます
============================================================
"rws"
 "rw"と同様に、読み込みおよび書込み用に開きます
============================================================
呼び出されるオペレーションの名前
 操作の引数を含むNVList
============================================================
並行性
 セレクタ自体は、複数の並行スレッドで安全に使用できます
============================================================
または
 

 IPv6リテラル・アドレスの非圧縮形式も有効です
============================================================
)

 このマップが以前にこのキーを関連付けていた値を返します
============================================================
e1 == e2
 e1.equals(e2)がtrueを返す
============================================================
より正確には、

 
hasNextは常にfalseを返します
============================================================
Value - 数値
Fraction - 小数位を含む小数値
============================================================
false
[必須] (デフォルト)文字の正規化を実行しません
============================================================
位置情報

 ビューでテキスト位置を指定する機能が提供されます
============================================================
例:
 
     "SEVERE"
      "1000"
============================================================
REJECT_EXTENDED_RANGES

上記と同じです
============================================================
)

 このマップが以前にこのキーを関連付けていた値を返します
============================================================
classString
メソッドが定義されたクラス(完全修飾)
============================================================
URL
 URL文字列は次のような構造を持つと想定されています
============================================================
)

 このマップが以前にこのキーを関連付けていた値を返します
============================================================
暦週の基準年
 暦週の基準年には2つのフィールドが使用されます
============================================================
使用法 
@XmlID注釈は、次のプログラム要素で使用できます
============================================================
uuuu-MMM-ddなど
ローカライズされたスタイルを使用
============================================================
false
[必須]文書内のCommentノードを破棄します
============================================================
false
[オプション] XMLの整形式をチェックしません
============================================================
検証

 検証は、JAXB 1.0以降、大きく変更されました
============================================================
MODAL_LAYER
モーダル・ダイアログ用のレイヤーです
============================================================
値説明
VERTICAL
セルは垂直方向に1列に配置されます
============================================================
)
 例:

 結果となるアダプタの擬似コードを次に示します
============================================================
)
 
MethodTypeのすべてのインスタンスは不変です
============================================================
例:

 次のクラスとプロパティ・ファイルが提供されています
============================================================
)

 このメソッドは最大で1回しか呼び出すことができません
============================================================
アドレスの型 

ユニキャスト
単一インタフェースの識別子
============================================================
showOptionDialog
以上の3つを合わせたもの
============================================================
フォーマット

 これはコード化した鍵のフォーマット名です
============================================================
特例として:

 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:

 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
特例として:
 
 引数がNaNの場合は、NaNを返します
============================================================
)
 
ActionEventをトリガーすることも可能です
============================================================
月の週番号
 1つのフィールド「月の週番号」が使用されます
============================================================
パターン
DecimalFormatの構文を次に示します
============================================================
false
[必須] (デフォルト)文書を正規化しません
============================================================
false
[必須]すべての名前空間宣言属性を破棄します
============================================================
DO_NOTHING_ON_CLOSE
 何も行いません
============================================================
MAP_EXTENDED_RANGES

上記と同じです
============================================================
false
[必須] (デフォルト)出力を正規化しません
============================================================
特例として:
 引数がNaNの場合は、結果は0になります
============================================================
特例として:
 引数がNaNの場合は、結果は0になります
============================================================
特例として:
 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
引数がNaNの場合は、NaNを返します
============================================================
descriptorTypeString
必ずmbean
============================================================
descriptorTypeString
必ずmbean
============================================================
だが、\Eまでのすべての文字をエスケープする
\E
なし
============================================================
特例として:
 引数がNaNの場合は、結果は0になります
============================================================
特例として:
 引数がNaNの場合は、結果は0になります
============================================================
特例として:
 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
引数がNaNの場合、NaNが返されます
============================================================
特例として:
 
引数がNaNの場合は、NaNを返します
============================================================
または
 
 これを行わない場合、動作は保証されません
============================================================
または
 
 これを行わない場合、動作は保証されません
============================================================
または
 
 これを行わない場合、動作は保証されません
============================================================
または
 
 これを行わない場合、動作は保証されません
============================================================
そのため、次のような条件ロジック
 
 を使用できます
============================================================
ISO_LOCAL_DATE_TIME
オフセットID
============================================================
コロンなし
 +HH:MM:SS - 時、分、および秒
============================================================
同期

 decimalフォーマットは同期化されません
============================================================
たとえば矩形を塗りつぶす場合は、
 
 を呼び出します
============================================================
symbolic
 シンボリック・リンクを作成する機能
============================================================
または

 呼出しが、見せかけで(理由もなく)復帰する
============================================================
または

 呼出しが、見せかけで(理由もなく)復帰する
============================================================
または

 呼出しが、見せかけで(理由もなく)復帰する
============================================================
または

 呼出しが、見せかけで(理由もなく)復帰する
============================================================
または

 呼出しが、見せかけで(理由もなく)復帰する
============================================================
または

 呼出しが、見せかけで(理由もなく)復帰する
============================================================
load

LSParserが文書のロードを完了します
============================================================
特例として:
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 引数がNaNの場合は、NaNを返します
============================================================
例:

 結果となるアダプタの擬似コードを次に示します
============================================================
例:

 結果となるアダプタの擬似コードを次に示します
============================================================
例:

 結果となるアダプタの擬似コードを次に示します
============================================================
特例として:
 引数がNaNの場合、NaNが返されます
============================================================
特例として:
 引数がNaNの場合は、NaNを返します
============================================================
使用法

 上記のコードは、次のXMLにマップされます
============================================================
同期

 choiceフォーマットは同期化されません
============================================================
ISO_LOCAL_DATEなど
パターン文字を使用
============================================================
カンマ
 スペース
 「月の日」を表す1桁または2桁
============================================================
false
[オプション]名前空間処理を実行しません
============================================================
たとえば矩形を描画する場合は、
 
 を呼び出します
============================================================
false
[オプション]名前空間処理を実行しません
============================================================
同期

 メッセージ・フォーマットは同期化されません
============================================================
valueObject
属性の現在値(キャッシュ値)
============================================================
valueObject
オペレーションのキャッシュ値
============================================================
例

 テキストの始めから終わりの方向へたどります
============================================================
たとえば、
 


 出力結果は次のようになります
============================================================
)
 
 これらの記号は主に次の言語に使用されます
============================================================
名前空間URI
ローカル名
前置修飾子付きの修飾名
============================================================
コロンなし
 +HH:MM - 秒は無視し、時と分
============================================================
コロンあり
 +HHMMSS - 時、分、および秒
============================================================
"*" 
 すべての基本ファイル属性を読み取ります
============================================================
注:

ISO 639は確定した規格ではありません
============================================================
注:

ISO 639は確定した規格ではありません
============================================================
注:

ISO 639は確定した規格ではありません
============================================================
注:

ISO 639は安定した規格ではありません
============================================================
名前型意味
nameString
コンストラクタ名
============================================================
名前型意味
nameString
オペレーション名
============================================================
または

 

 2つの呼出しは同じ効果を持ちます
============================================================
または

 

 2つの呼出しは同じ効果を持ちます
============================================================
解決
 解析は2段階の処理として実装されています
============================================================
コロンあり
 +HHMM - 秒は無視し、時と分
============================================================
アルゴリズム

 鍵に対する鍵のアルゴリズムです
============================================================
例:


 このメソッドは次のコードとも同等です
============================================================
例:


 このメソッドは次のコードとも同等です
============================================================
roleString
必ずconstructor
============================================================
messageTextString
通知テキスト
============================================================
コード:
 

 画面には次のように表示されます
============================================================
使用例

 次に、もっとも単純な使用例を示します
============================================================
スペース
 コロンや秒を含まないオフセットID
============================================================
showInputDialog
入力プロンプト
============================================================
defaultObject
属性のデフォルト値
============================================================
名前型意味
nameString
MBean名
============================================================
名前型意味
nameString
MBean名
============================================================
parts[1]
ローカル名(前置修飾子なし)
============================================================
または
 
 2つの呼出しは同じ効果を持ちます
============================================================
または
 
 2つの呼出しは同じ効果を持ちます
============================================================
タイムゾーンID
 IDはシステム内で一意です
============================================================
同期

 日付フォーマットは同期化されません
============================================================
ISO_LOCAL_DATE
オフセットID
============================================================
ISO_LOCAL_TIME
オフセットID
============================================================
改行

 改行を扱うプロパティは2つあります
============================================================
同期

 数値フォーマットは同期化されません
============================================================
"rw"
 読み取りおよび書込み用に開きます
============================================================
合成名の例
次の表に、合成名の例を示します
============================================================
小数点
 ナノ秒を表す1つから9つまでの桁
============================================================
readlink
     リンク読取り権
============================================================
たとえば、
 
引数の1つがパターンにない
============================================================
例:
 



 次の点に注意してください
============================================================
だが、次の文字をエスケープする
\Q
なし
============================================================
図2
 

 前回の重大な編集結果はAです
============================================================
型名が等しい
項目の名前および型が等しい
============================================================
ISO_LOCAL_DATE
文字'T'
============================================================
nameString任意
この項目の名前
============================================================
実装により異なる
 その他任意の関連付け
============================================================
同期

 フォーマットは同期化されません
============================================================
例:
Fontに、グリフ情報を照会します
============================================================
text/plain
プレーン・テキスト
============================================================
例:
 コンポーネントに段落を描画します
============================================================
または

 指定された待機時間が経過する
============================================================
または

 指定された待機時間が経過する
============================================================
使用例
 次にいくつかの使用例を示します
============================================================
名前型意味
nameString
通知名
============================================================
または

 指定された待機時間が経過する
============================================================
または

 指定された待機時間が経過する
============================================================
または

 指定された待機時間が経過する
============================================================
エラー

 次の場合は、エラーになります
============================================================
例:
 テキスト境界を作成し使用します
============================================================
または
 「見せかけの起動」が発生する
============================================================
または
 「見せかけの起動」が発生する
============================================================
または
 指定された待機時間が経過する
============================================================
または
 指定された待機時間が経過する
============================================================
Font
ComponentのFont
============================================================
または
 指定された待機時間が経過する
============================================================
文字 
説明


#
任意の有効な数字
============================================================
値意味
"r"
 読取り専用で開きます
============================================================
または
 指定された待機時間が経過する
============================================================
または
 指定された待機時間が経過する
============================================================
列挙型

 使用には次の制約があります
============================================================
text/html
HTMLテキスト
============================================================
または

 指定された期限が経過する
============================================================
または

 指定された期限が経過する
============================================================
)
 
 これは次のコードと等価です
============================================================
previousValue
前の要素
============================================================
既知のUIDの場合は0
 count
============================================================
Paint
Componentの色
============================================================
value
シーケンスの現在の要素
============================================================
たとえば、
 
 は、次と同じです
============================================================
使用法
使用には次の制約があります
============================================================
ダッシュ
 「月の日」を表す2桁
============================================================
ダッシュ
 「年の日」を表す3桁
============================================================
スペース
 月を英語で表す3文字
============================================================
text/rtf
RTFテキスト
============================================================
parts[0]
名前空間URI
============================================================
既知のUID場合は0
 time
============================================================
delete
     削除権
============================================================
斜線
子と親を結ぶ線が描かれる
============================================================
parts[2]
元のraw名
============================================================
write
     書込み権
============================================================
このクラスが使用
 6予約済み
============================================================
read
     読込み権
============================================================
nextValue
次の要素
============================================================
ダッシュ
 曜日を表す1桁
============================================================
)

 これは中間操作です
============================================================
)

 これは中間操作です
============================================================
)

 これは中間操作です
============================================================
)

 これは中間操作です
============================================================
)

 これは中間操作です
============================================================
)

 これは中間操作です
============================================================
)

 これは中間操作です
============================================================
)

 これは終端操作です
============================================================
例
使用例を次に示します
============================================================
ダッシュ
 月を表す2桁
============================================================
スペース
 年を表す4桁
============================================================
スペース
 時を表す2桁
============================================================
コロン
 分を表す2桁
============================================================
コロン
 秒を表す2桁
============================================================
ダッシュ
 文字'W'
============================================================
コロン
 分を表す2桁
============================================================
コロン
 秒を表す2桁
============================================================
'
エスケープ文字
============================================================
)

 同期
============================================================
)
例: