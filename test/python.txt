#https://docs.python.org/ja/3/tutorial/
Python は強力で、学びやすいプログラミング言語です。
効率的な高レベルデータ構造と、シンプルで効果的なオブジェクト指向プログラミング機構を備えています。 
Python は、洗練された文法・動的なデータ型付け・インタープリタであることなどから、スクリプティングや高速アプリケーション開発(Rapid Application Development: RAD)に理想的なプログラミング言語となっています。
Python Web サイト(https://www.python.org) は、 Python インタープリタと標準ライブラリのソースコードと、主要プラットフォームごとにコンパイル済みのバイナリファイルを無料で配布しています。
また、Python Web サイトには、無料のサードパーティモジュールやプログラム、ツール、ドキュメントなども紹介しています。
Python インタプリタは、簡単に C/C++ 言語などで実装された関数やデータ型を組み込み、拡張できます。
また、アプリケーションのカスタマイズを行う、拡張言語としても適しています。
このチュートリアルは、Python 言語の基本的な概念と機能を、形式ばらずに紹介します。
読むだけではなく、Pythonインタープリタで実際にサンプルを実行すると理解が深まりますが、サンプルはそれぞれ独立していますので、ただ読むだけでも良いでしょう。
標準オブジェクトやモジュールの詳細は、 Python 標準ライブラリ を参照してください。
また、正式な言語定義は、 Python 言語リファレンス にあります。
C 言語や C++ 言語で拡張モジュールを書くなら、 Python インタプリタの拡張と埋め込み や Python/C API リファレンスマニュアル を参照してください。
Python の解説書も販売されています。
このチュートリアルは、Python全体を対象とした、包括的な解説書ではありません。
よく使われる機能に限っても、全ては紹介していません。
その代わり、このチュートリアルでは、Pythonのもっとも特徴的な機能を中心に紹介して、この言語の持ち味や、スタイルを感じられるようにしています。
このチュートリアルを読み終えると、Python のモジュールやプログラムを読み書きできるようになっているでしょう。
また、Python 標準ライブラリ のさまざまな Python ライブラリモジュールを、詳しく調べられるようになっているはずです。
用語集 にも目を通しておくと良いでしょう。
コンピュータを使っていろいろな作業をしていると、自動化したい作業が出てくるでしょう。
たとえば、たくさんのテキストファイルで検索-置換操作を行いたい、大量の写真ファイルを込み入ったやりかたでファイル名を整理して変更したり、などです。
ちょっとした専用のデータベースや、何か専用のGUIアプリケーション、シンプルなゲームを作りたいかもしれません。
あなたがプロのソフト開発者として、C/C++/Java ライブラリを扱う必要があるけども、通常の編集/コンパイル/テスト/再コンパイルのサイクルを遅すぎると感じているかもしれません。
上記ライブラリのためのテストを書くことにうんざりしているかもしれません。
または、拡張言語を持つアプリケーションを書いているなら、そのために新しい言語一式の設計と実装をしたくないでしょう。
Pythonはそんなあなたのための言語です。
そういった処理は、Unix シェルスクリプトや Windows バッチファイルで書くこともできます。
しかし、シェルスクリプトはファイル操作やテキストデータの操作には向いていますが、GUIアプリケーションやゲームにはむいていません。
C/C++/Java プログラムを書くこともできますが、最初の試し書きだけでもかなりの時間がかかってしまいます。
Pythonはもっと簡単に利用でき、Windows、Mac OS X、そして Unix オペレーティングシステムで動作し、あなたの仕事をすばやく片付ける助けになるでしょう。
Pyhon は簡単に利用できますが、本物のプログラミング言語であり、シェルスクリプトやバッチファイルよりも多くの機構があり、大きなプログラムの開発にも適しています。
一方では、Python は C よりたくさんのエラーチェックを実行時に行っており、また可変長配列や辞書などの高級な型を組込みで持つ 超高級言語(very-high-level language) です。
Python は Awk や Perl などよりも汎用的なデータ型を備えており、より多くの領域で利用できます。
また、Pythonはこれらの言語と比べても、少なくとも同じぐらいには簡単です。
Python では、プログラムをモジュールに分割して、他の Python プログラムで再利用できます。
Python には膨大な標準モジュールが付属していて、プログラムを作る上での基盤として、あるいは Python プログラミングを学ぶためのサンプルとして利用できます。
標準モジュールには、ファイル I/O、システムコール、ソケットといった機能や、Tk のようなグラフィカルユーザインタフェースツールキットを使うためのインターフェイスなども提供しています。
Python はインタプリタ言語です。
コンパイルやリンクの必要がないので、プログラムを開発する際にかなりの時間を節約できます。
インタプリタは対話的にも使えるので、言語の様々な機能について実験してみたり、書き捨てのプログラムを書いたり、ボトムアップでプログラムを開発する際に、関数をテストしたりといったことが簡単にできます。
便利な電卓にもなります。
Python では、とてもコンパクトで読みやすいプログラムを書けます。
Python で書かれたプログラムは大抵、同じ機能の C 言語, C++ 言語や Java のプログラムよりもはるかに短くなります。
これには以下のようないくつかの理由があります。
高レベルのデータ型によって、複雑な操作を一つの実行文で表現できます。
実行文のグループ化を、グループの開始や終了の括弧ではなくインデントで行えます。
変数や引数の宣言が不要です。
Python には 拡張性 があります。
C 言語でプログラムを書く方法を知っているなら、簡単に新たな組み込み関数やモジュールを、簡単にインタプリタに追加できます。
これによって、いちばん時間のかかる処理を高速化したり、ベンダ特有のグラフィクスライブラリなどの、 バイナリ形式でしか手に入らないライブラリを Python にリンクしたりできます。
その気になれば、Python インタプリタを C で書かれたアプリケーションにリンクして、アプリケーションに対する拡張言語や命令言語としても使えます。
ところで、この言語は BBC のショー番組、"モンティパイソンの空飛ぶサーカス (Monty Python's Flying Circus)" から取ったもので、爬虫類とは関係ありません。
このドキュメントでは、モンティパイソンの寸劇への参照が許可されているだけでなく、むしろ推奨されています！
さて、皆さんはもう Python にワクワクして、もうちょっと詳しく調べてみたくなったはずです。
プログラミング言語を習得する最良の方法は使ってみることですから、このチュートリアルではみなさんが読んだ内容を Python インタプリタで試してみることをおすすめします。
次の章では、まずインタプリタの使い方を説明します。
これはわかりきった内容かもしれませんが、後に説明する例題を試してみる上で不可欠なことです。
チュートリアルの残りの部分では、Python プログラム言語と実行システムの様々な機能を例題を交えて紹介します。
単純な式、実行文、データ型から始めて、関数とモジュールを経て、最後には例外処理やユーザ定義クラスといったやや高度な概念にも触れます。
どのディレクトリに Python インタプリタをインストールするかはインストール時に選択できるので、インタプリタは他のディレクトリにあるかもしれません。
身近な Python に詳しい人か、システム管理者に聞いてみてください。
全てのコマンドラインオプションは コマンドラインと環境 で説明されています。
デフォルトでは、Python のソースコードは UTF-8 でエンコードされているものとして扱われます。
UTF-8 では、世界中のほとんどの言語の文字を、同時に文字列リテラル、識別子、コメントなどに書けます。
ただし、標準ライブラリは識別子に ASCII 文字のみを利用していて、その他のポータブルなコードもその慣習に従うべきです。
それらの文字を正しく表示するためには、エディターはそのファイルが UTF-8 である事を識別して、そのファイルに含まれている文字を全てサポートしたフォントを使わなければなりません。
デフォルトエンコーディング以外のエンコーディングを使用するには、ファイルの 先頭 の行に特別なコメントを追加しなければなりません。
以下のサンプルでは、入力と出力はプロンプトの有無で区別します。
例を実際に試す場合は、プロンプトが表示されているときに、サンプル中のプロンプトから後ろの内容全てを入力します。
このマニュアルにあるサンプルの多くは、対話プロンプトで入力されるものでもコメントを含んでいます。
Python におけるコメント文は、ハッシュ文字で始まり、物理行の終わりまで続きます。
コメントは行の先頭にも、空白やコードの後にも書くことができますが、文字列リテラルの内部に置くことはできません。
文字列リテラル中のハッシュ文字はただのハッシュ文字です。
コメントはコードを明快にするためのものであり、Pythonはコメントを解釈しません。
なので、サンプルコードを実際に入力して試して見るときは、コメントを省いても大丈夫です。
これまでエラーメッセージについては簡単に触れるだけでしたが、チュートリアル中の例を自分で試していたら、実際にいくつかのエラーメッセージを見ていることでしょう。
エラーには (少なくとも) 二つのはっきり異なる種類があります。
それは 構文エラー (syntax error) と 例外 (exception) です。
構文エラーは構文解析エラー (parsing error) としても知られており、Python を勉強している間に最もよく遭遇する問題の一つでしょう。
パーサは違反の起きている行を表示し、小さな「矢印」を表示して、行中でエラーが検出された最初の位置を示します。
エラーは矢印の 直前の トークンでひき起こされています。
上記の例では、エラーは関数 print() で検出されています。
コロン (':') がその前に無いからです。
入力がスクリプトから来ている場合は、どこを見ればよいか分かるようにファイル名と行番号が出力されます。
たとえ文や式が構文的に正しくても、実行しようとしたときにエラーが発生するかもしれません。
実行中に検出されたエラーは 例外 (exception) と呼ばれ、常に致命的とは限りません。
これから、Python プログラムで例外をどのように扱うかを学んでいきます。
ほとんどの例外はプログラムで処理されず、以下に示されるようなメッセージになります。
エラーメッセージの最終行は何が起こったかを示しています。
例外は様々な型 (type) で起こり、その型がエラーメッセージの一部として出力されます。
上の例での型は ZeroDivisionError, NameError, TypeError です。
例外型として出力される文字列は、発生した例外の組み込み名です。
これは全ての組み込み例外について成り立ちますが、ユーザ定義の例外では (成り立つようにするのは有意義な慣習ですが) 必ずしも成り立ちません。
標準例外の名前は組み込みの識別子です (予約語ではありません)。
残りの行は例外の詳細で、その例外の型と何が起きたかに依存します。
エラーメッセージの先頭部分では、例外が発生した実行コンテキスト (context) を、スタックのトレースバック (stack traceback) の形式で示しています。
一般には、この部分にはソースコード行をリストしたトレースバックが表示されます。
しかし、標準入力から読み取られたコードは表示されません。
組み込み例外 には、組み込み例外とその意味がリストされています。
例外を選別して処理するようなプログラムを書くことができます。
以下の例を見てください。
この例では、有効な文字列が入力されるまでユーザに入力を促しますが、ユーザがプログラムに (Control-C か、またはオペレーティングシステムがサポートしている何らかのキーを使って) 割り込みをかけてプログラムを中断させることができるようにしています。
ユーザが生成した割り込みは、 KeyboardInterrupt 例外が送出されることで通知されるということに注意してください。